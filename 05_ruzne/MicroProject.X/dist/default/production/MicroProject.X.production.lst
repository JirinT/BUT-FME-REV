

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Sun Mar 08 09:38:31 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og9 
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    36                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    37                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    38                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    39  0000                     
    40                           ; Version 2.10
    41                           ; Generated 31/07/2019 GMT
    42                           ; 
    43                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    44                           ; All rights reserved.
    45                           ; 
    46                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    47                           ; 
    48                           ; Redistribution and use in source and binary forms, with or without modification, are
    49                           ; permitted provided that the following conditions are met:
    50                           ; 
    51                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    52                           ;        conditions and the following disclaimer.
    53                           ; 
    54                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    55                           ;        of conditions and the following disclaimer in the documentation and/or other
    56                           ;        materials provided with the distribution.
    57                           ; 
    58                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    59                           ;        software without specific prior written permission.
    60                           ; 
    61                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    62                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    63                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    64                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    65                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    66                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    67                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    68                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    69                           ; 
    70                           ; 
    71                           ; Code-generator required, PIC18F46K22 Definitions
    72                           ; 
    73                           ; SFR Addresses
    74  0000                     
    75                           	psect	idataBANK0
    76  001DCE                     __pidataBANK0:
    77                           	opt callstack 0
    78                           
    79                           ;initializer for _g_state
    80  001DCE  01                 	db	1
    81  0000                     _ANSELC	set	3898
    82  0000                     _ANSELA	set	3896
    83  0000                     _ANSELDbits	set	3899
    84  0000                     _TMR1	set	4046
    85  0000                     _LATCbits	set	3979
    86  0000                     _LATDbits	set	3980
    87  0000                     _TRISCbits	set	3988
    88  0000                     _SSP2STATbits	set	3949
    89  0000                     _SSP2BUF	set	3951
    90  0000                     _SSP2CON2bits	set	3947
    91  0000                     _SSP2ADD	set	3950
    92  0000                     _SSP2CON1bits	set	3948
    93  0000                     _LATAbits	set	3977
    94  0000                     _TRISAbits	set	3986
    95  0000                     _TRISDbits	set	3989
    96  0000                     _T1CONbits	set	4045
    97  0000                     _PORTAbits	set	3968
    98  0000                     _PORTCbits	set	3970
    99  0000                     _LATD6	set	31846
   100  0000                     _LATD5	set	31845
   101  0000                     _LATD4	set	31844
   102  0000                     _LATC4	set	31836
   103  0000                     _LATD3	set	31843
   104  0000                     _LATD2	set	31842
   105  0000                     _SSP2IF	set	32039
   106  0000                     _GIE	set	32663
   107  0000                     _PEIE	set	32662
   108  0000                     _TMR1IF	set	31984
   109  0000                     _TMR1IE	set	31976
   110                           
   111                           	psect	smallconst
   112  001000                     __psmallconst:
   113                           	opt callstack 0
   114  001000  00                 	db	0
   115  001001                     STR_2:
   116  001001  25                 	db	37
   117  001002  30                 	db	48	;'0'
   118  001003  32                 	db	50	;'2'
   119  001004  64                 	db	100	;'d'
   120  001005  3A                 	db	58	;':'
   121  001006  25                 	db	37
   122  001007  30                 	db	48	;'0'
   123  001008  32                 	db	50	;'2'
   124  001009  64                 	db	100	;'d'
   125  00100A  2E                 	db	46
   126  00100B  25                 	db	37
   127  00100C  30                 	db	48	;'0'
   128  00100D  32                 	db	50	;'2'
   129  00100E  64                 	db	100	;'d'
   130  00100F  20                 	db	32
   131  001010  20                 	db	32
   132  001011  20                 	db	32
   133  001012  20                 	db	32
   134  001013  20                 	db	32
   135  001014  20                 	db	32
   136  001015  20                 	db	32
   137  001016  00                 	db	0
   138  001017                     STR_1:
   139  001017  54                 	db	84	;'T'
   140  001018  69                 	db	105	;'i'
   141  001019  6D                 	db	109	;'m'
   142  00101A  65                 	db	101	;'e'
   143  00101B  72                 	db	114	;'r'
   144  00101C  3A                 	db	58	;':'
   145  00101D  20                 	db	32
   146  00101E  20                 	db	32
   147  00101F  20                 	db	32
   148  001020  20                 	db	32
   149  001021  20                 	db	32
   150  001022  20                 	db	32
   151  001023  20                 	db	32
   152  001024  20                 	db	32
   153  001025  00                 	db	0
   154                           
   155                           ; #config settings
   156  001026  00                 	db	0	; dummy byte at the end
   157  0000                     
   158                           	psect	cinit
   159  001D0C                     __pcinit:
   160                           	opt callstack 0
   161  001D0C                     start_initialization:
   162                           	opt callstack 0
   163  001D0C                     __initialization:
   164                           	opt callstack 0
   165                           
   166                           ; Initialize objects allocated to BANK0 (1 bytes)
   167                           ; load TBLPTR registers with __pidataBANK0
   168  001D0C  0ECE               	movlw	low __pidataBANK0
   169  001D0E  6EF6               	movwf	tblptrl,c
   170  001D10  0E1D               	movlw	high __pidataBANK0
   171  001D12  6EF7               	movwf	tblptrh,c
   172  001D14  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   173  001D16  6EF8               	movwf	tblptru,c
   174  001D18  0009               	tblrd		*+	;fetch initializer
   175  001D1A  CFF5 F0A9          	movff	tablat,__pdataBANK0
   176                           
   177                           ; Clear objects allocated to BANK0 (44 bytes)
   178  001D1E  EE00  F060         	lfsr	0,__pbssBANK0
   179  001D22  0E2C               	movlw	44
   180  001D24                     clear_0:
   181  001D24  6AEE               	clrf	postinc0,c
   182  001D26  06E8               	decf	wreg,f,c
   183  001D28  E1FD               	bnz	clear_0
   184  001D2A                     end_of_initialization:
   185                           	opt callstack 0
   186  001D2A                     __end_of__initialization:
   187                           	opt callstack 0
   188  001D2A  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   189  001D2C  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   190  001D2E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   191  001D30  6EF8               	movwf	tblptru,c
   192  001D32  0100               	movlb	0
   193  001D34  EF33  F00C         	goto	_main	;jump to C main() function
   194                           
   195                           	psect	bssBANK0
   196  000060                     __pbssBANK0:
   197                           	opt callstack 0
   198  000060                     _nout:
   199                           	opt callstack 0
   200  000060                     	ds	2
   201  000062                     _width:
   202                           	opt callstack 0
   203  000062                     	ds	2
   204  000064                     _prec:
   205                           	opt callstack 0
   206  000064                     	ds	2
   207  000066                     _flags:
   208                           	opt callstack 0
   209  000066                     	ds	2
   210  000068                     ISR@reset:
   211                           	opt callstack 0
   212  000068                     	ds	1
   213  000069                     ISR@pause:
   214                           	opt callstack 0
   215  000069                     	ds	1
   216  00006A                     ISR@start:
   217                           	opt callstack 0
   218  00006A                     	ds	1
   219  00006B                     _g_timer_flag:
   220                           	opt callstack 0
   221  00006B                     	ds	1
   222  00006C                     _dbuf:
   223                           	opt callstack 0
   224  00006C                     	ds	32
   225                           
   226                           	psect	dataBANK0
   227  0000A9                     __pdataBANK0:
   228                           	opt callstack 0
   229  0000A9                     _g_state:
   230                           	opt callstack 0
   231  0000A9                     	ds	1
   232                           
   233                           	psect	cstackBANK0
   234  00008C                     __pcstackBANK0:
   235                           	opt callstack 0
   236  00008C                     	ds	2
   237  00008E                     sprintf@ap:
   238                           	opt callstack 0
   239                           
   240                           ; 1 bytes @ 0x2
   241  00008E                     	ds	1
   242  00008F                     sprintf@f:
   243                           	opt callstack 0
   244                           
   245                           ; 5 bytes @ 0x3
   246  00008F                     	ds	5
   247  000094                     main@text:
   248                           	opt callstack 0
   249                           
   250                           ; 17 bytes @ 0x8
   251  000094                     	ds	17
   252  0000A5                     main@leds:
   253                           	opt callstack 0
   254                           
   255                           ; 1 bytes @ 0x19
   256  0000A5                     	ds	1
   257  0000A6                     main@hos:
   258                           	opt callstack 0
   259                           
   260                           ; 1 bytes @ 0x1A
   261  0000A6                     	ds	1
   262  0000A7                     main@minutes:
   263                           	opt callstack 0
   264                           
   265                           ; 1 bytes @ 0x1B
   266  0000A7                     	ds	1
   267  0000A8                     main@seconds:
   268                           	opt callstack 0
   269                           
   270                           ; 1 bytes @ 0x1C
   271  0000A8                     	ds	1
   272                           
   273                           	psect	cstackCOMRAM
   274  000001                     __pcstackCOMRAM:
   275                           	opt callstack 0
   276  000001                     ?_strlen:
   277                           	opt callstack 0
   278  000001                     ?_isdigit:
   279                           	opt callstack 0
   280  000001                     ?_isspace:
   281                           	opt callstack 0
   282  000001                     ?___wmul:
   283                           	opt callstack 0
   284  000001                     ?___aodiv:
   285                           	opt callstack 0
   286  000001                     ?___aomod:
   287                           	opt callstack 0
   288  000001                     LCD_Send@data:
   289                           	opt callstack 0
   290  000001                     drive_leds@in:
   291                           	opt callstack 0
   292  000001                     strlen@s:
   293                           	opt callstack 0
   294  000001                     ___wmul@multiplier:
   295                           	opt callstack 0
   296  000001                     isdigit@c:
   297                           	opt callstack 0
   298  000001                     isspace@c:
   299                           	opt callstack 0
   300  000001                     fputc@c:
   301                           	opt callstack 0
   302  000001                     ___aodiv@dividend:
   303                           	opt callstack 0
   304  000001                     ___aomod@dividend:
   305                           	opt callstack 0
   306                           
   307                           ; 8 bytes @ 0x0
   308  000001                     	ds	1
   309  000002                     ??_LCD_Init:
   310  000002                     LCD_ShowString@textData:
   311                           	opt callstack 0
   312                           
   313                           ; 2 bytes @ 0x1
   314  000002                     	ds	1
   315  000003                     ??_isdigit:
   316  000003                     ??_isspace:
   317  000003                     fputc@fp:
   318                           	opt callstack 0
   319  000003                     strlen@a:
   320                           	opt callstack 0
   321  000003                     ___wmul@multiplicand:
   322                           	opt callstack 0
   323                           
   324                           ; 2 bytes @ 0x2
   325  000003                     	ds	1
   326  000004                     ??_LCD_ShowString:
   327  000004                     ??_fputc:
   328                           
   329                           ; 1 bytes @ 0x3
   330  000004                     	ds	1
   331  000005                     ___wmul@product:
   332                           	opt callstack 0
   333                           
   334                           ; 2 bytes @ 0x4
   335  000005                     	ds	1
   336  000006                     LCD_ShowString@lineNum:
   337                           	opt callstack 0
   338                           
   339                           ; 1 bytes @ 0x5
   340  000006                     	ds	1
   341  000007                     LCD_ShowString@i:
   342                           	opt callstack 0
   343  000007                     _isspace$1751:
   344                           	opt callstack 0
   345                           
   346                           ; 1 bytes @ 0x6
   347  000007                     	ds	1
   348  000008                     ?_atoi:
   349                           	opt callstack 0
   350  000008                     atoi@s:
   351                           	opt callstack 0
   352                           
   353                           ; 1 bytes @ 0x7
   354  000008                     	ds	1
   355  000009                     fputs@s:
   356                           	opt callstack 0
   357  000009                     ___aodiv@divisor:
   358                           	opt callstack 0
   359  000009                     ___aomod@divisor:
   360                           	opt callstack 0
   361                           
   362                           ; 8 bytes @ 0x8
   363  000009                     	ds	1
   364  00000A                     ??_atoi:
   365  00000A                     fputs@fp:
   366                           	opt callstack 0
   367                           
   368                           ; 1 bytes @ 0x9
   369  00000A                     	ds	1
   370  00000B                     fputs@c:
   371                           	opt callstack 0
   372                           
   373                           ; 1 bytes @ 0xA
   374  00000B                     	ds	1
   375  00000C                     fputs@i:
   376                           	opt callstack 0
   377                           
   378                           ; 2 bytes @ 0xB
   379  00000C                     	ds	2
   380  00000E                     ?_pad:
   381                           	opt callstack 0
   382  00000E                     pad@fp:
   383                           	opt callstack 0
   384  00000E                     atoi@neg:
   385                           	opt callstack 0
   386                           
   387                           ; 2 bytes @ 0xD
   388  00000E                     	ds	1
   389  00000F                     pad@buf:
   390                           	opt callstack 0
   391                           
   392                           ; 1 bytes @ 0xE
   393  00000F                     	ds	1
   394  000010                     pad@p:
   395                           	opt callstack 0
   396  000010                     _atoi$1733:
   397                           	opt callstack 0
   398                           
   399                           ; 2 bytes @ 0xF
   400  000010                     	ds	1
   401  000011                     ___aodiv@counter:
   402                           	opt callstack 0
   403  000011                     ___aomod@counter:
   404                           	opt callstack 0
   405                           
   406                           ; 1 bytes @ 0x10
   407  000011                     	ds	1
   408  000012                     ??_pad:
   409  000012                     ___aodiv@sign:
   410                           	opt callstack 0
   411  000012                     ___aomod@sign:
   412                           	opt callstack 0
   413  000012                     _atoi$1735:
   414                           	opt callstack 0
   415                           
   416                           ; 2 bytes @ 0x11
   417  000012                     	ds	1
   418  000013                     ?_abs:
   419                           	opt callstack 0
   420  000013                     pad@i:
   421                           	opt callstack 0
   422  000013                     abs@a:
   423                           	opt callstack 0
   424  000013                     ___aodiv@quotient:
   425                           	opt callstack 0
   426                           
   427                           ; 8 bytes @ 0x12
   428  000013                     	ds	1
   429  000014                     _atoi$1734:
   430                           	opt callstack 0
   431                           
   432                           ; 1 bytes @ 0x13
   433  000014                     	ds	1
   434  000015                     ??_abs:
   435  000015                     pad@w:
   436                           	opt callstack 0
   437  000015                     atoi@n:
   438                           	opt callstack 0
   439                           
   440                           ; 2 bytes @ 0x14
   441  000015                     	ds	6
   442  00001B                     ?_dtoa:
   443                           	opt callstack 0
   444  00001B                     dtoa@fp:
   445                           	opt callstack 0
   446                           
   447                           ; 1 bytes @ 0x1A
   448  00001B                     	ds	1
   449  00001C                     dtoa@d:
   450                           	opt callstack 0
   451                           
   452                           ; 8 bytes @ 0x1B
   453  00001C                     	ds	8
   454  000024                     ??_dtoa:
   455                           
   456                           ; 1 bytes @ 0x23
   457  000024                     	ds	8
   458  00002C                     _dtoa$1261:
   459                           	opt callstack 0
   460                           
   461                           ; 2 bytes @ 0x2B
   462  00002C                     	ds	2
   463  00002E                     dtoa@p:
   464                           	opt callstack 0
   465                           
   466                           ; 2 bytes @ 0x2D
   467  00002E                     	ds	2
   468  000030                     dtoa@w:
   469                           	opt callstack 0
   470                           
   471                           ; 2 bytes @ 0x2F
   472  000030                     	ds	2
   473  000032                     dtoa@s:
   474                           	opt callstack 0
   475                           
   476                           ; 2 bytes @ 0x31
   477  000032                     	ds	2
   478  000034                     dtoa@n:
   479                           	opt callstack 0
   480                           
   481                           ; 8 bytes @ 0x33
   482  000034                     	ds	8
   483  00003C                     dtoa@i:
   484                           	opt callstack 0
   485                           
   486                           ; 2 bytes @ 0x3B
   487  00003C                     	ds	2
   488  00003E                     ?_vfpfcnvrt:
   489                           	opt callstack 0
   490  00003E                     vfpfcnvrt@fp:
   491                           	opt callstack 0
   492                           
   493                           ; 1 bytes @ 0x3D
   494  00003E                     	ds	1
   495  00003F                     vfpfcnvrt@fmt:
   496                           	opt callstack 0
   497                           
   498                           ; 1 bytes @ 0x3E
   499  00003F                     	ds	1
   500  000040                     vfpfcnvrt@ap:
   501                           	opt callstack 0
   502                           
   503                           ; 1 bytes @ 0x3F
   504  000040                     	ds	1
   505  000041                     ??_vfpfcnvrt:
   506                           
   507                           ; 1 bytes @ 0x40
   508  000041                     	ds	4
   509  000045                     vfpfcnvrt@ll:
   510                           	opt callstack 0
   511                           
   512                           ; 8 bytes @ 0x44
   513  000045                     	ds	8
   514  00004D                     vfpfcnvrt@done:
   515                           	opt callstack 0
   516                           
   517                           ; 2 bytes @ 0x4C
   518  00004D                     	ds	2
   519  00004F                     _vfpfcnvrt$1276:
   520                           	opt callstack 0
   521                           
   522                           ; 2 bytes @ 0x4E
   523  00004F                     	ds	2
   524  000051                     ?_vfprintf:
   525                           	opt callstack 0
   526  000051                     vfprintf@fp:
   527                           	opt callstack 0
   528                           
   529                           ; 1 bytes @ 0x50
   530  000051                     	ds	1
   531  000052                     vfprintf@fmt:
   532                           	opt callstack 0
   533                           
   534                           ; 1 bytes @ 0x51
   535  000052                     	ds	1
   536  000053                     vfprintf@ap:
   537                           	opt callstack 0
   538                           
   539                           ; 1 bytes @ 0x52
   540  000053                     	ds	1
   541  000054                     vfprintf@cfmt:
   542                           	opt callstack 0
   543                           
   544                           ; 1 bytes @ 0x53
   545  000054                     	ds	1
   546  000055                     ?_sprintf:
   547                           	opt callstack 0
   548  000055                     sprintf@s:
   549                           	opt callstack 0
   550                           
   551                           ; 1 bytes @ 0x54
   552  000055                     	ds	1
   553  000056                     sprintf@fmt:
   554                           	opt callstack 0
   555                           
   556                           ; 1 bytes @ 0x55
   557  000056                     	ds	7
   558  00005D                     ??_main:
   559                           
   560                           ; 1 bytes @ 0x5C
   561  00005D                     	ds	2
   562                           
   563 ;;
   564 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   565 ;;
   566 ;; *************** function _main *****************
   567 ;; Defined at:
   568 ;;		line 67 in file "main.c"
   569 ;; Parameters:    Size  Location     Type
   570 ;;		None
   571 ;; Auto vars:     Size  Location     Type
   572 ;;  text           17    8[BANK0 ] unsigned char [17]
   573 ;;  seconds         1   28[BANK0 ] unsigned char 
   574 ;;  minutes         1   27[BANK0 ] unsigned char 
   575 ;;  hos             1   26[BANK0 ] unsigned char 
   576 ;;  leds            1   25[BANK0 ] unsigned char 
   577 ;; Return value:  Size  Location     Type
   578 ;;                  2   57[None  ] int 
   579 ;; Registers used:
   580 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   581 ;; Tracked objects:
   582 ;;		On entry : 0/0
   583 ;;		On exit  : 0/0
   584 ;;		Unchanged: 0/0
   585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   586 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   587 ;;      Locals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   588 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   589 ;;      Totals:         2      21       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   590 ;;Total ram usage:       23 bytes
   591 ;; Hardware stack levels required when called:    9
   592 ;; This function calls:
   593 ;;		_LCD_Init
   594 ;;		_LCD_ShowString
   595 ;;		_drive_leds
   596 ;;		_init_gpio
   597 ;;		_init_tmr1
   598 ;;		_sprintf
   599 ;; This function is called by:
   600 ;;		Startup code after reset
   601 ;; This function uses a non-reentrant model
   602 ;;
   603                           
   604                           	psect	text0
   605  001866                     __ptext0:
   606                           	opt callstack 0
   607  001866                     _main:
   608                           	opt callstack 22
   609                           
   610                           ;main.c: 69:     init_gpio();
   611                           
   612                           ;incstack = 0
   613  001866  EC9C  F00E         	call	_init_gpio	;wreg free
   614                           
   615                           ;main.c: 70:     LCD_Init();
   616  00186A  EC9E  F00C         	call	_LCD_Init	;wreg free
   617                           
   618                           ;main.c: 71:     init_tmr1();
   619  00186E  ECDF  F00E         	call	_init_tmr1	;wreg free
   620                           
   621                           ;main.c: 73:     PEIE = 1;
   622  001872  8CF2               	bsf	4082,6,c	;volatile
   623                           
   624                           ;main.c: 74:     GIE = 1;
   625  001874  8EF2               	bsf	4082,7,c	;volatile
   626                           
   627                           ;main.c: 75:     TMR1 = (0xffff - 10000);
   628  001876  0ED8               	movlw	216
   629  001878  6ECF               	movwf	207,c	;volatile
   630  00187A  0EEF               	movlw	239
   631  00187C  6ECE               	movwf	206,c	;volatile
   632                           
   633                           ;main.c: 76:     T1CONbits.TMR1ON = 1;
   634  00187E  80CD               	bsf	205,0,c	;volatile
   635                           
   636                           ;main.c: 78:     char text[17];;main.c: 79:     uint8_t hos=0,
   637  001880  0E00               	movlw	0
   638  001882  0100               	movlb	0	; () banked
   639  001884  6FA6               	movwf	main@hos& (0+255),b
   640                           
   641                           ; BSR set to: 0
   642                           ;main.c: 80:             minutes=0,
   643  001886  0E00               	movlw	0
   644  001888  6FA7               	movwf	main@minutes& (0+255),b
   645                           
   646                           ; BSR set to: 0
   647                           ;main.c: 81:             seconds=0;
   648  00188A  0E00               	movlw	0
   649  00188C  6FA8               	movwf	main@seconds& (0+255),b
   650                           
   651                           ; BSR set to: 0
   652                           ;main.c: 82:     char leds = 0b111111;
   653  00188E  0E3F               	movlw	63
   654  001890  6FA5               	movwf	main@leds& (0+255),b
   655                           
   656                           ; BSR set to: 0
   657                           ;main.c: 84:     LCD_ShowString(1, "Timer:        ");
   658  001892  0E17               	movlw	low STR_1
   659  001894  6E02               	movwf	LCD_ShowString@textData^0,c
   660  001896  5002               	movf	LCD_ShowString@textData^0,w,c
   661  001898  A4D8               	btfss	status,2,c
   662  00189A  0E10               	movlw	high __smallconst
   663  00189C  6E03               	movwf	(LCD_ShowString@textData+1)^0,c
   664  00189E  0E01               	movlw	1
   665  0018A0  EC81  F00D         	call	_LCD_ShowString
   666  0018A4                     l2222:
   667                           
   668                           ;main.c: 87:         if (g_timer_flag){
   669  0018A4  0100               	movlb	0	; () banked
   670  0018A6  516B               	movf	_g_timer_flag& (0+255),w,b	;volatile
   671  0018A8  A4D8               	btfss	status,2,c
   672  0018AA  D01F               	goto	l2252
   673  0018AC  D031               	goto	l2256
   674  0018AE                     l2226:
   675                           
   676                           ; BSR set to: 0
   677                           ;main.c: 93:                     hos++;
   678  0018AE  2BA6               	incf	main@hos& (0+255),f,b
   679                           
   680                           ; BSR set to: 0
   681                           ;main.c: 94:                     if (hos >=100){
   682  0018B0  0E63               	movlw	99
   683  0018B2  65A6               	cpfsgt	main@hos& (0+255),b
   684  0018B4  D02B               	goto	l2254
   685                           
   686                           ; BSR set to: 0
   687                           ;main.c: 95:                         seconds++;
   688  0018B6  2BA8               	incf	main@seconds& (0+255),f,b
   689                           
   690                           ; BSR set to: 0
   691                           ;main.c: 96:                         hos = 0;
   692  0018B8  0E00               	movlw	0
   693  0018BA  6FA6               	movwf	main@hos& (0+255),b
   694                           
   695                           ; BSR set to: 0
   696                           ;main.c: 97:                         leds ^= 0b111111;
   697  0018BC  0E3F               	movlw	63
   698  0018BE  1BA5               	xorwf	main@leds& (0+255),f,b
   699                           
   700                           ; BSR set to: 0
   701                           ;main.c: 98:                         drive_leds(leds);
   702  0018C0  51A5               	movf	main@leds& (0+255),w,b
   703  0018C2  ECE2  F00D         	call	_drive_leds
   704                           
   705                           ;main.c: 99:                         if (seconds >=60){
   706  0018C6  0E3B               	movlw	59
   707  0018C8  0100               	movlb	0	; () banked
   708  0018CA  65A8               	cpfsgt	main@seconds& (0+255),b
   709  0018CC  D01F               	goto	l2254
   710                           
   711                           ; BSR set to: 0
   712                           ;main.c: 100:                             minutes++;
   713  0018CE  2BA7               	incf	main@minutes& (0+255),f,b
   714                           
   715                           ; BSR set to: 0
   716                           ;main.c: 101:                             seconds = 0;
   717  0018D0  0E00               	movlw	0
   718  0018D2  6FA8               	movwf	main@seconds& (0+255),b
   719                           
   720                           ; BSR set to: 0
   721                           ;main.c: 102:                             if (minutes >= 99)
   722  0018D4  0E62               	movlw	98
   723  0018D6  65A7               	cpfsgt	main@minutes& (0+255),b
   724  0018D8  D019               	goto	l2254
   725  0018DA  D004               	goto	L1
   726  0018DC                     l2248:
   727                           
   728                           ; BSR set to: 0
   729                           ;main.c: 108:                     hos = 0;
   730  0018DC  0E00               	movlw	0
   731  0018DE  6FA6               	movwf	main@hos& (0+255),b
   732                           
   733                           ;main.c: 109:                     seconds = 0;
   734  0018E0  0E00               	movlw	0
   735  0018E2  6FA8               	movwf	main@seconds& (0+255),b
   736  0018E4                     L1:
   737                           
   738                           ;main.c: 110:                     minutes = 0;
   739  0018E4  0E00               	movlw	0
   740  0018E6  6FA7               	movwf	main@minutes& (0+255),b
   741                           
   742                           ;main.c: 111:                     break;
   743  0018E8  D011               	goto	l2254
   744  0018EA                     l2252:
   745                           
   746                           ; BSR set to: 0
   747  0018EA  51A9               	movf	_g_state& (0+255),w,b	;volatile
   748  0018EC  6E5D               	movwf	??_main^0,c
   749  0018EE  6A5E               	clrf	(??_main+1)^0,c
   750                           
   751                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   752                           ; Switch size 1, requested type "simple"
   753                           ; Number of cases is 1, Range of values is 0 to 0
   754                           ; switch strategies available:
   755                           ; Name         Instructions Cycles
   756                           ; simple_byte            4     3 (average)
   757                           ;	Chosen strategy is simple_byte
   758  0018F0  505E               	movf	(??_main+1)^0,w,c
   759  0018F2  0A00               	xorlw	0	; case 0
   760  0018F4  A4D8               	btfss	status,2,c
   761  0018F6  D00A               	goto	l2254
   762                           
   763                           ; BSR set to: 0
   764                           ; Switch size 1, requested type "simple"
   765                           ; Number of cases is 3, Range of values is 1 to 3
   766                           ; switch strategies available:
   767                           ; Name         Instructions Cycles
   768                           ; simple_byte           10     6 (average)
   769                           ;	Chosen strategy is simple_byte
   770  0018F8  505D               	movf	??_main^0,w,c
   771  0018FA  0A01               	xorlw	1	; case 1
   772  0018FC  B4D8               	btfsc	status,2,c
   773  0018FE  D006               	goto	l2254
   774  001900  0A03               	xorlw	3	; case 2
   775  001902  B4D8               	btfsc	status,2,c
   776  001904  D7D4               	goto	l2226
   777  001906  0A01               	xorlw	1	; case 3
   778  001908  B4D8               	btfsc	status,2,c
   779  00190A  D7E8               	goto	l2248
   780  00190C                     l2254:
   781                           
   782                           ; BSR set to: 0
   783                           ;main.c: 115:             g_timer_flag = 0;
   784  00190C  0E00               	movlw	0
   785  00190E  6F6B               	movwf	_g_timer_flag& (0+255),b	;volatile
   786  001910                     l2256:
   787                           
   788                           ; BSR set to: 0
   789                           ;main.c: 118:         sprintf(text, "%02d:%02d.%02d       ", minutes, seconds, hos);
   790  001910  0E94               	movlw	low main@text
   791  001912  6E55               	movwf	sprintf@s^0,c
   792  001914  0E01               	movlw	low STR_2
   793  001916  6E56               	movwf	sprintf@fmt^0,c
   794  001918  C0A7  F057         	movff	main@minutes,?_sprintf+2
   795  00191C  6A58               	clrf	(?_sprintf+3)^0,c
   796  00191E  C0A8  F059         	movff	main@seconds,?_sprintf+4
   797  001922  6A5A               	clrf	(?_sprintf+5)^0,c
   798  001924  C0A6  F05B         	movff	main@hos,?_sprintf+6
   799  001928  6A5C               	clrf	(?_sprintf+7)^0,c
   800  00192A  EC22  F00E         	call	_sprintf	;wreg free
   801                           
   802                           ; BSR set to: 0
   803                           ;main.c: 119:         LCD_ShowString(2, text);
   804  00192E  0E94               	movlw	low main@text
   805  001930  6E02               	movwf	LCD_ShowString@textData^0,c
   806  001932  6A03               	clrf	(LCD_ShowString@textData+1)^0,c
   807  001934  0E02               	movlw	2
   808  001936  EC81  F00D         	call	_LCD_ShowString
   809  00193A  D7B4               	goto	l2222
   810  00193C                     __end_of_main:
   811                           	opt callstack 0
   812                           
   813 ;; *************** function _sprintf *****************
   814 ;; Defined at:
   815 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\nf_sprintf.c"
   816 ;; Parameters:    Size  Location     Type
   817 ;;  s               1   84[COMRAM] PTR unsigned char 
   818 ;;		 -> main@text(17), 
   819 ;;  fmt             1   85[COMRAM] PTR const unsigned char 
   820 ;;		 -> STR_2(22), 
   821 ;; Auto vars:     Size  Location     Type
   822 ;;  f               5    3[BANK0 ] struct _IO_FILE
   823 ;;  ret             2    0        int 
   824 ;;  ap              1    2[BANK0 ] PTR void [1]
   825 ;;		 -> ?_sprintf(2), 
   826 ;; Return value:  Size  Location     Type
   827 ;;                  2   84[COMRAM] int 
   828 ;; Registers used:
   829 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   830 ;; Tracked objects:
   831 ;;		On entry : 3F/0
   832 ;;		On exit  : 3F/0
   833 ;;		Unchanged: 0/0
   834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   835 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   836 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   838 ;;      Totals:         8       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   839 ;;Total ram usage:       16 bytes
   840 ;; Hardware stack levels used:    1
   841 ;; Hardware stack levels required when called:    8
   842 ;; This function calls:
   843 ;;		_vfprintf
   844 ;; This function is called by:
   845 ;;		_main
   846 ;; This function uses a non-reentrant model
   847 ;;
   848                           
   849                           	psect	text1
   850  001C44                     __ptext1:
   851                           	opt callstack 0
   852  001C44                     _sprintf:
   853                           	opt callstack 22
   854                           
   855                           ; BSR set to: 0
   856                           
   857                           ;incstack = 0
   858  001C44  0E57               	movlw	low (?_sprintf+2)
   859  001C46  6F8E               	movwf	sprintf@ap& (0+255),b
   860  001C48  C055  F08F         	movff	sprintf@s,sprintf@f
   861                           
   862                           ; BSR set to: 0
   863  001C4C  0E00               	movlw	0
   864  001C4E  6F91               	movwf	(sprintf@f+2)& (0+255),b
   865  001C50  0E00               	movlw	0
   866  001C52  6F90               	movwf	(sprintf@f+1)& (0+255),b
   867                           
   868                           ; BSR set to: 0
   869  001C54  0E00               	movlw	0
   870  001C56  6F93               	movwf	(sprintf@f+4)& (0+255),b
   871  001C58  0E00               	movlw	0
   872  001C5A  6F92               	movwf	(sprintf@f+3)& (0+255),b
   873                           
   874                           ; BSR set to: 0
   875  001C5C  0E8F               	movlw	low sprintf@f
   876  001C5E  6E51               	movwf	vfprintf@fp^0,c
   877  001C60  C056  F052         	movff	sprintf@fmt,vfprintf@fmt
   878  001C64  0E8E               	movlw	low sprintf@ap
   879  001C66  6E53               	movwf	vfprintf@ap^0,c
   880  001C68  ECC0  F00D         	call	_vfprintf	;wreg free
   881                           
   882                           ; BSR set to: 0
   883  001C6C  5055               	movf	sprintf@s^0,w,c
   884  001C6E  2590               	addwf	(sprintf@f+1)& (0+255),w,b
   885  001C70  6ED9               	movwf	fsr2l,c
   886  001C72  6ADA               	clrf	fsr2h,c
   887  001C74  0E00               	movlw	0
   888  001C76  6EDF               	movwf	indf2,c
   889                           
   890                           ; BSR set to: 0
   891  001C78  0012               	return		;funcret
   892  001C7A                     __end_of_sprintf:
   893                           	opt callstack 0
   894                           
   895 ;; *************** function _vfprintf *****************
   896 ;; Defined at:
   897 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
   898 ;; Parameters:    Size  Location     Type
   899 ;;  fp              1   80[COMRAM] PTR struct _IO_FILE
   900 ;;		 -> sprintf@f(5), 
   901 ;;  fmt             1   81[COMRAM] PTR const unsigned char 
   902 ;;		 -> STR_2(22), 
   903 ;;  ap              1   82[COMRAM] PTR PTR void 
   904 ;;		 -> sprintf@ap(1), 
   905 ;; Auto vars:     Size  Location     Type
   906 ;;  cfmt            1   83[COMRAM] PTR unsigned char 
   907 ;;		 -> STR_2(22), 
   908 ;; Return value:  Size  Location     Type
   909 ;;                  2   80[COMRAM] int 
   910 ;; Registers used:
   911 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   912 ;; Tracked objects:
   913 ;;		On entry : 3F/0
   914 ;;		On exit  : 3F/0
   915 ;;		Unchanged: 0/0
   916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   917 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   918 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   920 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   921 ;;Total ram usage:        4 bytes
   922 ;; Hardware stack levels used:    1
   923 ;; Hardware stack levels required when called:    7
   924 ;; This function calls:
   925 ;;		_vfpfcnvrt
   926 ;; This function is called by:
   927 ;;		_sprintf
   928 ;; This function uses a non-reentrant model
   929 ;;
   930                           
   931                           	psect	text2
   932  001B80                     __ptext2:
   933                           	opt callstack 0
   934  001B80                     _vfprintf:
   935                           	opt callstack 22
   936                           
   937                           ; BSR set to: 0
   938                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.1
      +                          0\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.10\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.10\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
   939                           
   940                           ; BSR set to: 0
   941                           ;incstack = 0
   942  001B80  C052  F054         	movff	vfprintf@fmt,vfprintf@cfmt
   943                           
   944                           ; BSR set to: 0
   945                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
   946  001B84  0E00               	movlw	0
   947  001B86  6F61               	movwf	(_nout+1)& (0+255),b
   948  001B88  0E00               	movlw	0
   949  001B8A  6F60               	movwf	_nout& (0+255),b
   950                           
   951                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
   952  001B8C  D00D               	goto	l2056
   953  001B8E                     l2054:
   954                           
   955                           ; BSR set to: 0
   956                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
   957  001B8E  C051  F03E         	movff	vfprintf@fp,vfpfcnvrt@fp
   958  001B92  0E54               	movlw	low vfprintf@cfmt
   959  001B94  6E3F               	movwf	vfpfcnvrt@fmt^0,c
   960  001B96  C053  F040         	movff	vfprintf@ap,vfpfcnvrt@ap
   961  001B9A  EC14  F008         	call	_vfpfcnvrt	;wreg free
   962  001B9E  503E               	movf	?_vfpfcnvrt^0,w,c
   963  001BA0  0100               	movlb	0	; () banked
   964  001BA2  2760               	addwf	_nout& (0+255),f,b
   965  001BA4  503F               	movf	(?_vfpfcnvrt+1)^0,w,c
   966  001BA6  2361               	addwfc	(_nout+1)& (0+255),f,b
   967  001BA8                     l2056:
   968                           
   969                           ; BSR set to: 0
   970                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
   971  001BA8  C054  FFF6         	movff	vfprintf@cfmt,tblptrl
   972  001BAC                     	if	1	;There is more than 1 active tblptr byte
   973  001BAC  0E10               	movlw	high __smallconst
   974  001BAE  6EF7               	movwf	tblptrh,c
   975  001BB0                     	endif
   976  001BB0                     	if	0	;tblptru may be non-zero
   977  001BB0                     	endif
   978  001BB0                     	if	0	;tblptru may be non-zero
   979  001BB0                     	endif
   980  001BB0  0008               	tblrd		*
   981  001BB2  50F5               	movf	tablat,w,c
   982  001BB4  0900               	iorlw	0
   983  001BB6  A4D8               	btfss	status,2,c
   984  001BB8  D7EA               	goto	l2054
   985                           
   986                           ; BSR set to: 0
   987                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
   988  001BBA  C060  F051         	movff	_nout,?_vfprintf
   989  001BBE  C061  F052         	movff	_nout+1,?_vfprintf+1
   990                           
   991                           ; BSR set to: 0
   992  001BC2  0012               	return		;funcret
   993  001BC4                     __end_of_vfprintf:
   994                           	opt callstack 0
   995                           
   996 ;; *************** function _vfpfcnvrt *****************
   997 ;; Defined at:
   998 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
   999 ;; Parameters:    Size  Location     Type
  1000 ;;  fp              1   61[COMRAM] PTR struct _IO_FILE
  1001 ;;		 -> sprintf@f(5), 
  1002 ;;  fmt             1   62[COMRAM] PTR PTR unsigned char 
  1003 ;;		 -> vfprintf@cfmt(1), 
  1004 ;;  ap              1   63[COMRAM] PTR PTR void 
  1005 ;;		 -> sprintf@ap(1), 
  1006 ;; Auto vars:     Size  Location     Type
  1007 ;;  ll              8   68[COMRAM] long long 
  1008 ;;  llu             8    0        unsigned long long 
  1009 ;;  f               4    0        unsigned long long 
  1010 ;;  vp              3    0        PTR void 
  1011 ;;  ct              3    0        unsigned char [3]
  1012 ;;  cp              3    0        PTR unsigned char 
  1013 ;;  done            2   76[COMRAM] int 
  1014 ;;  i               2    0        int 
  1015 ;;  c               1    0        unsigned char 
  1016 ;; Return value:  Size  Location     Type
  1017 ;;                  2   61[COMRAM] int 
  1018 ;; Registers used:
  1019 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1020 ;; Tracked objects:
  1021 ;;		On entry : 3F/0
  1022 ;;		On exit  : 0/0
  1023 ;;		Unchanged: 0/0
  1024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1025 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1026 ;;      Locals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1027 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1028 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1029 ;;Total ram usage:       19 bytes
  1030 ;; Hardware stack levels used:    1
  1031 ;; Hardware stack levels required when called:    6
  1032 ;; This function calls:
  1033 ;;		_atoi
  1034 ;;		_dtoa
  1035 ;;		_fputc
  1036 ;;		_isdigit
  1037 ;; This function is called by:
  1038 ;;		_vfprintf
  1039 ;; This function uses a non-reentrant model
  1040 ;;
  1041                           
  1042                           	psect	text3
  1043  001028                     __ptext3:
  1044                           	opt callstack 0
  1045  001028                     _vfpfcnvrt:
  1046                           	opt callstack 22
  1047                           
  1048                           ; BSR set to: 0
  1049                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.10\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.10\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 674:     long long ll;
  1050                           
  1051                           ; BSR set to: 0
  1052                           ;incstack = 0
  1053  001028  503F               	movf	vfpfcnvrt@fmt^0,w,c
  1054  00102A  6ED9               	movwf	fsr2l,c
  1055  00102C  6ADA               	clrf	fsr2h,c
  1056  00102E  CFDF FFF6          	movff	indf2,tblptrl
  1057  001032                     	if	1	;There is more than 1 active tblptr byte
  1058  001032  0E10               	movlw	high __smallconst
  1059  001034  6EF7               	movwf	tblptrh,c
  1060  001036                     	endif
  1061  001036                     	if	0	;tblptru may be non-zero
  1062  001036                     	endif
  1063  001036                     	if	0	;tblptru may be non-zero
  1064  001036                     	endif
  1065  001036  0008               	tblrd		*
  1066  001038  50F5               	movf	tablat,w,c
  1067  00103A  0A25               	xorlw	37
  1068  00103C  A4D8               	btfss	status,2,c
  1069  00103E  D111               	goto	l2034
  1070                           
  1071                           ; BSR set to: 0
  1072                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
  1073  001040  503F               	movf	vfpfcnvrt@fmt^0,w,c
  1074  001042  6ED9               	movwf	fsr2l,c
  1075  001044  6ADA               	clrf	fsr2h,c
  1076  001046  2ADF               	incf	indf2,f,c
  1077                           
  1078                           ; BSR set to: 0
  1079                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
  1080  001048  0E00               	movlw	0
  1081  00104A  6F63               	movwf	(_width+1)& (0+255),b
  1082  00104C  0E00               	movlw	0
  1083  00104E  6F62               	movwf	_width& (0+255),b
  1084  001050  C062  F066         	movff	_width,_flags
  1085  001054  C063  F067         	movff	_width+1,_flags+1
  1086                           
  1087                           ; BSR set to: 0
  1088                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
  1089  001058  6964               	setf	_prec& (0+255),b
  1090  00105A  6965               	setf	(_prec+1)& (0+255),b
  1091                           
  1092                           ; BSR set to: 0
  1093                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 688:       
      +                            done = 0;
  1094  00105C  0E00               	movlw	0
  1095  00105E  6E4E               	movwf	(vfpfcnvrt@done+1)^0,c
  1096  001060  0E00               	movlw	0
  1097  001062  D011               	goto	L2
  1098  001064                     l1956:
  1099                           
  1100                           ; BSR set to: 0
  1101                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 692:       
      +                                        flags |= (1 << 0);
  1102  001064  8166               	bsf	_flags& (0+255),0,b
  1103  001066                     l1958:
  1104                           
  1105                           ; BSR set to: 0
  1106                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 693:       
      +                                        ++*fmt;
  1107  001066  503F               	movf	vfpfcnvrt@fmt^0,w,c
  1108  001068  6ED9               	movwf	fsr2l,c
  1109  00106A  6ADA               	clrf	fsr2h,c
  1110  00106C  2ADF               	incf	indf2,f,c
  1111                           
  1112                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 694:       
      +                                        break;
  1113  00106E  D02D               	goto	l1982
  1114  001070                     l1960:
  1115                           
  1116                           ; BSR set to: 0
  1117                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 696:       
      +                                        flags |= (1 << 1);
  1118  001070  8366               	bsf	_flags& (0+255),1,b
  1119  001072  D7F9               	goto	l1958
  1120  001074                     l1964:
  1121                           
  1122                           ; BSR set to: 0
  1123                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 700:       
      +                                        flags |= (1 << 2);
  1124  001074  8566               	bsf	_flags& (0+255),2,b
  1125  001076  D7F7               	goto	l1958
  1126  001078                     l1968:
  1127                           
  1128                           ; BSR set to: 0
  1129                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 704:       
      +                                        flags |= (1 << 3);
  1130  001078  8766               	bsf	_flags& (0+255),3,b
  1131  00107A  D7F5               	goto	l1958
  1132  00107C                     l1972:
  1133                           
  1134                           ; BSR set to: 0
  1135                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 708:       
      +                                        flags |= (1 << 4);
  1136  00107C  8966               	bsf	_flags& (0+255),4,b
  1137  00107E  D7F3               	goto	l1958
  1138  001080                     l1976:
  1139                           
  1140                           ; BSR set to: 0
  1141                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 712:       
      +                                        done = 1;
  1142  001080  0E00               	movlw	0
  1143  001082  6E4E               	movwf	(vfpfcnvrt@done+1)^0,c
  1144  001084  0E01               	movlw	1
  1145  001086                     L2:
  1146  001086  6E4D               	movwf	vfpfcnvrt@done^0,c
  1147                           
  1148                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 713:       
      +                                        break;
  1149  001088  D020               	goto	l1982
  1150  00108A                     l1980:
  1151                           
  1152                           ; BSR set to: 0
  1153  00108A  503F               	movf	vfpfcnvrt@fmt^0,w,c
  1154  00108C  6ED9               	movwf	fsr2l,c
  1155  00108E  6ADA               	clrf	fsr2h,c
  1156  001090  CFDF FFF6          	movff	indf2,tblptrl
  1157  001094                     	if	1	;There is more than 1 active tblptr byte
  1158  001094  0E10               	movlw	high __smallconst
  1159  001096  6EF7               	movwf	tblptrh,c
  1160  001098                     	endif
  1161  001098                     	if	0	;tblptru may be non-zero
  1162  001098                     	endif
  1163  001098                     	if	0	;tblptru may be non-zero
  1164  001098                     	endif
  1165  001098  0008               	tblrd		*
  1166  00109A  50F5               	movf	tablat,w,c
  1167  00109C  6E41               	movwf	??_vfpfcnvrt^0,c
  1168  00109E  6A42               	clrf	(??_vfpfcnvrt+1)^0,c
  1169                           
  1170                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1171                           ; Switch size 1, requested type "simple"
  1172                           ; Number of cases is 1, Range of values is 0 to 0
  1173                           ; switch strategies available:
  1174                           ; Name         Instructions Cycles
  1175                           ; simple_byte            4     3 (average)
  1176                           ;	Chosen strategy is simple_byte
  1177  0010A0  5042               	movf	(??_vfpfcnvrt+1)^0,w,c
  1178  0010A2  0A00               	xorlw	0	; case 0
  1179  0010A4  A4D8               	btfss	status,2,c
  1180  0010A6  D7EC               	goto	l1976
  1181                           
  1182                           ; BSR set to: 0
  1183                           ; Switch size 1, requested type "simple"
  1184                           ; Number of cases is 5, Range of values is 32 to 48
  1185                           ; switch strategies available:
  1186                           ; Name         Instructions Cycles
  1187                           ; simple_byte           16     9 (average)
  1188                           ;	Chosen strategy is simple_byte
  1189  0010A8  5041               	movf	??_vfpfcnvrt^0,w,c
  1190  0010AA  0A20               	xorlw	32	; case 32
  1191  0010AC  B4D8               	btfsc	status,2,c
  1192  0010AE  D7E4               	goto	l1968
  1193  0010B0  0A03               	xorlw	3	; case 35
  1194  0010B2  B4D8               	btfsc	status,2,c
  1195  0010B4  D7E3               	goto	l1972
  1196  0010B6  0A08               	xorlw	8	; case 43
  1197  0010B8  B4D8               	btfsc	status,2,c
  1198  0010BA  D7DC               	goto	l1964
  1199  0010BC  0A06               	xorlw	6	; case 45
  1200  0010BE  B4D8               	btfsc	status,2,c
  1201  0010C0  D7D1               	goto	l1956
  1202  0010C2  0A1D               	xorlw	29	; case 48
  1203  0010C4  B4D8               	btfsc	status,2,c
  1204  0010C6  D7D4               	goto	l1960
  1205  0010C8  D7DB               	goto	l1976
  1206  0010CA                     l1982:
  1207                           
  1208                           ; BSR set to: 0
  1209                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 689:       
      +                            while (!done) {
  1210  0010CA  504D               	movf	vfpfcnvrt@done^0,w,c
  1211  0010CC  104E               	iorwf	(vfpfcnvrt@done+1)^0,w,c
  1212  0010CE  B4D8               	btfsc	status,2,c
  1213  0010D0  D7DC               	goto	l1980
  1214                           
  1215                           ; BSR set to: 0
  1216                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 716:       
      +                            if (flags & (1 << 0)) {
  1217  0010D2  B166               	btfsc	_flags& (0+255),0,b
  1218                           
  1219                           ; BSR set to: 0
  1220                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 717:       
      +                                flags &= ~(1 << 1);
  1221  0010D4  9366               	bcf	_flags& (0+255),1,b
  1222                           
  1223                           ; BSR set to: 0
  1224                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 723:       
      +                            if ((*fmt)[0] == '*') {
  1225  0010D6  503F               	movf	vfpfcnvrt@fmt^0,w,c
  1226  0010D8  6ED9               	movwf	fsr2l,c
  1227  0010DA  6ADA               	clrf	fsr2h,c
  1228  0010DC  CFDF FFF6          	movff	indf2,tblptrl
  1229  0010E0                     	if	1	;There is more than 1 active tblptr byte
  1230  0010E0  0E10               	movlw	high __smallconst
  1231  0010E2  6EF7               	movwf	tblptrh,c
  1232  0010E4                     	endif
  1233  0010E4                     	if	0	;tblptru may be non-zero
  1234  0010E4                     	endif
  1235  0010E4                     	if	0	;tblptru may be non-zero
  1236  0010E4                     	endif
  1237  0010E4  0008               	tblrd		*
  1238  0010E6  50F5               	movf	tablat,w,c
  1239  0010E8  0A2A               	xorlw	42
  1240  0010EA  A4D8               	btfss	status,2,c
  1241  0010EC  D018               	goto	l1996
  1242                           
  1243                           ; BSR set to: 0
  1244                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 724:       
      +                                ++*fmt;
  1245  0010EE  503F               	movf	vfpfcnvrt@fmt^0,w,c
  1246  0010F0  6ED9               	movwf	fsr2l,c
  1247  0010F2  6ADA               	clrf	fsr2h,c
  1248  0010F4  2ADF               	incf	indf2,f,c
  1249                           
  1250                           ; BSR set to: 0
  1251                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 725:       
      +                                width = (*(int *)__va_arg(*(int **)ap, (int)0));
  1252  0010F6  5040               	movf	vfpfcnvrt@ap^0,w,c
  1253  0010F8  6ED9               	movwf	fsr2l,c
  1254  0010FA  6ADA               	clrf	fsr2h,c
  1255  0010FC  0E02               	movlw	2
  1256  0010FE  26DF               	addwf	indf2,f,c
  1257  001100  5CDF               	subwf	indf2,w,c
  1258  001102  6ED9               	movwf	fsr2l,c
  1259  001104  6ADA               	clrf	fsr2h,c
  1260  001106  CFDE F062          	movff	postinc2,_width
  1261  00110A  CFDE F063          	movff	postinc2,_width+1
  1262                           
  1263                           ; BSR set to: 0
  1264                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 726:       
      +                                if (width < 0) {
  1265  00110E  AF63               	btfss	(_width+1)& (0+255),7,b
  1266  001110  D038               	goto	u1540
  1267                           
  1268                           ; BSR set to: 0
  1269                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 727:       
      +                                    flags |= (1 << 0);
  1270  001112  8166               	bsf	_flags& (0+255),0,b
  1271                           
  1272                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 728:       
      +                                    width = -width;
  1273  001114  6D62               	negf	_width& (0+255),b
  1274  001116  1F63               	comf	(_width+1)& (0+255),f,b
  1275  001118  B0D8               	btfsc	status,0,c
  1276  00111A  2B63               	incf	(_width+1)& (0+255),f,b
  1277  00111C  D032               	goto	u1540
  1278  00111E                     l1996:
  1279                           
  1280                           ; BSR set to: 0
  1281                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 731:       
      +                                width = atoi(*fmt);
  1282  00111E  503F               	movf	vfpfcnvrt@fmt^0,w,c
  1283  001120  6ED9               	movwf	fsr2l,c
  1284  001122  6ADA               	clrf	fsr2h,c
  1285  001124  50DF               	movf	indf2,w,c
  1286  001126  6E08               	movwf	atoi@s^0,c
  1287  001128  EC03  F00B         	call	_atoi	;wreg free
  1288  00112C  C008  F062         	movff	?_atoi,_width
  1289  001130  C009  F063         	movff	?_atoi+1,_width+1
  1290                           
  1291                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 732:       
      +                                while ((0 ? isdigit((*fmt)[0]) : ((unsigned)((*fmt)[0])-'0') < 10)) {
  1292  001134  D004               	goto	l2000
  1293  001136                     l1998:
  1294                           
  1295                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 733:       
      +                                    ++*fmt;
  1296  001136  503F               	movf	vfpfcnvrt@fmt^0,w,c
  1297  001138  6ED9               	movwf	fsr2l,c
  1298  00113A  6ADA               	clrf	fsr2h,c
  1299  00113C  2ADF               	incf	indf2,f,c
  1300  00113E                     l2000:
  1301  00113E  0ED0               	movlw	208
  1302  001140  6E41               	movwf	??_vfpfcnvrt^0,c
  1303  001142  0EFF               	movlw	255
  1304  001144  6E42               	movwf	(??_vfpfcnvrt+1)^0,c
  1305  001146  503F               	movf	vfpfcnvrt@fmt^0,w,c
  1306  001148  6ED9               	movwf	fsr2l,c
  1307  00114A  6ADA               	clrf	fsr2h,c
  1308  00114C  CFDF FFF6          	movff	indf2,tblptrl
  1309  001150                     	if	1	;There is more than 1 active tblptr byte
  1310  001150  0E10               	movlw	high __smallconst
  1311  001152  6EF7               	movwf	tblptrh,c
  1312  001154                     	endif
  1313  001154                     	if	0	;tblptru may be non-zero
  1314  001154                     	endif
  1315  001154                     	if	0	;tblptru may be non-zero
  1316  001154                     	endif
  1317  001154  0008               	tblrd		*
  1318  001156  50F5               	movf	tablat,w,c
  1319  001158  6E43               	movwf	(??_vfpfcnvrt+2)^0,c
  1320  00115A  6A44               	clrf	(??_vfpfcnvrt+3)^0,c
  1321  00115C  5041               	movf	??_vfpfcnvrt^0,w,c
  1322  00115E  2643               	addwf	(??_vfpfcnvrt+2)^0,f,c
  1323  001160  5042               	movf	(??_vfpfcnvrt+1)^0,w,c
  1324  001162  2244               	addwfc	(??_vfpfcnvrt+3)^0,f,c
  1325  001164  5044               	movf	(??_vfpfcnvrt+3)^0,w,c
  1326  001166  E106               	bnz	u1520
  1327  001168  0E0A               	movlw	10
  1328  00116A  5C43               	subwf	(??_vfpfcnvrt+2)^0,w,c
  1329  00116C  B0D8               	btfsc	status,0,c
  1330  00116E  D002               	goto	u1520
  1331  001170  0E01               	movlw	1
  1332  001172  D001               	goto	u1530
  1333  001174                     u1520:
  1334  001174  0E00               	movlw	0
  1335  001176                     u1530:
  1336  001176  6E4F               	movwf	_vfpfcnvrt$1276^0,c
  1337  001178  6A50               	clrf	(_vfpfcnvrt$1276+1)^0,c
  1338  00117A  504F               	movf	_vfpfcnvrt$1276^0,w,c
  1339  00117C  1050               	iorwf	(_vfpfcnvrt$1276+1)^0,w,c
  1340  00117E  A4D8               	btfss	status,2,c
  1341  001180  D7DA               	goto	l1998
  1342  001182                     u1540:
  1343                           
  1344                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 825:       
      +                            if ((*fmt[0] == 'd') || (*fmt[0] == 'i')) {
  1345  001182  503F               	movf	vfpfcnvrt@fmt^0,w,c
  1346  001184  6ED9               	movwf	fsr2l,c
  1347  001186  6ADA               	clrf	fsr2h,c
  1348  001188  CFDF FFF6          	movff	indf2,tblptrl
  1349  00118C                     	if	1	;There is more than 1 active tblptr byte
  1350  00118C  0E10               	movlw	high __smallconst
  1351  00118E  6EF7               	movwf	tblptrh,c
  1352  001190                     	endif
  1353  001190                     	if	0	;tblptru may be non-zero
  1354  001190                     	endif
  1355  001190                     	if	0	;tblptru may be non-zero
  1356  001190                     	endif
  1357  001190  0008               	tblrd		*
  1358  001192  50F5               	movf	tablat,w,c
  1359  001194  0A64               	xorlw	100
  1360  001196  B4D8               	btfsc	status,2,c
  1361  001198  D00C               	goto	u1560
  1362  00119A  503F               	movf	vfpfcnvrt@fmt^0,w,c
  1363  00119C  6ED9               	movwf	fsr2l,c
  1364  00119E  6ADA               	clrf	fsr2h,c
  1365  0011A0  CFDF FFF6          	movff	indf2,tblptrl
  1366  0011A4                     	if	1	;There is more than 1 active tblptr byte
  1367  0011A4  0E10               	movlw	high __smallconst
  1368  0011A6  6EF7               	movwf	tblptrh,c
  1369  0011A8                     	endif
  1370  0011A8                     	if	0	;tblptru may be non-zero
  1371  0011A8                     	endif
  1372  0011A8                     	if	0	;tblptru may be non-zero
  1373  0011A8                     	endif
  1374  0011A8  0008               	tblrd		*
  1375  0011AA  50F5               	movf	tablat,w,c
  1376  0011AC  0A69               	xorlw	105
  1377  0011AE  A4D8               	btfss	status,2,c
  1378  0011B0  D032               	goto	l2018
  1379  0011B2                     u1560:
  1380                           
  1381                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 827:       
      +                                ++*fmt;
  1382  0011B2  503F               	movf	vfpfcnvrt@fmt^0,w,c
  1383  0011B4  6ED9               	movwf	fsr2l,c
  1384  0011B6  6ADA               	clrf	fsr2h,c
  1385  0011B8  2ADF               	incf	indf2,f,c
  1386                           
  1387                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 828:       
      +                                ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  1388  0011BA  5040               	movf	vfpfcnvrt@ap^0,w,c
  1389  0011BC  6ED9               	movwf	fsr2l,c
  1390  0011BE  6ADA               	clrf	fsr2h,c
  1391  0011C0  50DF               	movf	indf2,w,c
  1392  0011C2  2ADF               	incf	indf2,f,c
  1393  0011C4  2ADF               	incf	indf2,f,c
  1394  0011C6  6ED9               	movwf	fsr2l,c
  1395  0011C8  6ADA               	clrf	fsr2h,c
  1396  0011CA  CFDE F045          	movff	postinc2,vfpfcnvrt@ll
  1397  0011CE  CFDD F046          	movff	postdec2,vfpfcnvrt@ll+1
  1398  0011D2  0E00               	movlw	0
  1399  0011D4  BE46               	btfsc	(vfpfcnvrt@ll+1)^0,7,c
  1400  0011D6  0EFF               	movlw	-1
  1401  0011D8  6E47               	movwf	(vfpfcnvrt@ll+2)^0,c
  1402  0011DA  6E48               	movwf	(vfpfcnvrt@ll+3)^0,c
  1403  0011DC  6E49               	movwf	(vfpfcnvrt@ll+4)^0,c
  1404  0011DE  6E4A               	movwf	(vfpfcnvrt@ll+5)^0,c
  1405  0011E0  6E4B               	movwf	(vfpfcnvrt@ll+6)^0,c
  1406  0011E2  6E4C               	movwf	(vfpfcnvrt@ll+7)^0,c
  1407                           
  1408                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 830:       
      +                                return dtoa(fp, ll);
  1409  0011E4  C03E  F01B         	movff	vfpfcnvrt@fp,dtoa@fp
  1410  0011E8  C045  F01C         	movff	vfpfcnvrt@ll,dtoa@d
  1411  0011EC  C046  F01D         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  1412  0011F0  C047  F01E         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  1413  0011F4  C048  F01F         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  1414  0011F8  C049  F020         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  1415  0011FC  C04A  F021         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  1416  001200  C04B  F022         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  1417  001204  C04C  F023         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  1418  001208  EC45  F009         	call	_dtoa	;wreg free
  1419  00120C  C01B  F03E         	movff	?_dtoa,?_vfpfcnvrt
  1420  001210  C01C  F03F         	movff	?_dtoa+1,?_vfpfcnvrt+1
  1421  001214  0012               	return	
  1422  001216                     l2018:
  1423                           
  1424                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
  1425  001216  503F               	movf	vfpfcnvrt@fmt^0,w,c
  1426  001218  6ED9               	movwf	fsr2l,c
  1427  00121A  6ADA               	clrf	fsr2h,c
  1428  00121C  CFDF FFF6          	movff	indf2,tblptrl
  1429  001220                     	if	1	;There is more than 1 active tblptr byte
  1430  001220  0E10               	movlw	high __smallconst
  1431  001222  6EF7               	movwf	tblptrh,c
  1432  001224                     	endif
  1433  001224                     	if	0	;tblptru may be non-zero
  1434  001224                     	endif
  1435  001224                     	if	0	;tblptru may be non-zero
  1436  001224                     	endif
  1437  001224  0008               	tblrd		*
  1438  001226  50F5               	movf	tablat,w,c
  1439  001228  0A25               	xorlw	37
  1440  00122A  A4D8               	btfss	status,2,c
  1441  00122C  D011               	goto	l2028
  1442                           
  1443                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
  1444  00122E  503F               	movf	vfpfcnvrt@fmt^0,w,c
  1445  001230  6ED9               	movwf	fsr2l,c
  1446  001232  6ADA               	clrf	fsr2h,c
  1447  001234  2ADF               	incf	indf2,f,c
  1448                           
  1449                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
  1450  001236  0E00               	movlw	0
  1451  001238  6E02               	movwf	(fputc@c+1)^0,c
  1452  00123A  0E25               	movlw	37
  1453  00123C  6E01               	movwf	fputc@c^0,c
  1454  00123E  C03E  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1455  001242  EC41  F00D         	call	_fputc	;wreg free
  1456  001246                     l2024:
  1457                           
  1458                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
  1459  001246  0E00               	movlw	0
  1460  001248  6E3F               	movwf	(?_vfpfcnvrt+1)^0,c
  1461  00124A  0E01               	movlw	1
  1462  00124C  6E3E               	movwf	?_vfpfcnvrt^0,c
  1463  00124E  0012               	return	
  1464  001250                     l2028:
  1465                           
  1466                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
  1467  001250  503F               	movf	vfpfcnvrt@fmt^0,w,c
  1468  001252  6ED9               	movwf	fsr2l,c
  1469  001254  6ADA               	clrf	fsr2h,c
  1470  001256  2ADF               	incf	indf2,f,c
  1471                           
  1472                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
  1473  001258  0E00               	movlw	0
  1474  00125A  6E3F               	movwf	(?_vfpfcnvrt+1)^0,c
  1475  00125C  0E00               	movlw	0
  1476  00125E  6E3E               	movwf	?_vfpfcnvrt^0,c
  1477  001260  0012               	return	
  1478  001262                     l2034:
  1479                           
  1480                           ; BSR set to: 0
  1481                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
  1482  001262  503F               	movf	vfpfcnvrt@fmt^0,w,c
  1483  001264  6ED9               	movwf	fsr2l,c
  1484  001266  6ADA               	clrf	fsr2h,c
  1485  001268  CFDF FFF6          	movff	indf2,tblptrl
  1486  00126C                     	if	1	;There is more than 1 active tblptr byte
  1487  00126C  0E10               	movlw	high __smallconst
  1488  00126E  6EF7               	movwf	tblptrh,c
  1489  001270                     	endif
  1490  001270                     	if	0	;tblptru may be non-zero
  1491  001270                     	endif
  1492  001270                     	if	0	;tblptru may be non-zero
  1493  001270                     	endif
  1494  001270  0008               	tblrd		*
  1495  001272  50F5               	movf	tablat,w,c
  1496  001274  6E01               	movwf	fputc@c^0,c
  1497  001276  6A02               	clrf	(fputc@c+1)^0,c
  1498  001278  C03E  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1499  00127C  EC41  F00D         	call	_fputc	;wreg free
  1500                           
  1501                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
  1502  001280  503F               	movf	vfpfcnvrt@fmt^0,w,c
  1503  001282  6ED9               	movwf	fsr2l,c
  1504  001284  6ADA               	clrf	fsr2h,c
  1505  001286  2ADF               	incf	indf2,f,c
  1506  001288  D7DE               	goto	l2024
  1507  00128A                     __end_of_vfpfcnvrt:
  1508                           	opt callstack 0
  1509                           
  1510 ;; *************** function _dtoa *****************
  1511 ;; Defined at:
  1512 ;;		line 274 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
  1513 ;; Parameters:    Size  Location     Type
  1514 ;;  fp              1   26[COMRAM] PTR struct _IO_FILE
  1515 ;;		 -> sprintf@f(5), 
  1516 ;;  d               8   27[COMRAM] long long 
  1517 ;; Auto vars:     Size  Location     Type
  1518 ;;  n               8   51[COMRAM] long long 
  1519 ;;  i               2   59[COMRAM] int 
  1520 ;;  s               2   49[COMRAM] int 
  1521 ;;  w               2   47[COMRAM] int 
  1522 ;;  p               2   45[COMRAM] int 
  1523 ;; Return value:  Size  Location     Type
  1524 ;;                  2   26[COMRAM] int 
  1525 ;; Registers used:
  1526 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1527 ;; Tracked objects:
  1528 ;;		On entry : 0/0
  1529 ;;		On exit  : 0/0
  1530 ;;		Unchanged: 0/0
  1531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1532 ;;      Params:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1533 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1534 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1535 ;;      Totals:        35       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1536 ;;Total ram usage:       35 bytes
  1537 ;; Hardware stack levels used:    1
  1538 ;; Hardware stack levels required when called:    5
  1539 ;; This function calls:
  1540 ;;		___aodiv
  1541 ;;		___aomod
  1542 ;;		_abs
  1543 ;;		_pad
  1544 ;; This function is called by:
  1545 ;;		_vfpfcnvrt
  1546 ;; This function uses a non-reentrant model
  1547 ;;
  1548                           
  1549                           	psect	text4
  1550  00128A                     __ptext4:
  1551                           	opt callstack 0
  1552  00128A                     _dtoa:
  1553                           	opt callstack 22
  1554                           
  1555                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 274: static
      +                           int dtoa(FILE *fp, long long d);C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\
      +                          c99\common\doprnt.c: 275: {;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\c
      +                          ommon\doprnt.c: 276:     int i, p, s, w;;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\
      +                          sources\c99\common\doprnt.c: 277:     long long n;;C:\Program Files (x86)\Microchip\xc8\
      +                          v2.10\pic\sources\c99\common\doprnt.c: 280:     n = d;
  1556                           
  1557                           ;incstack = 0
  1558  00128A  C01C  F034         	movff	dtoa@d,dtoa@n
  1559  00128E  C01D  F035         	movff	dtoa@d+1,dtoa@n+1
  1560  001292  C01E  F036         	movff	dtoa@d+2,dtoa@n+2
  1561  001296  C01F  F037         	movff	dtoa@d+3,dtoa@n+3
  1562  00129A  C020  F038         	movff	dtoa@d+4,dtoa@n+4
  1563  00129E  C021  F039         	movff	dtoa@d+5,dtoa@n+5
  1564  0012A2  C022  F03A         	movff	dtoa@d+6,dtoa@n+6
  1565  0012A6  C023  F03B         	movff	dtoa@d+7,dtoa@n+7
  1566                           
  1567                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 281:     s 
      +                          = n < 0 ? 1 : 0;
  1568  0012AA  AE3B               	btfss	(dtoa@n+7)^0,7,c
  1569  0012AC  D002               	goto	u1250
  1570  0012AE  0E01               	movlw	1
  1571  0012B0  D001               	goto	u1260
  1572  0012B2                     u1250:
  1573  0012B2  0E00               	movlw	0
  1574  0012B4                     u1260:
  1575  0012B4  6E32               	movwf	dtoa@s^0,c
  1576  0012B6  6A33               	clrf	(dtoa@s+1)^0,c
  1577                           
  1578                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 282:     if
      +                           (s) {
  1579  0012B8  5032               	movf	dtoa@s^0,w,c
  1580  0012BA  1033               	iorwf	(dtoa@s+1)^0,w,c
  1581  0012BC  B4D8               	btfsc	status,2,c
  1582  0012BE  D010               	goto	l1848
  1583                           
  1584                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 283:       
      +                            n = -n;
  1585  0012C0  1E3B               	comf	(dtoa@n+7)^0,f,c
  1586  0012C2  1E3A               	comf	(dtoa@n+6)^0,f,c
  1587  0012C4  1E39               	comf	(dtoa@n+5)^0,f,c
  1588  0012C6  1E38               	comf	(dtoa@n+4)^0,f,c
  1589  0012C8  1E37               	comf	(dtoa@n+3)^0,f,c
  1590  0012CA  1E36               	comf	(dtoa@n+2)^0,f,c
  1591  0012CC  1E35               	comf	(dtoa@n+1)^0,f,c
  1592  0012CE  6C34               	negf	dtoa@n^0,c
  1593  0012D0  0E00               	movlw	0
  1594  0012D2  2235               	addwfc	(dtoa@n+1)^0,f,c
  1595  0012D4  2236               	addwfc	(dtoa@n+2)^0,f,c
  1596  0012D6  2237               	addwfc	(dtoa@n+3)^0,f,c
  1597  0012D8  2238               	addwfc	(dtoa@n+4)^0,f,c
  1598  0012DA  2239               	addwfc	(dtoa@n+5)^0,f,c
  1599  0012DC  223A               	addwfc	(dtoa@n+6)^0,f,c
  1600  0012DE  223B               	addwfc	(dtoa@n+7)^0,f,c
  1601  0012E0                     l1848:
  1602                           
  1603                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 287:     if
      +                           (!(prec < 0)) {
  1604  0012E0  0100               	movlb	0	; () banked
  1605  0012E2  AF65               	btfss	(_prec+1)& (0+255),7,b
  1606                           
  1607                           ; BSR set to: 0
  1608                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 288:       
      +                            flags &= ~(1 << 1);
  1609  0012E4  9366               	bcf	_flags& (0+255),1,b
  1610                           
  1611                           ; BSR set to: 0
  1612                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 290:     p 
      +                          = (0 < prec) ? prec : 1;
  1613  0012E6  BF65               	btfsc	(_prec+1)& (0+255),7,b
  1614  0012E8  D005               	goto	u1290
  1615  0012EA  5165               	movf	(_prec+1)& (0+255),w,b
  1616  0012EC  E108               	bnz	l222
  1617  0012EE  0564               	decf	_prec& (0+255),w,b
  1618  0012F0  B0D8               	btfsc	status,0,c
  1619  0012F2  D005               	goto	l222
  1620  0012F4                     u1290:
  1621                           
  1622                           ; BSR set to: 0
  1623  0012F4  0E00               	movlw	0
  1624  0012F6  6E2F               	movwf	(dtoa@p+1)^0,c
  1625  0012F8  0E01               	movlw	1
  1626  0012FA  6E2E               	movwf	dtoa@p^0,c
  1627  0012FC  D004               	goto	l224
  1628  0012FE                     l222:
  1629                           
  1630                           ; BSR set to: 0
  1631  0012FE  C064  F02E         	movff	_prec,dtoa@p
  1632  001302  C065  F02F         	movff	_prec+1,dtoa@p+1
  1633  001306                     l224:
  1634                           
  1635                           ; BSR set to: 0
  1636                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 291:     w 
      +                          = width;
  1637  001306  C062  F030         	movff	_width,dtoa@w
  1638  00130A  C063  F031         	movff	_width+1,dtoa@w+1
  1639                           
  1640                           ; BSR set to: 0
  1641                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 292:     if
      +                           (s || (flags & (1 << 2))) {
  1642  00130E  5032               	movf	dtoa@s^0,w,c
  1643  001310  1033               	iorwf	(dtoa@s+1)^0,w,c
  1644  001312  A4D8               	btfss	status,2,c
  1645  001314  D002               	goto	u1310
  1646                           
  1647                           ; BSR set to: 0
  1648  001316  A566               	btfss	_flags& (0+255),2,b
  1649  001318  D003               	goto	l1862
  1650  00131A                     u1310:
  1651                           
  1652                           ; BSR set to: 0
  1653                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 293:       
      +                            --w;
  1654  00131A  0630               	decf	dtoa@w^0,f,c
  1655  00131C  A0D8               	btfss	status,0,c
  1656  00131E  0631               	decf	(dtoa@w+1)^0,f,c
  1657  001320                     l1862:
  1658                           
  1659                           ; BSR set to: 0
  1660                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 297:     i 
      +                          = sizeof(dbuf) - 1;
  1661  001320  0E00               	movlw	0
  1662  001322  6E3D               	movwf	(dtoa@i+1)^0,c
  1663  001324  0E1F               	movlw	31
  1664  001326  6E3C               	movwf	dtoa@i^0,c
  1665                           
  1666                           ; BSR set to: 0
  1667                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 298:     db
      +                          uf[i] = '\0';
  1668  001328  0E00               	movlw	0
  1669  00132A  6F8B               	movwf	(_dbuf+31)& (0+255),b
  1670                           
  1671                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1672  00132C  D07A               	goto	l1876
  1673  00132E                     l1866:
  1674                           
  1675                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 300:       
      +                            --i;
  1676  00132E  063C               	decf	dtoa@i^0,f,c
  1677  001330  A0D8               	btfss	status,0,c
  1678  001332  063D               	decf	(dtoa@i+1)^0,f,c
  1679                           
  1680                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 301:       
      +                            dbuf[i] = '0' + abs(n % 10);
  1681  001334  503C               	movf	dtoa@i^0,w,c
  1682  001336  0F6C               	addlw	low _dbuf
  1683  001338  6ED9               	movwf	fsr2l,c
  1684  00133A  6ADA               	clrf	fsr2h,c
  1685  00133C  C034  F001         	movff	dtoa@n,___aomod@dividend
  1686  001340  C035  F002         	movff	dtoa@n+1,___aomod@dividend+1
  1687  001344  C036  F003         	movff	dtoa@n+2,___aomod@dividend+2
  1688  001348  C037  F004         	movff	dtoa@n+3,___aomod@dividend+3
  1689  00134C  C038  F005         	movff	dtoa@n+4,___aomod@dividend+4
  1690  001350  C039  F006         	movff	dtoa@n+5,___aomod@dividend+5
  1691  001354  C03A  F007         	movff	dtoa@n+6,___aomod@dividend+6
  1692  001358  C03B  F008         	movff	dtoa@n+7,___aomod@dividend+7
  1693  00135C  0E0A               	movlw	10
  1694  00135E  6E09               	movwf	___aomod@divisor^0,c
  1695  001360  0E00               	movlw	0
  1696  001362  6E0A               	movwf	(___aomod@divisor+1)^0,c
  1697  001364  0E00               	movlw	0
  1698  001366  6E0B               	movwf	(___aomod@divisor+2)^0,c
  1699  001368  0E00               	movlw	0
  1700  00136A  6E0C               	movwf	(___aomod@divisor+3)^0,c
  1701  00136C  0E00               	movlw	0
  1702  00136E  6E0D               	movwf	(___aomod@divisor+4)^0,c
  1703  001370  0E00               	movlw	0
  1704  001372  6E0E               	movwf	(___aomod@divisor+5)^0,c
  1705  001374  0E00               	movlw	0
  1706  001376  6E0F               	movwf	(___aomod@divisor+6)^0,c
  1707  001378  0E00               	movlw	0
  1708  00137A  6E10               	movwf	(___aomod@divisor+7)^0,c
  1709  00137C  ECA1  F00B         	call	___aomod	;wreg free
  1710  001380  C001  F024         	movff	?___aomod,??_dtoa
  1711  001384  C002  F025         	movff	?___aomod+1,??_dtoa+1
  1712  001388  C003  F026         	movff	?___aomod+2,??_dtoa+2
  1713  00138C  C004  F027         	movff	?___aomod+3,??_dtoa+3
  1714  001390  C005  F028         	movff	?___aomod+4,??_dtoa+4
  1715  001394  C006  F029         	movff	?___aomod+5,??_dtoa+5
  1716  001398  C007  F02A         	movff	?___aomod+6,??_dtoa+6
  1717  00139C  C008  F02B         	movff	?___aomod+7,??_dtoa+7
  1718  0013A0  C024  F013         	movff	??_dtoa,abs@a
  1719  0013A4  C026  F014         	movff	??_dtoa+2,abs@a+1
  1720  0013A8  EC3D  F00E         	call	_abs	;wreg free
  1721  0013AC  5013               	movf	?_abs^0,w,c
  1722  0013AE  0F30               	addlw	48
  1723  0013B0  6EDF               	movwf	indf2,c
  1724                           
  1725                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 302:       
      +                            --p;
  1726  0013B2  062E               	decf	dtoa@p^0,f,c
  1727  0013B4  A0D8               	btfss	status,0,c
  1728  0013B6  062F               	decf	(dtoa@p+1)^0,f,c
  1729                           
  1730                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 303:       
      +                            --w;
  1731  0013B8  0630               	decf	dtoa@w^0,f,c
  1732  0013BA  A0D8               	btfss	status,0,c
  1733  0013BC  0631               	decf	(dtoa@w+1)^0,f,c
  1734                           
  1735                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 304:       
      +                            n = n / 10;
  1736  0013BE  C034  F001         	movff	dtoa@n,___aodiv@dividend
  1737  0013C2  C035  F002         	movff	dtoa@n+1,___aodiv@dividend+1
  1738  0013C6  C036  F003         	movff	dtoa@n+2,___aodiv@dividend+2
  1739  0013CA  C037  F004         	movff	dtoa@n+3,___aodiv@dividend+3
  1740  0013CE  C038  F005         	movff	dtoa@n+4,___aodiv@dividend+4
  1741  0013D2  C039  F006         	movff	dtoa@n+5,___aodiv@dividend+5
  1742  0013D6  C03A  F007         	movff	dtoa@n+6,___aodiv@dividend+6
  1743  0013DA  C03B  F008         	movff	dtoa@n+7,___aodiv@dividend+7
  1744  0013DE  0E0A               	movlw	10
  1745  0013E0  6E09               	movwf	___aodiv@divisor^0,c
  1746  0013E2  0E00               	movlw	0
  1747  0013E4  6E0A               	movwf	(___aodiv@divisor+1)^0,c
  1748  0013E6  0E00               	movlw	0
  1749  0013E8  6E0B               	movwf	(___aodiv@divisor+2)^0,c
  1750  0013EA  0E00               	movlw	0
  1751  0013EC  6E0C               	movwf	(___aodiv@divisor+3)^0,c
  1752  0013EE  0E00               	movlw	0
  1753  0013F0  6E0D               	movwf	(___aodiv@divisor+4)^0,c
  1754  0013F2  0E00               	movlw	0
  1755  0013F4  6E0E               	movwf	(___aodiv@divisor+5)^0,c
  1756  0013F6  0E00               	movlw	0
  1757  0013F8  6E0F               	movwf	(___aodiv@divisor+6)^0,c
  1758  0013FA  0E00               	movlw	0
  1759  0013FC  6E10               	movwf	(___aodiv@divisor+7)^0,c
  1760  0013FE  EC5F  F00A         	call	___aodiv	;wreg free
  1761  001402  C001  F034         	movff	?___aodiv,dtoa@n
  1762  001406  C002  F035         	movff	?___aodiv+1,dtoa@n+1
  1763  00140A  C003  F036         	movff	?___aodiv+2,dtoa@n+2
  1764  00140E  C004  F037         	movff	?___aodiv+3,dtoa@n+3
  1765  001412  C005  F038         	movff	?___aodiv+4,dtoa@n+4
  1766  001416  C006  F039         	movff	?___aodiv+5,dtoa@n+5
  1767  00141A  C007  F03A         	movff	?___aodiv+6,dtoa@n+6
  1768  00141E  C008  F03B         	movff	?___aodiv+7,dtoa@n+7
  1769  001422                     l1876:
  1770                           
  1771                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1772  001422  BE3D               	btfsc	(dtoa@i+1)^0,7,c
  1773  001424  D020               	goto	u1360
  1774  001426  503D               	movf	(dtoa@i+1)^0,w,c
  1775  001428  E103               	bnz	u1320
  1776  00142A  043C               	decf	dtoa@i^0,w,c
  1777  00142C  A0D8               	btfss	status,0,c
  1778  00142E  D01B               	goto	u1360
  1779  001430                     u1320:
  1780  001430  5034               	movf	dtoa@n^0,w,c
  1781  001432  1035               	iorwf	(dtoa@n+1)^0,w,c
  1782  001434  1036               	iorwf	(dtoa@n+2)^0,w,c
  1783  001436  1037               	iorwf	(dtoa@n+3)^0,w,c
  1784  001438  1038               	iorwf	(dtoa@n+4)^0,w,c
  1785  00143A  1039               	iorwf	(dtoa@n+5)^0,w,c
  1786  00143C  103A               	iorwf	(dtoa@n+6)^0,w,c
  1787  00143E  103B               	iorwf	(dtoa@n+7)^0,w,c
  1788  001440  A4D8               	btfss	status,2,c
  1789  001442  D775               	goto	l1866
  1790  001444  BE2F               	btfsc	(dtoa@p+1)^0,7,c
  1791  001446  D005               	goto	u1340
  1792  001448  502F               	movf	(dtoa@p+1)^0,w,c
  1793  00144A  E102               	bnz	u1341
  1794  00144C  042E               	decf	dtoa@p^0,w,c
  1795  00144E  B0D8               	btfsc	status,0,c
  1796  001450                     u1341:
  1797  001450  D76E               	goto	l1866
  1798  001452                     u1340:
  1799  001452  BE31               	btfsc	(dtoa@w+1)^0,7,c
  1800  001454  D008               	goto	u1360
  1801  001456  5031               	movf	(dtoa@w+1)^0,w,c
  1802  001458  E103               	bnz	u1350
  1803  00145A  0430               	decf	dtoa@w^0,w,c
  1804  00145C  A0D8               	btfss	status,0,c
  1805  00145E  D003               	goto	u1360
  1806  001460                     u1350:
  1807  001460  0100               	movlb	0	; () banked
  1808  001462  B366               	btfsc	_flags& (0+255),1,b
  1809  001464  D764               	goto	l1866
  1810  001466                     u1360:
  1811                           
  1812                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 308:     if
      +                           (s || (flags & (1 << 2))) {
  1813  001466  5032               	movf	dtoa@s^0,w,c
  1814  001468  1033               	iorwf	(dtoa@s+1)^0,w,c
  1815  00146A  A4D8               	btfss	status,2,c
  1816  00146C  D003               	goto	u1380
  1817  00146E  0100               	movlb	0	; () banked
  1818  001470  A566               	btfss	_flags& (0+255),2,b
  1819  001472  D015               	goto	l1900
  1820  001474                     u1380:
  1821                           
  1822                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 309:       
      +                            --i;
  1823  001474  063C               	decf	dtoa@i^0,f,c
  1824  001476  A0D8               	btfss	status,0,c
  1825  001478  063D               	decf	(dtoa@i+1)^0,f,c
  1826                           
  1827                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 310:       
      +                            dbuf[i] = s ? '-' : '+';
  1828  00147A  5032               	movf	dtoa@s^0,w,c
  1829  00147C  1033               	iorwf	(dtoa@s+1)^0,w,c
  1830  00147E  A4D8               	btfss	status,2,c
  1831  001480  D004               	goto	l1896
  1832  001482  0E00               	movlw	0
  1833  001484  6E2D               	movwf	(_dtoa$1261+1)^0,c
  1834  001486  0E2B               	movlw	43
  1835  001488  D003               	goto	L3
  1836  00148A                     l1896:
  1837  00148A  0E00               	movlw	0
  1838  00148C  6E2D               	movwf	(_dtoa$1261+1)^0,c
  1839  00148E  0E2D               	movlw	45
  1840  001490                     L3:
  1841  001490  6E2C               	movwf	_dtoa$1261^0,c
  1842  001492  503C               	movf	dtoa@i^0,w,c
  1843  001494  0F6C               	addlw	low _dbuf
  1844  001496  6ED9               	movwf	fsr2l,c
  1845  001498  6ADA               	clrf	fsr2h,c
  1846  00149A  C02C  FFDF         	movff	_dtoa$1261,indf2
  1847  00149E                     l1900:
  1848                           
  1849                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 314:     re
      +                          turn pad(fp, &dbuf[i], w);
  1850  00149E  C01B  F00E         	movff	dtoa@fp,pad@fp
  1851  0014A2  503C               	movf	dtoa@i^0,w,c
  1852  0014A4  0F6C               	addlw	low _dbuf
  1853  0014A6  6E0F               	movwf	pad@buf^0,c
  1854  0014A8  C030  F010         	movff	dtoa@w,pad@p
  1855  0014AC  C031  F011         	movff	dtoa@w+1,pad@p+1
  1856  0014B0  EC00  F00D         	call	_pad	;wreg free
  1857  0014B4  C00E  F01B         	movff	?_pad,?_dtoa
  1858  0014B8  C00F  F01C         	movff	?_pad+1,?_dtoa+1
  1859  0014BC  0012               	return		;funcret
  1860  0014BE                     __end_of_dtoa:
  1861                           	opt callstack 0
  1862                           
  1863 ;; *************** function _pad *****************
  1864 ;; Defined at:
  1865 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
  1866 ;; Parameters:    Size  Location     Type
  1867 ;;  fp              1   13[COMRAM] PTR struct _IO_FILE
  1868 ;;		 -> sprintf@f(5), 
  1869 ;;  buf             1   14[COMRAM] PTR unsigned char 
  1870 ;;		 -> dbuf(32), 
  1871 ;;  p               2   15[COMRAM] int 
  1872 ;; Auto vars:     Size  Location     Type
  1873 ;;  w               2   20[COMRAM] int 
  1874 ;;  i               2   18[COMRAM] int 
  1875 ;; Return value:  Size  Location     Type
  1876 ;;                  2   13[COMRAM] int 
  1877 ;; Registers used:
  1878 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1879 ;; Tracked objects:
  1880 ;;		On entry : 0/0
  1881 ;;		On exit  : 0/0
  1882 ;;		Unchanged: 0/0
  1883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1884 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1885 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1886 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1887 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1888 ;;Total ram usage:        9 bytes
  1889 ;; Hardware stack levels used:    1
  1890 ;; Hardware stack levels required when called:    4
  1891 ;; This function calls:
  1892 ;;		_fputc
  1893 ;;		_fputs
  1894 ;;		_strlen
  1895 ;; This function is called by:
  1896 ;;		_dtoa
  1897 ;; This function uses a non-reentrant model
  1898 ;;
  1899                           
  1900                           	psect	text5
  1901  001A00                     __ptext5:
  1902                           	opt callstack 0
  1903  001A00                     _pad:
  1904                           	opt callstack 22
  1905                           
  1906                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  1907                           
  1908                           ;incstack = 0
  1909  001A00  0100               	movlb	0	; () banked
  1910  001A02  A166               	btfss	_flags& (0+255),0,b
  1911  001A04  D006               	goto	l1718
  1912                           
  1913                           ; BSR set to: 0
  1914                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  1915  001A06  C00F  F009         	movff	pad@buf,fputs@s
  1916  001A0A  C00E  F00A         	movff	pad@fp,fputs@fp
  1917  001A0E  EC56  F00E         	call	_fputs	;wreg free
  1918  001A12                     l1718:
  1919                           
  1920                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  1921  001A12  BE11               	btfsc	(pad@p+1)^0,7,c
  1922  001A14  D005               	goto	l1722
  1923  001A16  C010  F015         	movff	pad@p,pad@w
  1924  001A1A  C011  F016         	movff	pad@p+1,pad@w+1
  1925  001A1E  D004               	goto	l211
  1926  001A20                     l1722:
  1927  001A20  0E00               	movlw	0
  1928  001A22  6E16               	movwf	(pad@w+1)^0,c
  1929  001A24  0E00               	movlw	0
  1930  001A26  6E15               	movwf	pad@w^0,c
  1931  001A28                     l211:
  1932                           
  1933                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  1934  001A28  0E00               	movlw	0
  1935  001A2A  6E14               	movwf	(pad@i+1)^0,c
  1936  001A2C  0E00               	movlw	0
  1937  001A2E  6E13               	movwf	pad@i^0,c
  1938                           
  1939                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1940  001A30  D00A               	goto	l1728
  1941  001A32                     l1724:
  1942                           
  1943                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  1944  001A32  0E00               	movlw	0
  1945  001A34  6E02               	movwf	(fputc@c+1)^0,c
  1946  001A36  0E20               	movlw	32
  1947  001A38  6E01               	movwf	fputc@c^0,c
  1948  001A3A  C00E  F003         	movff	pad@fp,fputc@fp
  1949  001A3E  EC41  F00D         	call	_fputc	;wreg free
  1950                           
  1951                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  1952  001A42  4A13               	infsnz	pad@i^0,f,c
  1953  001A44  2A14               	incf	(pad@i+1)^0,f,c
  1954  001A46                     l1728:
  1955                           
  1956                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1957  001A46  5015               	movf	pad@w^0,w,c
  1958  001A48  5C13               	subwf	pad@i^0,w,c
  1959  001A4A  5014               	movf	(pad@i+1)^0,w,c
  1960  001A4C  0A80               	xorlw	128
  1961  001A4E  6E12               	movwf	??_pad^0,c
  1962  001A50  5016               	movf	(pad@w+1)^0,w,c
  1963  001A52  0A80               	xorlw	128
  1964  001A54  5812               	subwfb	??_pad^0,w,c
  1965  001A56  A0D8               	btfss	status,0,c
  1966  001A58  D7EC               	goto	l1724
  1967                           
  1968                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  1969  001A5A  0100               	movlb	0	; () banked
  1970  001A5C  B166               	btfsc	_flags& (0+255),0,b
  1971  001A5E  D006               	goto	l1732
  1972                           
  1973                           ; BSR set to: 0
  1974                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  1975  001A60  C00F  F009         	movff	pad@buf,fputs@s
  1976  001A64  C00E  F00A         	movff	pad@fp,fputs@fp
  1977  001A68  EC56  F00E         	call	_fputs	;wreg free
  1978  001A6C                     l1732:
  1979                           
  1980                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
  1981  001A6C  C00F  F001         	movff	pad@buf,strlen@s
  1982  001A70  ECC5  F00E         	call	_strlen	;wreg free
  1983  001A74  5015               	movf	pad@w^0,w,c
  1984  001A76  2401               	addwf	?_strlen^0,w,c
  1985  001A78  6E0E               	movwf	?_pad^0,c
  1986  001A7A  5016               	movf	(pad@w+1)^0,w,c
  1987  001A7C  2002               	addwfc	(?_strlen+1)^0,w,c
  1988  001A7E  6E0F               	movwf	(?_pad+1)^0,c
  1989  001A80  0012               	return		;funcret
  1990  001A82                     __end_of_pad:
  1991                           	opt callstack 0
  1992                           
  1993 ;; *************** function _strlen *****************
  1994 ;; Defined at:
  1995 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\strlen.c"
  1996 ;; Parameters:    Size  Location     Type
  1997 ;;  s               1    0[COMRAM] PTR const unsigned char 
  1998 ;;		 -> dbuf(32), 
  1999 ;; Auto vars:     Size  Location     Type
  2000 ;;  a               1    2[COMRAM] PTR const unsigned char 
  2001 ;;		 -> dbuf(32), 
  2002 ;; Return value:  Size  Location     Type
  2003 ;;                  2    0[COMRAM] unsigned int 
  2004 ;; Registers used:
  2005 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2006 ;; Tracked objects:
  2007 ;;		On entry : 0/0
  2008 ;;		On exit  : 0/0
  2009 ;;		Unchanged: 0/0
  2010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2011 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2012 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2013 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2014 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2015 ;;Total ram usage:        3 bytes
  2016 ;; Hardware stack levels used:    1
  2017 ;; Hardware stack levels required when called:    1
  2018 ;; This function calls:
  2019 ;;		Nothing
  2020 ;; This function is called by:
  2021 ;;		_pad
  2022 ;; This function uses a non-reentrant model
  2023 ;;
  2024                           
  2025                           	psect	text6
  2026  001D8A                     __ptext6:
  2027                           	opt callstack 0
  2028  001D8A                     _strlen:
  2029                           	opt callstack 24
  2030                           
  2031                           ;incstack = 0
  2032  001D8A  C001  F003         	movff	strlen@s,strlen@a
  2033  001D8E  D001               	goto	l1708
  2034  001D90                     l1706:
  2035  001D90  2A01               	incf	strlen@s^0,f,c
  2036  001D92                     l1708:
  2037  001D92  5001               	movf	strlen@s^0,w,c
  2038  001D94  6ED9               	movwf	fsr2l,c
  2039  001D96  6ADA               	clrf	fsr2h,c
  2040  001D98  50DF               	movf	indf2,w,c
  2041  001D9A  A4D8               	btfss	status,2,c
  2042  001D9C  D7F9               	goto	l1706
  2043  001D9E  5003               	movf	strlen@a^0,w,c
  2044  001DA0  5C01               	subwf	strlen@s^0,w,c
  2045  001DA2  6E01               	movwf	?_strlen^0,c
  2046  001DA4  6A02               	clrf	(?_strlen+1)^0,c
  2047  001DA6  BE01               	btfsc	?_strlen^0,7,c
  2048  001DA8  0602               	decf	(?_strlen+1)^0,f,c
  2049  001DAA  0012               	return		;funcret
  2050  001DAC                     __end_of_strlen:
  2051                           	opt callstack 0
  2052                           
  2053 ;; *************** function _fputs *****************
  2054 ;; Defined at:
  2055 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\nf_fputs.c"
  2056 ;; Parameters:    Size  Location     Type
  2057 ;;  s               1    8[COMRAM] PTR const unsigned char 
  2058 ;;		 -> dbuf(32), 
  2059 ;;  fp              1    9[COMRAM] PTR struct _IO_FILE
  2060 ;;		 -> sprintf@f(5), 
  2061 ;; Auto vars:     Size  Location     Type
  2062 ;;  i               2   11[COMRAM] int 
  2063 ;;  c               1   10[COMRAM] unsigned char 
  2064 ;; Return value:  Size  Location     Type
  2065 ;;                  2    8[COMRAM] int 
  2066 ;; Registers used:
  2067 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2068 ;; Tracked objects:
  2069 ;;		On entry : 3F/0
  2070 ;;		On exit  : 0/0
  2071 ;;		Unchanged: 0/0
  2072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2073 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2074 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2076 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2077 ;;Total ram usage:        5 bytes
  2078 ;; Hardware stack levels used:    1
  2079 ;; Hardware stack levels required when called:    3
  2080 ;; This function calls:
  2081 ;;		_fputc
  2082 ;; This function is called by:
  2083 ;;		_pad
  2084 ;; This function uses a non-reentrant model
  2085 ;;
  2086                           
  2087                           	psect	text7
  2088  001CAC                     __ptext7:
  2089                           	opt callstack 0
  2090  001CAC                     _fputs:
  2091                           	opt callstack 22
  2092                           
  2093                           ; BSR set to: 0
  2094                           
  2095                           ;incstack = 0
  2096  001CAC  0E00               	movlw	0
  2097  001CAE  6E0D               	movwf	(fputs@i+1)^0,c
  2098  001CB0  0E00               	movlw	0
  2099  001CB2  6E0C               	movwf	fputs@i^0,c
  2100  001CB4  D009               	goto	l1702
  2101  001CB6                     l1698:
  2102  001CB6  C00B  F001         	movff	fputs@c,fputc@c
  2103  001CBA  6A02               	clrf	(fputc@c+1)^0,c
  2104  001CBC  C00A  F003         	movff	fputs@fp,fputc@fp
  2105  001CC0  EC41  F00D         	call	_fputc	;wreg free
  2106  001CC4  4A0C               	infsnz	fputs@i^0,f,c
  2107  001CC6  2A0D               	incf	(fputs@i+1)^0,f,c
  2108  001CC8                     l1702:
  2109  001CC8  5009               	movf	fputs@s^0,w,c
  2110  001CCA  240C               	addwf	fputs@i^0,w,c
  2111  001CCC  6ED9               	movwf	fsr2l,c
  2112  001CCE  6ADA               	clrf	fsr2h,c
  2113  001CD0  50DF               	movf	indf2,w,c
  2114  001CD2  6E0B               	movwf	fputs@c^0,c
  2115  001CD4  500B               	movf	fputs@c^0,w,c
  2116  001CD6  B4D8               	btfsc	status,2,c
  2117  001CD8  0012               	return	
  2118  001CDA  D7ED               	goto	l1698
  2119  001CDC                     __end_of_fputs:
  2120                           	opt callstack 0
  2121                           
  2122 ;; *************** function _fputc *****************
  2123 ;; Defined at:
  2124 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\nf_fputc.c"
  2125 ;; Parameters:    Size  Location     Type
  2126 ;;  c               2    0[COMRAM] int 
  2127 ;;  fp              1    2[COMRAM] PTR struct _IO_FILE
  2128 ;;		 -> sprintf@f(5), 
  2129 ;; Auto vars:     Size  Location     Type
  2130 ;;		None
  2131 ;; Return value:  Size  Location     Type
  2132 ;;                  2    0[COMRAM] int 
  2133 ;; Registers used:
  2134 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2135 ;; Tracked objects:
  2136 ;;		On entry : 0/0
  2137 ;;		On exit  : 0/0
  2138 ;;		Unchanged: 0/0
  2139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2140 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2141 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2142 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2143 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2144 ;;Total ram usage:        8 bytes
  2145 ;; Hardware stack levels used:    1
  2146 ;; Hardware stack levels required when called:    2
  2147 ;; This function calls:
  2148 ;;		_putch
  2149 ;; This function is called by:
  2150 ;;		_pad
  2151 ;;		_vfpfcnvrt
  2152 ;;		_fputs
  2153 ;; This function uses a non-reentrant model
  2154 ;;
  2155                           
  2156                           	psect	text8
  2157  001A82                     __ptext8:
  2158                           	opt callstack 0
  2159  001A82                     _fputc:
  2160                           	opt callstack 25
  2161                           
  2162                           ;incstack = 0
  2163  001A82  5003               	movf	fputc@fp^0,w,c
  2164  001A84  B4D8               	btfsc	status,2,c
  2165  001A86  D003               	goto	u980
  2166  001A88  5003               	movf	fputc@fp^0,w,c
  2167  001A8A  A4D8               	btfss	status,2,c
  2168  001A8C  D004               	goto	l1688
  2169  001A8E                     u980:
  2170  001A8E  5001               	movf	fputc@c^0,w,c
  2171  001A90  ECE6  F00E         	call	_putch
  2172  001A94  0012               	return	
  2173  001A96                     l1688:
  2174  001A96  5003               	movf	fputc@fp^0,w,c
  2175  001A98  6ED9               	movwf	fsr2l,c
  2176  001A9A  6ADA               	clrf	fsr2h,c
  2177  001A9C  0E03               	movlw	3
  2178  001A9E  26D9               	addwf	fsr2l,f,c
  2179  001AA0  50DE               	movf	postinc2,w,c
  2180  001AA2  10DE               	iorwf	postinc2,w,c
  2181  001AA4  B4D8               	btfsc	status,2,c
  2182  001AA6  D014               	goto	u1000
  2183  001AA8  5003               	movf	fputc@fp^0,w,c
  2184  001AAA  6ED9               	movwf	fsr2l,c
  2185  001AAC  6ADA               	clrf	fsr2h,c
  2186  001AAE  0E03               	movlw	3
  2187  001AB0  26D9               	addwf	fsr2l,f,c
  2188  001AB2  5003               	movf	fputc@fp^0,w,c
  2189  001AB4  6EE1               	movwf	fsr1l,c
  2190  001AB6  6AE2               	clrf	fsr1h,c
  2191  001AB8  0E01               	movlw	1
  2192  001ABA  26E1               	addwf	fsr1l,f,c
  2193  001ABC  50DE               	movf	postinc2,w,c
  2194  001ABE  5CE6               	subwf	postinc1,w,c
  2195  001AC0  50E6               	movf	postinc1,w,c
  2196  001AC2  0A80               	xorlw	128
  2197  001AC4  6E08               	movwf	(??_fputc+4)^0,c
  2198  001AC6  50DE               	movf	postinc2,w,c
  2199  001AC8  0A80               	xorlw	128
  2200  001ACA  5808               	subwfb	(??_fputc+4)^0,w,c
  2201  001ACC  B0D8               	btfsc	status,0,c
  2202  001ACE  0012               	return	
  2203  001AD0                     u1000:
  2204  001AD0  5003               	movf	fputc@fp^0,w,c
  2205  001AD2  6ED9               	movwf	fsr2l,c
  2206  001AD4  6ADA               	clrf	fsr2h,c
  2207  001AD6  0E01               	movlw	1
  2208  001AD8  26D9               	addwf	fsr2l,f,c
  2209  001ADA  50DF               	movf	indf2,w,c
  2210  001ADC  6E04               	movwf	??_fputc^0,c
  2211  001ADE  5003               	movf	fputc@fp^0,w,c
  2212  001AE0  6ED9               	movwf	fsr2l,c
  2213  001AE2  6ADA               	clrf	fsr2h,c
  2214  001AE4  50DF               	movf	indf2,w,c
  2215  001AE6  2404               	addwf	??_fputc^0,w,c
  2216  001AE8  6ED9               	movwf	fsr2l,c
  2217  001AEA  6ADA               	clrf	fsr2h,c
  2218  001AEC  C001  FFDF         	movff	fputc@c,indf2
  2219  001AF0  5003               	movf	fputc@fp^0,w,c
  2220  001AF2  6ED9               	movwf	fsr2l,c
  2221  001AF4  6ADA               	clrf	fsr2h,c
  2222  001AF6  0E01               	movlw	1
  2223  001AF8  26D9               	addwf	fsr2l,f,c
  2224  001AFA  2ADE               	incf	postinc2,f,c
  2225  001AFC  0E00               	movlw	0
  2226  001AFE  22DD               	addwfc	postdec2,f,c
  2227  001B00  0012               	return		;funcret
  2228  001B02                     __end_of_fputc:
  2229                           	opt callstack 0
  2230                           
  2231 ;; *************** function _putch *****************
  2232 ;; Defined at:
  2233 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\putch.c"
  2234 ;; Parameters:    Size  Location     Type
  2235 ;;  c               1    wreg     unsigned char 
  2236 ;; Auto vars:     Size  Location     Type
  2237 ;;  c               1    0[COMRAM] unsigned char 
  2238 ;; Return value:  Size  Location     Type
  2239 ;;                  1    wreg      void 
  2240 ;; Registers used:
  2241 ;;		wreg
  2242 ;; Tracked objects:
  2243 ;;		On entry : 0/0
  2244 ;;		On exit  : 0/0
  2245 ;;		Unchanged: 0/0
  2246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2248 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2250 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2251 ;;Total ram usage:        0 bytes
  2252 ;; Hardware stack levels used:    1
  2253 ;; Hardware stack levels required when called:    1
  2254 ;; This function calls:
  2255 ;;		Nothing
  2256 ;; This function is called by:
  2257 ;;		_fputc
  2258 ;; This function uses a non-reentrant model
  2259 ;;
  2260                           
  2261                           	psect	text9
  2262  001DCC                     __ptext9:
  2263                           	opt callstack 0
  2264  001DCC                     _putch:
  2265                           	opt callstack 25
  2266                           
  2267                           ;incstack = 0
  2268  001DCC  0012               	return		;funcret
  2269  001DCE                     __end_of_putch:
  2270                           	opt callstack 0
  2271                           
  2272 ;; *************** function _abs *****************
  2273 ;; Defined at:
  2274 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\abs.c"
  2275 ;; Parameters:    Size  Location     Type
  2276 ;;  a               2   18[COMRAM] int 
  2277 ;; Auto vars:     Size  Location     Type
  2278 ;;		None
  2279 ;; Return value:  Size  Location     Type
  2280 ;;                  2   18[COMRAM] int 
  2281 ;; Registers used:
  2282 ;;		wreg, status,2, status,0
  2283 ;; Tracked objects:
  2284 ;;		On entry : 0/0
  2285 ;;		On exit  : 0/0
  2286 ;;		Unchanged: 0/0
  2287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2288 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2289 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2290 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2291 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2292 ;;Total ram usage:        4 bytes
  2293 ;; Hardware stack levels used:    1
  2294 ;; Hardware stack levels required when called:    1
  2295 ;; This function calls:
  2296 ;;		Nothing
  2297 ;; This function is called by:
  2298 ;;		_dtoa
  2299 ;; This function uses a non-reentrant model
  2300 ;;
  2301                           
  2302                           	psect	text10
  2303  001C7A                     __ptext10:
  2304                           	opt callstack 0
  2305  001C7A                     _abs:
  2306                           	opt callstack 25
  2307                           
  2308                           ;incstack = 0
  2309  001C7A  BE14               	btfsc	(abs@a+1)^0,7,c
  2310  001C7C  D005               	goto	u1070
  2311  001C7E  5014               	movf	(abs@a+1)^0,w,c
  2312  001C80  E110               	bnz	l956
  2313  001C82  0413               	decf	abs@a^0,w,c
  2314  001C84  B0D8               	btfsc	status,0,c
  2315  001C86  D00D               	goto	l956
  2316  001C88                     u1070:
  2317  001C88  C013  F015         	movff	abs@a,??_abs
  2318  001C8C  C014  F016         	movff	abs@a+1,??_abs+1
  2319  001C90  1E15               	comf	??_abs^0,f,c
  2320  001C92  1E16               	comf	(??_abs+1)^0,f,c
  2321  001C94  4A15               	infsnz	??_abs^0,f,c
  2322  001C96  2A16               	incf	(??_abs+1)^0,f,c
  2323  001C98  C015  F013         	movff	??_abs,?_abs
  2324  001C9C  C016  F014         	movff	??_abs+1,?_abs+1
  2325  001CA0  0012               	return	
  2326  001CA2                     l956:
  2327  001CA2  C013  F013         	movff	abs@a,?_abs
  2328  001CA6  C014  F014         	movff	abs@a+1,?_abs+1
  2329  001CAA  0012               	return		;funcret
  2330  001CAC                     __end_of_abs:
  2331                           	opt callstack 0
  2332                           
  2333 ;; *************** function ___aomod *****************
  2334 ;; Defined at:
  2335 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\aomod.c"
  2336 ;; Parameters:    Size  Location     Type
  2337 ;;  dividend        8    0[COMRAM] long long 
  2338 ;;  divisor         8    8[COMRAM] long long 
  2339 ;; Auto vars:     Size  Location     Type
  2340 ;;  sign            1   17[COMRAM] unsigned char 
  2341 ;;  counter         1   16[COMRAM] unsigned char 
  2342 ;; Return value:  Size  Location     Type
  2343 ;;                  8    0[COMRAM] long long 
  2344 ;; Registers used:
  2345 ;;		wreg, status,2, status,0
  2346 ;; Tracked objects:
  2347 ;;		On entry : 0/0
  2348 ;;		On exit  : 0/0
  2349 ;;		Unchanged: 0/0
  2350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2351 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2352 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2354 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2355 ;;Total ram usage:       18 bytes
  2356 ;; Hardware stack levels used:    1
  2357 ;; Hardware stack levels required when called:    1
  2358 ;; This function calls:
  2359 ;;		Nothing
  2360 ;; This function is called by:
  2361 ;;		_dtoa
  2362 ;; This function uses a non-reentrant model
  2363 ;;
  2364                           
  2365                           	psect	text11
  2366  001742                     __ptext11:
  2367                           	opt callstack 0
  2368  001742                     ___aomod:
  2369                           	opt callstack 25
  2370                           
  2371                           ;incstack = 0
  2372  001742  0E00               	movlw	0
  2373  001744  6E12               	movwf	___aomod@sign^0,c
  2374  001746  AE08               	btfss	(___aomod@dividend+7)^0,7,c
  2375  001748  D012               	goto	l1802
  2376  00174A  1E08               	comf	(___aomod@dividend+7)^0,f,c
  2377  00174C  1E07               	comf	(___aomod@dividend+6)^0,f,c
  2378  00174E  1E06               	comf	(___aomod@dividend+5)^0,f,c
  2379  001750  1E05               	comf	(___aomod@dividend+4)^0,f,c
  2380  001752  1E04               	comf	(___aomod@dividend+3)^0,f,c
  2381  001754  1E03               	comf	(___aomod@dividend+2)^0,f,c
  2382  001756  1E02               	comf	(___aomod@dividend+1)^0,f,c
  2383  001758  6C01               	negf	___aomod@dividend^0,c
  2384  00175A  0E00               	movlw	0
  2385  00175C  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  2386  00175E  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  2387  001760  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  2388  001762  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  2389  001764  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  2390  001766  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  2391  001768  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  2392  00176A  0E01               	movlw	1
  2393  00176C  6E12               	movwf	___aomod@sign^0,c
  2394  00176E                     l1802:
  2395  00176E  AE10               	btfss	(___aomod@divisor+7)^0,7,c
  2396  001770  D010               	goto	l1806
  2397  001772  1E10               	comf	(___aomod@divisor+7)^0,f,c
  2398  001774  1E0F               	comf	(___aomod@divisor+6)^0,f,c
  2399  001776  1E0E               	comf	(___aomod@divisor+5)^0,f,c
  2400  001778  1E0D               	comf	(___aomod@divisor+4)^0,f,c
  2401  00177A  1E0C               	comf	(___aomod@divisor+3)^0,f,c
  2402  00177C  1E0B               	comf	(___aomod@divisor+2)^0,f,c
  2403  00177E  1E0A               	comf	(___aomod@divisor+1)^0,f,c
  2404  001780  6C09               	negf	___aomod@divisor^0,c
  2405  001782  0E00               	movlw	0
  2406  001784  220A               	addwfc	(___aomod@divisor+1)^0,f,c
  2407  001786  220B               	addwfc	(___aomod@divisor+2)^0,f,c
  2408  001788  220C               	addwfc	(___aomod@divisor+3)^0,f,c
  2409  00178A  220D               	addwfc	(___aomod@divisor+4)^0,f,c
  2410  00178C  220E               	addwfc	(___aomod@divisor+5)^0,f,c
  2411  00178E  220F               	addwfc	(___aomod@divisor+6)^0,f,c
  2412  001790  2210               	addwfc	(___aomod@divisor+7)^0,f,c
  2413  001792                     l1806:
  2414  001792  5009               	movf	___aomod@divisor^0,w,c
  2415  001794  100A               	iorwf	(___aomod@divisor+1)^0,w,c
  2416  001796  100B               	iorwf	(___aomod@divisor+2)^0,w,c
  2417  001798  100C               	iorwf	(___aomod@divisor+3)^0,w,c
  2418  00179A  100D               	iorwf	(___aomod@divisor+4)^0,w,c
  2419  00179C  100E               	iorwf	(___aomod@divisor+5)^0,w,c
  2420  00179E  100F               	iorwf	(___aomod@divisor+6)^0,w,c
  2421  0017A0  1010               	iorwf	(___aomod@divisor+7)^0,w,c
  2422  0017A2  B4D8               	btfsc	status,2,c
  2423  0017A4  D03C               	goto	l1822
  2424  0017A6  0E01               	movlw	1
  2425  0017A8  6E11               	movwf	___aomod@counter^0,c
  2426  0017AA  D00A               	goto	l1812
  2427  0017AC                     l1810:
  2428  0017AC  90D8               	bcf	status,0,c
  2429  0017AE  3609               	rlcf	___aomod@divisor^0,f,c
  2430  0017B0  360A               	rlcf	(___aomod@divisor+1)^0,f,c
  2431  0017B2  360B               	rlcf	(___aomod@divisor+2)^0,f,c
  2432  0017B4  360C               	rlcf	(___aomod@divisor+3)^0,f,c
  2433  0017B6  360D               	rlcf	(___aomod@divisor+4)^0,f,c
  2434  0017B8  360E               	rlcf	(___aomod@divisor+5)^0,f,c
  2435  0017BA  360F               	rlcf	(___aomod@divisor+6)^0,f,c
  2436  0017BC  3610               	rlcf	(___aomod@divisor+7)^0,f,c
  2437  0017BE  2A11               	incf	___aomod@counter^0,f,c
  2438  0017C0                     l1812:
  2439  0017C0  AE10               	btfss	(___aomod@divisor+7)^0,7,c
  2440  0017C2  D7F4               	goto	l1810
  2441  0017C4                     u1200:
  2442  0017C4  5009               	movf	___aomod@divisor^0,w,c
  2443  0017C6  5C01               	subwf	___aomod@dividend^0,w,c
  2444  0017C8  500A               	movf	(___aomod@divisor+1)^0,w,c
  2445  0017CA  5802               	subwfb	(___aomod@dividend+1)^0,w,c
  2446  0017CC  500B               	movf	(___aomod@divisor+2)^0,w,c
  2447  0017CE  5803               	subwfb	(___aomod@dividend+2)^0,w,c
  2448  0017D0  500C               	movf	(___aomod@divisor+3)^0,w,c
  2449  0017D2  5804               	subwfb	(___aomod@dividend+3)^0,w,c
  2450  0017D4  500D               	movf	(___aomod@divisor+4)^0,w,c
  2451  0017D6  5805               	subwfb	(___aomod@dividend+4)^0,w,c
  2452  0017D8  500E               	movf	(___aomod@divisor+5)^0,w,c
  2453  0017DA  5806               	subwfb	(___aomod@dividend+5)^0,w,c
  2454  0017DC  500F               	movf	(___aomod@divisor+6)^0,w,c
  2455  0017DE  5807               	subwfb	(___aomod@dividend+6)^0,w,c
  2456  0017E0  5010               	movf	(___aomod@divisor+7)^0,w,c
  2457  0017E2  5808               	subwfb	(___aomod@dividend+7)^0,w,c
  2458  0017E4  A0D8               	btfss	status,0,c
  2459  0017E6  D010               	goto	l1818
  2460  0017E8  5009               	movf	___aomod@divisor^0,w,c
  2461  0017EA  5E01               	subwf	___aomod@dividend^0,f,c
  2462  0017EC  500A               	movf	(___aomod@divisor+1)^0,w,c
  2463  0017EE  5A02               	subwfb	(___aomod@dividend+1)^0,f,c
  2464  0017F0  500B               	movf	(___aomod@divisor+2)^0,w,c
  2465  0017F2  5A03               	subwfb	(___aomod@dividend+2)^0,f,c
  2466  0017F4  500C               	movf	(___aomod@divisor+3)^0,w,c
  2467  0017F6  5A04               	subwfb	(___aomod@dividend+3)^0,f,c
  2468  0017F8  500D               	movf	(___aomod@divisor+4)^0,w,c
  2469  0017FA  5A05               	subwfb	(___aomod@dividend+4)^0,f,c
  2470  0017FC  500E               	movf	(___aomod@divisor+5)^0,w,c
  2471  0017FE  5A06               	subwfb	(___aomod@dividend+5)^0,f,c
  2472  001800  500F               	movf	(___aomod@divisor+6)^0,w,c
  2473  001802  5A07               	subwfb	(___aomod@dividend+6)^0,f,c
  2474  001804  5010               	movf	(___aomod@divisor+7)^0,w,c
  2475  001806  5A08               	subwfb	(___aomod@dividend+7)^0,f,c
  2476  001808                     l1818:
  2477  001808  90D8               	bcf	status,0,c
  2478  00180A  3210               	rrcf	(___aomod@divisor+7)^0,f,c
  2479  00180C  320F               	rrcf	(___aomod@divisor+6)^0,f,c
  2480  00180E  320E               	rrcf	(___aomod@divisor+5)^0,f,c
  2481  001810  320D               	rrcf	(___aomod@divisor+4)^0,f,c
  2482  001812  320C               	rrcf	(___aomod@divisor+3)^0,f,c
  2483  001814  320B               	rrcf	(___aomod@divisor+2)^0,f,c
  2484  001816  320A               	rrcf	(___aomod@divisor+1)^0,f,c
  2485  001818  3209               	rrcf	___aomod@divisor^0,f,c
  2486  00181A  2E11               	decfsz	___aomod@counter^0,f,c
  2487  00181C  D7D3               	goto	u1200
  2488  00181E                     l1822:
  2489  00181E  5012               	movf	___aomod@sign^0,w,c
  2490  001820  B4D8               	btfsc	status,2,c
  2491  001822  D010               	goto	l1826
  2492  001824  1E08               	comf	(___aomod@dividend+7)^0,f,c
  2493  001826  1E07               	comf	(___aomod@dividend+6)^0,f,c
  2494  001828  1E06               	comf	(___aomod@dividend+5)^0,f,c
  2495  00182A  1E05               	comf	(___aomod@dividend+4)^0,f,c
  2496  00182C  1E04               	comf	(___aomod@dividend+3)^0,f,c
  2497  00182E  1E03               	comf	(___aomod@dividend+2)^0,f,c
  2498  001830  1E02               	comf	(___aomod@dividend+1)^0,f,c
  2499  001832  6C01               	negf	___aomod@dividend^0,c
  2500  001834  0E00               	movlw	0
  2501  001836  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  2502  001838  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  2503  00183A  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  2504  00183C  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  2505  00183E  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  2506  001840  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  2507  001842  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  2508  001844                     l1826:
  2509  001844  C001  F001         	movff	___aomod@dividend,?___aomod
  2510  001848  C002  F002         	movff	___aomod@dividend+1,?___aomod+1
  2511  00184C  C003  F003         	movff	___aomod@dividend+2,?___aomod+2
  2512  001850  C004  F004         	movff	___aomod@dividend+3,?___aomod+3
  2513  001854  C005  F005         	movff	___aomod@dividend+4,?___aomod+4
  2514  001858  C006  F006         	movff	___aomod@dividend+5,?___aomod+5
  2515  00185C  C007  F007         	movff	___aomod@dividend+6,?___aomod+6
  2516  001860  C008  F008         	movff	___aomod@dividend+7,?___aomod+7
  2517  001864  0012               	return		;funcret
  2518  001866                     __end_of___aomod:
  2519                           	opt callstack 0
  2520                           
  2521 ;; *************** function ___aodiv *****************
  2522 ;; Defined at:
  2523 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\aodiv.c"
  2524 ;; Parameters:    Size  Location     Type
  2525 ;;  dividend        8    0[COMRAM] long long 
  2526 ;;  divisor         8    8[COMRAM] long long 
  2527 ;; Auto vars:     Size  Location     Type
  2528 ;;  quotient        8   18[COMRAM] long long 
  2529 ;;  sign            1   17[COMRAM] unsigned char 
  2530 ;;  counter         1   16[COMRAM] unsigned char 
  2531 ;; Return value:  Size  Location     Type
  2532 ;;                  8    0[COMRAM] long long 
  2533 ;; Registers used:
  2534 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2535 ;; Tracked objects:
  2536 ;;		On entry : 0/0
  2537 ;;		On exit  : 0/0
  2538 ;;		Unchanged: 0/0
  2539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2540 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2541 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2542 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2543 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2544 ;;Total ram usage:       26 bytes
  2545 ;; Hardware stack levels used:    1
  2546 ;; Hardware stack levels required when called:    1
  2547 ;; This function calls:
  2548 ;;		Nothing
  2549 ;; This function is called by:
  2550 ;;		_dtoa
  2551 ;; This function uses a non-reentrant model
  2552 ;;
  2553                           
  2554                           	psect	text12
  2555  0014BE                     __ptext12:
  2556                           	opt callstack 0
  2557  0014BE                     ___aodiv:
  2558                           	opt callstack 25
  2559                           
  2560                           ;incstack = 0
  2561  0014BE  0E00               	movlw	0
  2562  0014C0  6E12               	movwf	___aodiv@sign^0,c
  2563  0014C2  AE10               	btfss	(___aodiv@divisor+7)^0,7,c
  2564  0014C4  D012               	goto	l1758
  2565  0014C6  1E10               	comf	(___aodiv@divisor+7)^0,f,c
  2566  0014C8  1E0F               	comf	(___aodiv@divisor+6)^0,f,c
  2567  0014CA  1E0E               	comf	(___aodiv@divisor+5)^0,f,c
  2568  0014CC  1E0D               	comf	(___aodiv@divisor+4)^0,f,c
  2569  0014CE  1E0C               	comf	(___aodiv@divisor+3)^0,f,c
  2570  0014D0  1E0B               	comf	(___aodiv@divisor+2)^0,f,c
  2571  0014D2  1E0A               	comf	(___aodiv@divisor+1)^0,f,c
  2572  0014D4  6C09               	negf	___aodiv@divisor^0,c
  2573  0014D6  0E00               	movlw	0
  2574  0014D8  220A               	addwfc	(___aodiv@divisor+1)^0,f,c
  2575  0014DA  220B               	addwfc	(___aodiv@divisor+2)^0,f,c
  2576  0014DC  220C               	addwfc	(___aodiv@divisor+3)^0,f,c
  2577  0014DE  220D               	addwfc	(___aodiv@divisor+4)^0,f,c
  2578  0014E0  220E               	addwfc	(___aodiv@divisor+5)^0,f,c
  2579  0014E2  220F               	addwfc	(___aodiv@divisor+6)^0,f,c
  2580  0014E4  2210               	addwfc	(___aodiv@divisor+7)^0,f,c
  2581  0014E6  0E01               	movlw	1
  2582  0014E8  6E12               	movwf	___aodiv@sign^0,c
  2583  0014EA                     l1758:
  2584  0014EA  AE08               	btfss	(___aodiv@dividend+7)^0,7,c
  2585  0014EC  D012               	goto	l1764
  2586  0014EE  1E08               	comf	(___aodiv@dividend+7)^0,f,c
  2587  0014F0  1E07               	comf	(___aodiv@dividend+6)^0,f,c
  2588  0014F2  1E06               	comf	(___aodiv@dividend+5)^0,f,c
  2589  0014F4  1E05               	comf	(___aodiv@dividend+4)^0,f,c
  2590  0014F6  1E04               	comf	(___aodiv@dividend+3)^0,f,c
  2591  0014F8  1E03               	comf	(___aodiv@dividend+2)^0,f,c
  2592  0014FA  1E02               	comf	(___aodiv@dividend+1)^0,f,c
  2593  0014FC  6C01               	negf	___aodiv@dividend^0,c
  2594  0014FE  0E00               	movlw	0
  2595  001500  2202               	addwfc	(___aodiv@dividend+1)^0,f,c
  2596  001502  2203               	addwfc	(___aodiv@dividend+2)^0,f,c
  2597  001504  2204               	addwfc	(___aodiv@dividend+3)^0,f,c
  2598  001506  2205               	addwfc	(___aodiv@dividend+4)^0,f,c
  2599  001508  2206               	addwfc	(___aodiv@dividend+5)^0,f,c
  2600  00150A  2207               	addwfc	(___aodiv@dividend+6)^0,f,c
  2601  00150C  2208               	addwfc	(___aodiv@dividend+7)^0,f,c
  2602  00150E  0E01               	movlw	1
  2603  001510  1A12               	xorwf	___aodiv@sign^0,f,c
  2604  001512                     l1764:
  2605  001512  EE20  F013         	lfsr	2,___aodiv@quotient
  2606  001516  0E07               	movlw	7
  2607  001518                     u1121:
  2608  001518  6ADE               	clrf	postinc2,c
  2609  00151A  06E8               	decf	wreg,f,c
  2610  00151C  E2FD               	bc	u1121
  2611  00151E  5009               	movf	___aodiv@divisor^0,w,c
  2612  001520  100A               	iorwf	(___aodiv@divisor+1)^0,w,c
  2613  001522  100B               	iorwf	(___aodiv@divisor+2)^0,w,c
  2614  001524  100C               	iorwf	(___aodiv@divisor+3)^0,w,c
  2615  001526  100D               	iorwf	(___aodiv@divisor+4)^0,w,c
  2616  001528  100E               	iorwf	(___aodiv@divisor+5)^0,w,c
  2617  00152A  100F               	iorwf	(___aodiv@divisor+6)^0,w,c
  2618  00152C  1010               	iorwf	(___aodiv@divisor+7)^0,w,c
  2619  00152E  B4D8               	btfsc	status,2,c
  2620  001530  D046               	goto	l1786
  2621  001532  0E01               	movlw	1
  2622  001534  6E11               	movwf	___aodiv@counter^0,c
  2623  001536  D00A               	goto	l1772
  2624  001538                     l1770:
  2625  001538  90D8               	bcf	status,0,c
  2626  00153A  3609               	rlcf	___aodiv@divisor^0,f,c
  2627  00153C  360A               	rlcf	(___aodiv@divisor+1)^0,f,c
  2628  00153E  360B               	rlcf	(___aodiv@divisor+2)^0,f,c
  2629  001540  360C               	rlcf	(___aodiv@divisor+3)^0,f,c
  2630  001542  360D               	rlcf	(___aodiv@divisor+4)^0,f,c
  2631  001544  360E               	rlcf	(___aodiv@divisor+5)^0,f,c
  2632  001546  360F               	rlcf	(___aodiv@divisor+6)^0,f,c
  2633  001548  3610               	rlcf	(___aodiv@divisor+7)^0,f,c
  2634  00154A  2A11               	incf	___aodiv@counter^0,f,c
  2635  00154C                     l1772:
  2636  00154C  AE10               	btfss	(___aodiv@divisor+7)^0,7,c
  2637  00154E  D7F4               	goto	l1770
  2638  001550                     u1140:
  2639  001550  90D8               	bcf	status,0,c
  2640  001552  3613               	rlcf	___aodiv@quotient^0,f,c
  2641  001554  3614               	rlcf	(___aodiv@quotient+1)^0,f,c
  2642  001556  3615               	rlcf	(___aodiv@quotient+2)^0,f,c
  2643  001558  3616               	rlcf	(___aodiv@quotient+3)^0,f,c
  2644  00155A  3617               	rlcf	(___aodiv@quotient+4)^0,f,c
  2645  00155C  3618               	rlcf	(___aodiv@quotient+5)^0,f,c
  2646  00155E  3619               	rlcf	(___aodiv@quotient+6)^0,f,c
  2647  001560  361A               	rlcf	(___aodiv@quotient+7)^0,f,c
  2648  001562  5009               	movf	___aodiv@divisor^0,w,c
  2649  001564  5C01               	subwf	___aodiv@dividend^0,w,c
  2650  001566  500A               	movf	(___aodiv@divisor+1)^0,w,c
  2651  001568  5802               	subwfb	(___aodiv@dividend+1)^0,w,c
  2652  00156A  500B               	movf	(___aodiv@divisor+2)^0,w,c
  2653  00156C  5803               	subwfb	(___aodiv@dividend+2)^0,w,c
  2654  00156E  500C               	movf	(___aodiv@divisor+3)^0,w,c
  2655  001570  5804               	subwfb	(___aodiv@dividend+3)^0,w,c
  2656  001572  500D               	movf	(___aodiv@divisor+4)^0,w,c
  2657  001574  5805               	subwfb	(___aodiv@dividend+4)^0,w,c
  2658  001576  500E               	movf	(___aodiv@divisor+5)^0,w,c
  2659  001578  5806               	subwfb	(___aodiv@dividend+5)^0,w,c
  2660  00157A  500F               	movf	(___aodiv@divisor+6)^0,w,c
  2661  00157C  5807               	subwfb	(___aodiv@dividend+6)^0,w,c
  2662  00157E  5010               	movf	(___aodiv@divisor+7)^0,w,c
  2663  001580  5808               	subwfb	(___aodiv@dividend+7)^0,w,c
  2664  001582  A0D8               	btfss	status,0,c
  2665  001584  D011               	goto	l1782
  2666  001586  5009               	movf	___aodiv@divisor^0,w,c
  2667  001588  5E01               	subwf	___aodiv@dividend^0,f,c
  2668  00158A  500A               	movf	(___aodiv@divisor+1)^0,w,c
  2669  00158C  5A02               	subwfb	(___aodiv@dividend+1)^0,f,c
  2670  00158E  500B               	movf	(___aodiv@divisor+2)^0,w,c
  2671  001590  5A03               	subwfb	(___aodiv@dividend+2)^0,f,c
  2672  001592  500C               	movf	(___aodiv@divisor+3)^0,w,c
  2673  001594  5A04               	subwfb	(___aodiv@dividend+3)^0,f,c
  2674  001596  500D               	movf	(___aodiv@divisor+4)^0,w,c
  2675  001598  5A05               	subwfb	(___aodiv@dividend+4)^0,f,c
  2676  00159A  500E               	movf	(___aodiv@divisor+5)^0,w,c
  2677  00159C  5A06               	subwfb	(___aodiv@dividend+5)^0,f,c
  2678  00159E  500F               	movf	(___aodiv@divisor+6)^0,w,c
  2679  0015A0  5A07               	subwfb	(___aodiv@dividend+6)^0,f,c
  2680  0015A2  5010               	movf	(___aodiv@divisor+7)^0,w,c
  2681  0015A4  5A08               	subwfb	(___aodiv@dividend+7)^0,f,c
  2682  0015A6  8013               	bsf	___aodiv@quotient^0,0,c
  2683  0015A8                     l1782:
  2684  0015A8  90D8               	bcf	status,0,c
  2685  0015AA  3210               	rrcf	(___aodiv@divisor+7)^0,f,c
  2686  0015AC  320F               	rrcf	(___aodiv@divisor+6)^0,f,c
  2687  0015AE  320E               	rrcf	(___aodiv@divisor+5)^0,f,c
  2688  0015B0  320D               	rrcf	(___aodiv@divisor+4)^0,f,c
  2689  0015B2  320C               	rrcf	(___aodiv@divisor+3)^0,f,c
  2690  0015B4  320B               	rrcf	(___aodiv@divisor+2)^0,f,c
  2691  0015B6  320A               	rrcf	(___aodiv@divisor+1)^0,f,c
  2692  0015B8  3209               	rrcf	___aodiv@divisor^0,f,c
  2693  0015BA  2E11               	decfsz	___aodiv@counter^0,f,c
  2694  0015BC  D7C9               	goto	u1140
  2695  0015BE                     l1786:
  2696  0015BE  5012               	movf	___aodiv@sign^0,w,c
  2697  0015C0  B4D8               	btfsc	status,2,c
  2698  0015C2  D010               	goto	l1790
  2699  0015C4  1E1A               	comf	(___aodiv@quotient+7)^0,f,c
  2700  0015C6  1E19               	comf	(___aodiv@quotient+6)^0,f,c
  2701  0015C8  1E18               	comf	(___aodiv@quotient+5)^0,f,c
  2702  0015CA  1E17               	comf	(___aodiv@quotient+4)^0,f,c
  2703  0015CC  1E16               	comf	(___aodiv@quotient+3)^0,f,c
  2704  0015CE  1E15               	comf	(___aodiv@quotient+2)^0,f,c
  2705  0015D0  1E14               	comf	(___aodiv@quotient+1)^0,f,c
  2706  0015D2  6C13               	negf	___aodiv@quotient^0,c
  2707  0015D4  0E00               	movlw	0
  2708  0015D6  2214               	addwfc	(___aodiv@quotient+1)^0,f,c
  2709  0015D8  2215               	addwfc	(___aodiv@quotient+2)^0,f,c
  2710  0015DA  2216               	addwfc	(___aodiv@quotient+3)^0,f,c
  2711  0015DC  2217               	addwfc	(___aodiv@quotient+4)^0,f,c
  2712  0015DE  2218               	addwfc	(___aodiv@quotient+5)^0,f,c
  2713  0015E0  2219               	addwfc	(___aodiv@quotient+6)^0,f,c
  2714  0015E2  221A               	addwfc	(___aodiv@quotient+7)^0,f,c
  2715  0015E4                     l1790:
  2716  0015E4  C013  F001         	movff	___aodiv@quotient,?___aodiv
  2717  0015E8  C014  F002         	movff	___aodiv@quotient+1,?___aodiv+1
  2718  0015EC  C015  F003         	movff	___aodiv@quotient+2,?___aodiv+2
  2719  0015F0  C016  F004         	movff	___aodiv@quotient+3,?___aodiv+3
  2720  0015F4  C017  F005         	movff	___aodiv@quotient+4,?___aodiv+4
  2721  0015F8  C018  F006         	movff	___aodiv@quotient+5,?___aodiv+5
  2722  0015FC  C019  F007         	movff	___aodiv@quotient+6,?___aodiv+6
  2723  001600  C01A  F008         	movff	___aodiv@quotient+7,?___aodiv+7
  2724  001604  0012               	return		;funcret
  2725  001606                     __end_of___aodiv:
  2726                           	opt callstack 0
  2727                           
  2728 ;; *************** function _atoi *****************
  2729 ;; Defined at:
  2730 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\atoi.c"
  2731 ;; Parameters:    Size  Location     Type
  2732 ;;  s               1    7[COMRAM] PTR const unsigned char 
  2733 ;;		 -> STR_2(22), 
  2734 ;; Auto vars:     Size  Location     Type
  2735 ;;  n               2   20[COMRAM] int 
  2736 ;;  neg             2   13[COMRAM] int 
  2737 ;; Return value:  Size  Location     Type
  2738 ;;                  2    7[COMRAM] int 
  2739 ;; Registers used:
  2740 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2741 ;; Tracked objects:
  2742 ;;		On entry : 3F/0
  2743 ;;		On exit  : 0/0
  2744 ;;		Unchanged: 0/0
  2745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2746 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2747 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2748 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2749 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2750 ;;Total ram usage:       15 bytes
  2751 ;; Hardware stack levels used:    1
  2752 ;; Hardware stack levels required when called:    2
  2753 ;; This function calls:
  2754 ;;		___wmul
  2755 ;;		_isdigit
  2756 ;;		_isspace
  2757 ;; This function is called by:
  2758 ;;		_vfpfcnvrt
  2759 ;; This function uses a non-reentrant model
  2760 ;;
  2761                           
  2762                           	psect	text13
  2763  001606                     __ptext13:
  2764                           	opt callstack 0
  2765  001606                     _atoi:
  2766                           	opt callstack 25
  2767                           
  2768                           ; BSR set to: 0
  2769                           
  2770                           ;incstack = 0
  2771  001606  0E00               	movlw	0
  2772  001608  6E16               	movwf	(atoi@n+1)^0,c
  2773  00160A  0E00               	movlw	0
  2774  00160C  6E15               	movwf	atoi@n^0,c
  2775  00160E  0E00               	movlw	0
  2776  001610  6E0F               	movwf	(atoi@neg+1)^0,c
  2777  001612  0E00               	movlw	0
  2778  001614  6E0E               	movwf	atoi@neg^0,c
  2779  001616  D001               	goto	l1908
  2780  001618                     l1906:
  2781                           
  2782                           ; BSR set to: 0
  2783  001618  2A08               	incf	atoi@s^0,f,c
  2784  00161A                     l1908:
  2785                           
  2786                           ; BSR set to: 0
  2787  00161A  0E01               	movlw	1
  2788  00161C  6E14               	movwf	_atoi$1734^0,c
  2789                           
  2790                           ; BSR set to: 0
  2791  00161E  C008  FFF6         	movff	atoi@s,tblptrl
  2792  001622                     	if	1	;There is more than 1 active tblptr byte
  2793  001622  0E10               	movlw	high __smallconst
  2794  001624  6EF7               	movwf	tblptrh,c
  2795  001626                     	endif
  2796  001626                     	if	0	;tblptru may be non-zero
  2797  001626                     	endif
  2798  001626                     	if	0	;tblptru may be non-zero
  2799  001626                     	endif
  2800  001626  0008               	tblrd		*
  2801  001628  50F5               	movf	tablat,w,c
  2802  00162A  0A20               	xorlw	32
  2803  00162C  B4D8               	btfsc	status,2,c
  2804  00162E  D018               	goto	l1916
  2805                           
  2806                           ; BSR set to: 0
  2807  001630  0EF7               	movlw	247
  2808  001632  6E0A               	movwf	??_atoi^0,c
  2809  001634  0EFF               	movlw	255
  2810  001636  6E0B               	movwf	(??_atoi+1)^0,c
  2811  001638  C008  FFF6         	movff	atoi@s,tblptrl
  2812  00163C                     	if	1	;There is more than 1 active tblptr byte
  2813  00163C  0E10               	movlw	high __smallconst
  2814  00163E  6EF7               	movwf	tblptrh,c
  2815  001640                     	endif
  2816  001640                     	if	0	;tblptru may be non-zero
  2817  001640                     	endif
  2818  001640                     	if	0	;tblptru may be non-zero
  2819  001640                     	endif
  2820  001640  0008               	tblrd		*
  2821  001642  50F5               	movf	tablat,w,c
  2822  001644  6E0C               	movwf	(??_atoi+2)^0,c
  2823  001646  6A0D               	clrf	(??_atoi+3)^0,c
  2824  001648  500A               	movf	??_atoi^0,w,c
  2825  00164A  260C               	addwf	(??_atoi+2)^0,f,c
  2826  00164C  500B               	movf	(??_atoi+1)^0,w,c
  2827  00164E  220D               	addwfc	(??_atoi+3)^0,f,c
  2828  001650  500D               	movf	(??_atoi+3)^0,w,c
  2829  001652  E104               	bnz	u1410
  2830  001654  0E05               	movlw	5
  2831  001656  5C0C               	subwf	(??_atoi+2)^0,w,c
  2832  001658  A0D8               	btfss	status,0,c
  2833  00165A  D002               	goto	l1916
  2834  00165C                     u1410:
  2835                           
  2836                           ; BSR set to: 0
  2837  00165C  0E00               	movlw	0
  2838  00165E  6E14               	movwf	_atoi$1734^0,c
  2839  001660                     l1916:
  2840                           
  2841                           ; BSR set to: 0
  2842  001660  C014  F010         	movff	_atoi$1734,_atoi$1733
  2843  001664  6A11               	clrf	(_atoi$1733+1)^0,c
  2844                           
  2845                           ; BSR set to: 0
  2846  001666  5010               	movf	_atoi$1733^0,w,c
  2847  001668  1011               	iorwf	(_atoi$1733+1)^0,w,c
  2848  00166A  B4D8               	btfsc	status,2,c
  2849  00166C  D007               	goto	l1926
  2850  00166E  D7D4               	goto	l1906
  2851  001670                     l1922:
  2852                           
  2853                           ; BSR set to: 0
  2854  001670  0E00               	movlw	0
  2855  001672  6E0F               	movwf	(atoi@neg+1)^0,c
  2856  001674  0E01               	movlw	1
  2857  001676  6E0E               	movwf	atoi@neg^0,c
  2858  001678                     l1924:
  2859  001678  2A08               	incf	atoi@s^0,f,c
  2860  00167A  D02E               	goto	l1932
  2861  00167C                     l1926:
  2862                           
  2863                           ; BSR set to: 0
  2864  00167C  C008  FFF6         	movff	atoi@s,tblptrl
  2865  001680                     	if	1	;There is more than 1 active tblptr byte
  2866  001680  0E10               	movlw	high __smallconst
  2867  001682  6EF7               	movwf	tblptrh,c
  2868  001684                     	endif
  2869  001684                     	if	0	;tblptru may be non-zero
  2870  001684                     	endif
  2871  001684                     	if	0	;tblptru may be non-zero
  2872  001684                     	endif
  2873  001684  0008               	tblrd		*
  2874  001686  50F5               	movf	tablat,w,c
  2875  001688  6E0A               	movwf	??_atoi^0,c
  2876  00168A  6A0B               	clrf	(??_atoi+1)^0,c
  2877                           
  2878                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2879                           ; Switch size 1, requested type "simple"
  2880                           ; Number of cases is 1, Range of values is 0 to 0
  2881                           ; switch strategies available:
  2882                           ; Name         Instructions Cycles
  2883                           ; simple_byte            4     3 (average)
  2884                           ;	Chosen strategy is simple_byte
  2885  00168C  500B               	movf	(??_atoi+1)^0,w,c
  2886  00168E  0A00               	xorlw	0	; case 0
  2887  001690  A4D8               	btfss	status,2,c
  2888  001692  D022               	goto	l1932
  2889                           
  2890                           ; BSR set to: 0
  2891                           ; Switch size 1, requested type "simple"
  2892                           ; Number of cases is 2, Range of values is 43 to 45
  2893                           ; switch strategies available:
  2894                           ; Name         Instructions Cycles
  2895                           ; simple_byte            7     4 (average)
  2896                           ;	Chosen strategy is simple_byte
  2897  001694  500A               	movf	??_atoi^0,w,c
  2898  001696  0A2B               	xorlw	43	; case 43
  2899  001698  B4D8               	btfsc	status,2,c
  2900  00169A  D7EE               	goto	l1924
  2901  00169C  0A06               	xorlw	6	; case 45
  2902  00169E  B4D8               	btfsc	status,2,c
  2903  0016A0  D7E7               	goto	l1922
  2904  0016A2  D01A               	goto	l1932
  2905  0016A4                     l1928:
  2906  0016A4  C015  F001         	movff	atoi@n,___wmul@multiplier
  2907  0016A8  C016  F002         	movff	atoi@n+1,___wmul@multiplier+1
  2908  0016AC  0E00               	movlw	0
  2909  0016AE  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  2910  0016B0  0E0A               	movlw	10
  2911  0016B2  6E03               	movwf	___wmul@multiplicand^0,c
  2912  0016B4  ECB2  F00E         	call	___wmul	;wreg free
  2913  0016B8  C008  FFF6         	movff	atoi@s,tblptrl
  2914  0016BC                     	if	1	;There is more than 1 active tblptr byte
  2915  0016BC  0E10               	movlw	high __smallconst
  2916  0016BE  6EF7               	movwf	tblptrh,c
  2917  0016C0                     	endif
  2918  0016C0                     	if	0	;tblptru may be non-zero
  2919  0016C0                     	endif
  2920  0016C0                     	if	0	;tblptru may be non-zero
  2921  0016C0                     	endif
  2922  0016C0  0008               	tblrd		*
  2923  0016C2  50F5               	movf	tablat,w,c
  2924  0016C4  5E01               	subwf	?___wmul^0,f,c
  2925  0016C6  0E00               	movlw	0
  2926  0016C8  5A02               	subwfb	(?___wmul+1)^0,f,c
  2927  0016CA  0E30               	movlw	48
  2928  0016CC  2401               	addwf	?___wmul^0,w,c
  2929  0016CE  6E15               	movwf	atoi@n^0,c
  2930  0016D0  0E00               	movlw	0
  2931  0016D2  2002               	addwfc	(?___wmul+1)^0,w,c
  2932  0016D4  6E16               	movwf	(atoi@n+1)^0,c
  2933  0016D6  D7D0               	goto	l1924
  2934  0016D8                     l1932:
  2935  0016D8  0ED0               	movlw	208
  2936  0016DA  6E0A               	movwf	??_atoi^0,c
  2937  0016DC  0EFF               	movlw	255
  2938  0016DE  6E0B               	movwf	(??_atoi+1)^0,c
  2939  0016E0  C008  FFF6         	movff	atoi@s,tblptrl
  2940  0016E4                     	if	1	;There is more than 1 active tblptr byte
  2941  0016E4  0E10               	movlw	high __smallconst
  2942  0016E6  6EF7               	movwf	tblptrh,c
  2943  0016E8                     	endif
  2944  0016E8                     	if	0	;tblptru may be non-zero
  2945  0016E8                     	endif
  2946  0016E8                     	if	0	;tblptru may be non-zero
  2947  0016E8                     	endif
  2948  0016E8  0008               	tblrd		*
  2949  0016EA  50F5               	movf	tablat,w,c
  2950  0016EC  6E0C               	movwf	(??_atoi+2)^0,c
  2951  0016EE  6A0D               	clrf	(??_atoi+3)^0,c
  2952  0016F0  500A               	movf	??_atoi^0,w,c
  2953  0016F2  260C               	addwf	(??_atoi+2)^0,f,c
  2954  0016F4  500B               	movf	(??_atoi+1)^0,w,c
  2955  0016F6  220D               	addwfc	(??_atoi+3)^0,f,c
  2956  0016F8  500D               	movf	(??_atoi+3)^0,w,c
  2957  0016FA  E106               	bnz	u1430
  2958  0016FC  0E0A               	movlw	10
  2959  0016FE  5C0C               	subwf	(??_atoi+2)^0,w,c
  2960  001700  B0D8               	btfsc	status,0,c
  2961  001702  D002               	goto	u1430
  2962  001704  0E01               	movlw	1
  2963  001706  D001               	goto	u1440
  2964  001708                     u1430:
  2965  001708  0E00               	movlw	0
  2966  00170A                     u1440:
  2967  00170A  6E12               	movwf	_atoi$1735^0,c
  2968  00170C  6A13               	clrf	(_atoi$1735+1)^0,c
  2969  00170E  5012               	movf	_atoi$1735^0,w,c
  2970  001710  1013               	iorwf	(_atoi$1735+1)^0,w,c
  2971  001712  A4D8               	btfss	status,2,c
  2972  001714  D7C7               	goto	l1928
  2973  001716  500E               	movf	atoi@neg^0,w,c
  2974  001718  100F               	iorwf	(atoi@neg+1)^0,w,c
  2975  00171A  A4D8               	btfss	status,2,c
  2976  00171C  D00D               	goto	l987
  2977  00171E  C015  F00A         	movff	atoi@n,??_atoi
  2978  001722  C016  F00B         	movff	atoi@n+1,??_atoi+1
  2979  001726  1E0A               	comf	??_atoi^0,f,c
  2980  001728  1E0B               	comf	(??_atoi+1)^0,f,c
  2981  00172A  4A0A               	infsnz	??_atoi^0,f,c
  2982  00172C  2A0B               	incf	(??_atoi+1)^0,f,c
  2983  00172E  C00A  F008         	movff	??_atoi,?_atoi
  2984  001732  C00B  F009         	movff	??_atoi+1,?_atoi+1
  2985  001736  0012               	return	
  2986  001738                     l987:
  2987  001738  C015  F008         	movff	atoi@n,?_atoi
  2988  00173C  C016  F009         	movff	atoi@n+1,?_atoi+1
  2989  001740  0012               	return		;funcret
  2990  001742                     __end_of_atoi:
  2991                           	opt callstack 0
  2992                           
  2993 ;; *************** function _isspace *****************
  2994 ;; Defined at:
  2995 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\isspace.c"
  2996 ;; Parameters:    Size  Location     Type
  2997 ;;  c               2    0[COMRAM] int 
  2998 ;; Auto vars:     Size  Location     Type
  2999 ;;		None
  3000 ;; Return value:  Size  Location     Type
  3001 ;;                  2    0[COMRAM] int 
  3002 ;; Registers used:
  3003 ;;		wreg, status,2, status,0
  3004 ;; Tracked objects:
  3005 ;;		On entry : 0/0
  3006 ;;		On exit  : 0/0
  3007 ;;		Unchanged: 0/0
  3008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3009 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3010 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3011 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3012 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3013 ;;Total ram usage:        7 bytes
  3014 ;; Hardware stack levels used:    1
  3015 ;; Hardware stack levels required when called:    1
  3016 ;; This function calls:
  3017 ;;		Nothing
  3018 ;; This function is called by:
  3019 ;;		_atoi
  3020 ;; This function uses a non-reentrant model
  3021 ;;
  3022                           
  3023                           	psect	text14
  3024  001C06                     __ptext14:
  3025                           	opt callstack 0
  3026  001C06                     _isspace:
  3027                           	opt callstack 25
  3028                           
  3029                           ;incstack = 0
  3030  001C06  0E01               	movlw	1
  3031  001C08  6E07               	movwf	_isspace$1751^0,c
  3032  001C0A  0E20               	movlw	32
  3033  001C0C  1801               	xorwf	isspace@c^0,w,c
  3034  001C0E  1002               	iorwf	(isspace@c+1)^0,w,c
  3035  001C10  B4D8               	btfsc	status,2,c
  3036  001C12  D014               	goto	l1838
  3037  001C14  0EF7               	movlw	247
  3038  001C16  6E03               	movwf	??_isspace^0,c
  3039  001C18  0EFF               	movlw	255
  3040  001C1A  6E04               	movwf	(??_isspace+1)^0,c
  3041  001C1C  C001  F005         	movff	isspace@c,??_isspace+2
  3042  001C20  C002  F006         	movff	isspace@c+1,??_isspace+3
  3043  001C24  5003               	movf	??_isspace^0,w,c
  3044  001C26  2605               	addwf	(??_isspace+2)^0,f,c
  3045  001C28  5004               	movf	(??_isspace+1)^0,w,c
  3046  001C2A  2206               	addwfc	(??_isspace+3)^0,f,c
  3047  001C2C  5006               	movf	(??_isspace+3)^0,w,c
  3048  001C2E  E104               	bnz	u1240
  3049  001C30  0E05               	movlw	5
  3050  001C32  5C05               	subwf	(??_isspace+2)^0,w,c
  3051  001C34  A0D8               	btfss	status,0,c
  3052  001C36  D002               	goto	l1838
  3053  001C38                     u1240:
  3054  001C38  0E00               	movlw	0
  3055  001C3A  6E07               	movwf	_isspace$1751^0,c
  3056  001C3C                     l1838:
  3057  001C3C  C007  F001         	movff	_isspace$1751,?_isspace
  3058  001C40  6A02               	clrf	(?_isspace+1)^0,c
  3059  001C42  0012               	return		;funcret
  3060  001C44                     __end_of_isspace:
  3061                           	opt callstack 0
  3062                           
  3063 ;; *************** function _isdigit *****************
  3064 ;; Defined at:
  3065 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\isdigit.c"
  3066 ;; Parameters:    Size  Location     Type
  3067 ;;  c               2    0[COMRAM] int 
  3068 ;; Auto vars:     Size  Location     Type
  3069 ;;		None
  3070 ;; Return value:  Size  Location     Type
  3071 ;;                  2    0[COMRAM] int 
  3072 ;; Registers used:
  3073 ;;		wreg, status,2, status,0
  3074 ;; Tracked objects:
  3075 ;;		On entry : 0/0
  3076 ;;		On exit  : 0/0
  3077 ;;		Unchanged: 0/0
  3078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3079 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3081 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3082 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3083 ;;Total ram usage:        6 bytes
  3084 ;; Hardware stack levels used:    1
  3085 ;; Hardware stack levels required when called:    1
  3086 ;; This function calls:
  3087 ;;		Nothing
  3088 ;; This function is called by:
  3089 ;;		_vfpfcnvrt
  3090 ;;		_atoi
  3091 ;; This function uses a non-reentrant model
  3092 ;;
  3093                           
  3094                           	psect	text15
  3095  001CDC                     __ptext15:
  3096                           	opt callstack 0
  3097  001CDC                     _isdigit:
  3098                           	opt callstack 26
  3099                           
  3100                           ;incstack = 0
  3101  001CDC  0ED0               	movlw	208
  3102  001CDE  6E03               	movwf	??_isdigit^0,c
  3103  001CE0  0EFF               	movlw	255
  3104  001CE2  6E04               	movwf	(??_isdigit+1)^0,c
  3105  001CE4  C001  F005         	movff	isdigit@c,??_isdigit+2
  3106  001CE8  C002  F006         	movff	isdigit@c+1,??_isdigit+3
  3107  001CEC  5003               	movf	??_isdigit^0,w,c
  3108  001CEE  2605               	addwf	(??_isdigit+2)^0,f,c
  3109  001CF0  5004               	movf	(??_isdigit+1)^0,w,c
  3110  001CF2  2206               	addwfc	(??_isdigit+3)^0,f,c
  3111  001CF4  5006               	movf	(??_isdigit+3)^0,w,c
  3112  001CF6  E106               	bnz	u1080
  3113  001CF8  0E0A               	movlw	10
  3114  001CFA  5C05               	subwf	(??_isdigit+2)^0,w,c
  3115  001CFC  B0D8               	btfsc	status,0,c
  3116  001CFE  D002               	goto	u1080
  3117  001D00  0E01               	movlw	1
  3118  001D02  D001               	goto	u1090
  3119  001D04                     u1080:
  3120  001D04  0E00               	movlw	0
  3121  001D06                     u1090:
  3122  001D06  6E01               	movwf	?_isdigit^0,c
  3123  001D08  6A02               	clrf	(?_isdigit+1)^0,c
  3124  001D0A  0012               	return		;funcret
  3125  001D0C                     __end_of_isdigit:
  3126                           	opt callstack 0
  3127                           
  3128 ;; *************** function ___wmul *****************
  3129 ;; Defined at:
  3130 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul16.c"
  3131 ;; Parameters:    Size  Location     Type
  3132 ;;  multiplier      2    0[COMRAM] unsigned int 
  3133 ;;  multiplicand    2    2[COMRAM] unsigned int 
  3134 ;; Auto vars:     Size  Location     Type
  3135 ;;  product         2    4[COMRAM] unsigned int 
  3136 ;; Return value:  Size  Location     Type
  3137 ;;                  2    0[COMRAM] unsigned int 
  3138 ;; Registers used:
  3139 ;;		wreg, status,2, status,0, prodl, prodh
  3140 ;; Tracked objects:
  3141 ;;		On entry : 0/0
  3142 ;;		On exit  : 0/0
  3143 ;;		Unchanged: 0/0
  3144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3145 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3146 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3148 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3149 ;;Total ram usage:        6 bytes
  3150 ;; Hardware stack levels used:    1
  3151 ;; Hardware stack levels required when called:    1
  3152 ;; This function calls:
  3153 ;;		Nothing
  3154 ;; This function is called by:
  3155 ;;		_atoi
  3156 ;; This function uses a non-reentrant model
  3157 ;;
  3158                           
  3159                           	psect	text16
  3160  001D64                     __ptext16:
  3161                           	opt callstack 0
  3162  001D64                     ___wmul:
  3163                           	opt callstack 25
  3164                           
  3165                           ;incstack = 0
  3166  001D64  5001               	movf	___wmul@multiplier^0,w,c
  3167  001D66  0203               	mulwf	___wmul@multiplicand^0,c
  3168  001D68  CFF3 F005          	movff	prodl,___wmul@product
  3169  001D6C  CFF4 F006          	movff	prodh,___wmul@product+1
  3170  001D70  5001               	movf	___wmul@multiplier^0,w,c
  3171  001D72  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  3172  001D74  50F3               	movf	243,w,c
  3173  001D76  2606               	addwf	(___wmul@product+1)^0,f,c
  3174  001D78  5002               	movf	(___wmul@multiplier+1)^0,w,c
  3175  001D7A  0203               	mulwf	___wmul@multiplicand^0,c
  3176  001D7C  50F3               	movf	243,w,c
  3177  001D7E  2606               	addwf	(___wmul@product+1)^0,f,c
  3178  001D80  C005  F001         	movff	___wmul@product,?___wmul
  3179  001D84  C006  F002         	movff	___wmul@product+1,?___wmul+1
  3180  001D88  0012               	return		;funcret
  3181  001D8A                     __end_of___wmul:
  3182                           	opt callstack 0
  3183                           
  3184 ;; *************** function _init_tmr1 *****************
  3185 ;; Defined at:
  3186 ;;		line 33 in file "bsl.c"
  3187 ;; Parameters:    Size  Location     Type
  3188 ;;		None
  3189 ;; Auto vars:     Size  Location     Type
  3190 ;;		None
  3191 ;; Return value:  Size  Location     Type
  3192 ;;                  1    wreg      void 
  3193 ;; Registers used:
  3194 ;;		wreg, status,2
  3195 ;; Tracked objects:
  3196 ;;		On entry : 0/F
  3197 ;;		On exit  : 0/0
  3198 ;;		Unchanged: 0/0
  3199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3200 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3201 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3202 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3203 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3204 ;;Total ram usage:        0 bytes
  3205 ;; Hardware stack levels used:    1
  3206 ;; Hardware stack levels required when called:    1
  3207 ;; This function calls:
  3208 ;;		Nothing
  3209 ;; This function is called by:
  3210 ;;		_main
  3211 ;; This function uses a non-reentrant model
  3212 ;;
  3213                           
  3214                           	psect	text17
  3215  001DBE                     __ptext17:
  3216                           	opt callstack 0
  3217  001DBE                     _init_tmr1:
  3218                           	opt callstack 29
  3219                           
  3220                           ;bsl.c: 35:     T1CONbits.TMR1CS = 0b00;
  3221                           
  3222                           ;incstack = 0
  3223  001DBE  0E3F               	movlw	-193
  3224  001DC0  16CD               	andwf	205,f,c	;volatile
  3225                           
  3226                           ;bsl.c: 36:     T1CONbits.T1CKPS = 0b11;
  3227  001DC2  0E30               	movlw	48
  3228  001DC4  12CD               	iorwf	205,f,c	;volatile
  3229                           
  3230                           ;bsl.c: 37:     TMR1IE = 1;
  3231  001DC6  809D               	bsf	3997,0,c	;volatile
  3232                           
  3233                           ;bsl.c: 38:     TMR1IF = 0;
  3234  001DC8  909E               	bcf	3998,0,c	;volatile
  3235  001DCA  0012               	return		;funcret
  3236  001DCC                     __end_of_init_tmr1:
  3237                           	opt callstack 0
  3238                           
  3239 ;; *************** function _init_gpio *****************
  3240 ;; Defined at:
  3241 ;;		line 3 in file "bsl.c"
  3242 ;; Parameters:    Size  Location     Type
  3243 ;;		None
  3244 ;; Auto vars:     Size  Location     Type
  3245 ;;		None
  3246 ;; Return value:  Size  Location     Type
  3247 ;;                  1    wreg      void 
  3248 ;; Registers used:
  3249 ;;		wreg, status,2
  3250 ;; Tracked objects:
  3251 ;;		On entry : 0/0
  3252 ;;		On exit  : 3F/F
  3253 ;;		Unchanged: 0/0
  3254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3256 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3258 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3259 ;;Total ram usage:        0 bytes
  3260 ;; Hardware stack levels used:    1
  3261 ;; Hardware stack levels required when called:    1
  3262 ;; This function calls:
  3263 ;;		Nothing
  3264 ;; This function is called by:
  3265 ;;		_main
  3266 ;; This function uses a non-reentrant model
  3267 ;;
  3268                           
  3269                           	psect	text18
  3270  001D38                     __ptext18:
  3271                           	opt callstack 0
  3272  001D38                     _init_gpio:
  3273                           	opt callstack 29
  3274                           
  3275                           ;bsl.c: 6:     ANSELA = 0x00;
  3276                           
  3277                           ;incstack = 0
  3278  001D38  0E00               	movlw	0
  3279  001D3A  010F               	movlb	15	; () banked
  3280  001D3C  6F38               	movwf	56,b	;volatile
  3281                           
  3282                           ;bsl.c: 7:     ANSELC = 0x00;
  3283  001D3E  0E00               	movlw	0
  3284  001D40  6F3A               	movwf	58,b	;volatile
  3285                           
  3286                           ; BSR set to: 15
  3287                           ;bsl.c: 10:     TRISDbits.TRISD2 = 0;
  3288  001D42  9495               	bcf	149,2,c	;volatile
  3289                           
  3290                           ; BSR set to: 15
  3291                           ;bsl.c: 11:     TRISDbits.TRISD3 = 0;
  3292  001D44  9695               	bcf	149,3,c	;volatile
  3293                           
  3294                           ; BSR set to: 15
  3295                           ;bsl.c: 12:     TRISCbits.TRISC4 = 0;
  3296  001D46  9894               	bcf	148,4,c	;volatile
  3297                           
  3298                           ; BSR set to: 15
  3299                           ;bsl.c: 13:     TRISDbits.TRISD4 = 0;
  3300  001D48  9895               	bcf	149,4,c	;volatile
  3301                           
  3302                           ; BSR set to: 15
  3303                           ;bsl.c: 14:     TRISDbits.TRISD5 = 0;
  3304  001D4A  9A95               	bcf	149,5,c	;volatile
  3305                           
  3306                           ; BSR set to: 15
  3307                           ;bsl.c: 15:     TRISDbits.TRISD6 = 0;
  3308  001D4C  9C95               	bcf	149,6,c	;volatile
  3309                           
  3310                           ; BSR set to: 15
  3311                           ;bsl.c: 18:     TRISAbits.TRISA4 = 1;
  3312  001D4E  8892               	bsf	146,4,c	;volatile
  3313                           
  3314                           ; BSR set to: 15
  3315                           ;bsl.c: 19:     TRISAbits.TRISA3 = 1;
  3316  001D50  8692               	bsf	146,3,c	;volatile
  3317                           
  3318                           ; BSR set to: 15
  3319                           ;bsl.c: 20:     TRISAbits.TRISA2 = 1;
  3320  001D52  8492               	bsf	146,2,c	;volatile
  3321                           
  3322                           ; BSR set to: 15
  3323                           ;bsl.c: 21:     TRISCbits.TRISC0 = 1;
  3324  001D54  8094               	bsf	148,0,c	;volatile
  3325                           
  3326                           ; BSR set to: 15
  3327                           ;bsl.c: 24:     LATDbits.LATD2 = 1;
  3328  001D56  848C               	bsf	140,2,c	;volatile
  3329                           
  3330                           ; BSR set to: 15
  3331                           ;bsl.c: 25:     LATDbits.LATD3 = 1;
  3332  001D58  868C               	bsf	140,3,c	;volatile
  3333                           
  3334                           ; BSR set to: 15
  3335                           ;bsl.c: 26:     LATCbits.LATC4 = 1;
  3336  001D5A  888B               	bsf	139,4,c	;volatile
  3337                           
  3338                           ; BSR set to: 15
  3339                           ;bsl.c: 27:     LATDbits.LATD4 = 1;
  3340  001D5C  888C               	bsf	140,4,c	;volatile
  3341                           
  3342                           ; BSR set to: 15
  3343                           ;bsl.c: 28:     LATDbits.LATD5 = 1;
  3344  001D5E  8A8C               	bsf	140,5,c	;volatile
  3345                           
  3346                           ; BSR set to: 15
  3347                           ;bsl.c: 29:     LATDbits.LATD6 = 1;
  3348  001D60  8C8C               	bsf	140,6,c	;volatile
  3349                           
  3350                           ; BSR set to: 15
  3351  001D62  0012               	return		;funcret
  3352  001D64                     __end_of_init_gpio:
  3353                           	opt callstack 0
  3354                           
  3355 ;; *************** function _drive_leds *****************
  3356 ;; Defined at:
  3357 ;;		line 41 in file "bsl.c"
  3358 ;; Parameters:    Size  Location     Type
  3359 ;;  in              1    wreg     unsigned char 
  3360 ;; Auto vars:     Size  Location     Type
  3361 ;;  in              1    0[COMRAM] unsigned char 
  3362 ;; Return value:  Size  Location     Type
  3363 ;;                  1    wreg      void 
  3364 ;; Registers used:
  3365 ;;		wreg, status,2, status,0
  3366 ;; Tracked objects:
  3367 ;;		On entry : 3F/0
  3368 ;;		On exit  : 0/0
  3369 ;;		Unchanged: 0/0
  3370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3372 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3373 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3374 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3375 ;;Total ram usage:        1 bytes
  3376 ;; Hardware stack levels used:    1
  3377 ;; Hardware stack levels required when called:    1
  3378 ;; This function calls:
  3379 ;;		Nothing
  3380 ;; This function is called by:
  3381 ;;		_main
  3382 ;; This function uses a non-reentrant model
  3383 ;;
  3384                           
  3385                           	psect	text19
  3386  001BC4                     __ptext19:
  3387                           	opt callstack 0
  3388  001BC4                     _drive_leds:
  3389                           	opt callstack 29
  3390                           
  3391                           ; BSR set to: 15
  3392                           ;incstack = 0
  3393                           ;drive_leds@in stored from wreg
  3394  001BC4  6E01               	movwf	drive_leds@in^0,c
  3395                           
  3396                           ;bsl.c: 43:     in = ~in;
  3397  001BC6  1E01               	comf	drive_leds@in^0,f,c
  3398                           
  3399                           ;bsl.c: 44:     LATD2 = in & 1;
  3400  001BC8  A001               	btfss	drive_leds@in^0,0,c
  3401  001BCA  D002               	goto	u1690
  3402  001BCC  848C               	bsf	3980,2,c	;volatile
  3403  001BCE  D001               	goto	u1705
  3404  001BD0                     u1690:
  3405  001BD0  948C               	bcf	3980,2,c	;volatile
  3406  001BD2                     u1705:
  3407                           
  3408                           ;bsl.c: 45:     LATD3 = in & 2 ? 1 : 0;
  3409  001BD2  A201               	btfss	drive_leds@in^0,1,c
  3410  001BD4  D002               	goto	u1710
  3411  001BD6  868C               	bsf	3980,3,c	;volatile
  3412  001BD8  D001               	goto	u1725
  3413  001BDA                     u1710:
  3414  001BDA  968C               	bcf	3980,3,c	;volatile
  3415  001BDC                     u1725:
  3416                           
  3417                           ;bsl.c: 46:     LATC4 = in & 4 ? 1 : 0;
  3418  001BDC  A401               	btfss	drive_leds@in^0,2,c
  3419  001BDE  D002               	goto	u1730
  3420  001BE0  888B               	bsf	3979,4,c	;volatile
  3421  001BE2  D001               	goto	u1745
  3422  001BE4                     u1730:
  3423  001BE4  988B               	bcf	3979,4,c	;volatile
  3424  001BE6                     u1745:
  3425                           
  3426                           ;bsl.c: 47:     LATD4 = in & 8 ? 1 : 0;
  3427  001BE6  A601               	btfss	drive_leds@in^0,3,c
  3428  001BE8  D002               	goto	u1750
  3429  001BEA  888C               	bsf	3980,4,c	;volatile
  3430  001BEC  D001               	goto	u1765
  3431  001BEE                     u1750:
  3432  001BEE  988C               	bcf	3980,4,c	;volatile
  3433  001BF0                     u1765:
  3434                           
  3435                           ;bsl.c: 48:     LATD5 = in & 16 ? 1 : 0;
  3436  001BF0  A801               	btfss	drive_leds@in^0,4,c
  3437  001BF2  D002               	goto	u1770
  3438  001BF4  8A8C               	bsf	3980,5,c	;volatile
  3439  001BF6  D001               	goto	u1785
  3440  001BF8                     u1770:
  3441  001BF8  9A8C               	bcf	3980,5,c	;volatile
  3442  001BFA                     u1785:
  3443                           
  3444                           ;bsl.c: 49:     LATD6 = in & 32 ? 1 : 0;
  3445  001BFA  AA01               	btfss	drive_leds@in^0,5,c
  3446  001BFC  D002               	goto	u1790
  3447  001BFE  8C8C               	bsf	3980,6,c	;volatile
  3448  001C00  0012               	return	
  3449  001C02                     u1790:
  3450  001C02  9C8C               	bcf	3980,6,c	;volatile
  3451  001C04  0012               	return		;funcret
  3452  001C06                     __end_of_drive_leds:
  3453                           	opt callstack 0
  3454                           
  3455 ;; *************** function _LCD_ShowString *****************
  3456 ;; Defined at:
  3457 ;;		line 58 in file "lcd.c"
  3458 ;; Parameters:    Size  Location     Type
  3459 ;;  lineNum         1    wreg     unsigned char 
  3460 ;;  textData        2    1[COMRAM] PTR unsigned char 
  3461 ;;		 -> main@text(17), STR_1(15), 
  3462 ;; Auto vars:     Size  Location     Type
  3463 ;;  lineNum         1    5[COMRAM] unsigned char 
  3464 ;;  i               1    6[COMRAM] unsigned char 
  3465 ;; Return value:  Size  Location     Type
  3466 ;;                  1    wreg      void 
  3467 ;; Registers used:
  3468 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3469 ;; Tracked objects:
  3470 ;;		On entry : 3F/0
  3471 ;;		On exit  : 0/0
  3472 ;;		Unchanged: 0/0
  3473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3474 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3475 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3476 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3477 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3478 ;;Total ram usage:        6 bytes
  3479 ;; Hardware stack levels used:    1
  3480 ;; Hardware stack levels required when called:    2
  3481 ;; This function calls:
  3482 ;;		_LCD_Send
  3483 ;; This function is called by:
  3484 ;;		_main
  3485 ;; This function uses a non-reentrant model
  3486 ;;
  3487                           
  3488                           	psect	text20
  3489  001B02                     __ptext20:
  3490                           	opt callstack 0
  3491  001B02                     _LCD_ShowString:
  3492                           	opt callstack 28
  3493                           
  3494                           ;incstack = 0
  3495                           ;LCD_ShowString@lineNum stored from wreg
  3496  001B02  6E06               	movwf	LCD_ShowString@lineNum^0,c
  3497                           
  3498                           ;lcd.c: 63:     SSP2CON2bits.SEN = 1;
  3499  001B04  806B               	bsf	107,0,c	;volatile
  3500  001B06                     l107:
  3501  001B06  B06B               	btfsc	107,0,c	;volatile
  3502  001B08  D7FE               	goto	l107
  3503                           
  3504                           ;lcd.c: 65:     SSP2IF = 0;
  3505  001B0A  9EA4               	bcf	4004,7,c	;volatile
  3506                           
  3507                           ;lcd.c: 67:     LCD_Send(0x7c);
  3508  001B0C  0E7C               	movlw	124
  3509  001B0E  ECD6  F00E         	call	_LCD_Send
  3510                           
  3511                           ;lcd.c: 69:     LCD_Send(0x80);
  3512  001B12  0E80               	movlw	128
  3513  001B14  ECD6  F00E         	call	_LCD_Send
  3514                           
  3515                           ;lcd.c: 71:     if(lineNum == 1){
  3516  001B18  0406               	decf	LCD_ShowString@lineNum^0,w,c
  3517  001B1A  A4D8               	btfss	status,2,c
  3518  001B1C  D004               	goto	l2124
  3519                           
  3520                           ;lcd.c: 72:         LCD_Send(0x80);
  3521  001B1E  0E80               	movlw	128
  3522  001B20  ECD6  F00E         	call	_LCD_Send
  3523                           
  3524                           ;lcd.c: 73:     }
  3525  001B24  D007               	goto	l111
  3526  001B26                     l2124:
  3527  001B26  0E02               	movlw	2
  3528  001B28  1806               	xorwf	LCD_ShowString@lineNum^0,w,c
  3529  001B2A  A4D8               	btfss	status,2,c
  3530  001B2C  D003               	goto	l111
  3531                           
  3532                           ;lcd.c: 75:         LCD_Send(0xC0);
  3533  001B2E  0EC0               	movlw	192
  3534  001B30  ECD6  F00E         	call	_LCD_Send
  3535  001B34                     l111:
  3536                           
  3537                           ;lcd.c: 78:     LCD_Send(0x40);
  3538  001B34  0E40               	movlw	64
  3539  001B36  ECD6  F00E         	call	_LCD_Send
  3540                           
  3541                           ;lcd.c: 80:     for (i = 0; i<16; i++){
  3542  001B3A  0E00               	movlw	0
  3543  001B3C  6E07               	movwf	LCD_ShowString@i^0,c
  3544  001B3E                     l2134:
  3545                           
  3546                           ;lcd.c: 81:         LCD_Send(textData[i]);
  3547  001B3E  5007               	movf	LCD_ShowString@i^0,w,c
  3548  001B40  2402               	addwf	LCD_ShowString@textData^0,w,c
  3549  001B42  6E04               	movwf	??_LCD_ShowString^0,c
  3550  001B44  0E00               	movlw	0
  3551  001B46  2003               	addwfc	(LCD_ShowString@textData+1)^0,w,c
  3552  001B48  6E05               	movwf	(??_LCD_ShowString+1)^0,c
  3553  001B4A  C004  FFF6         	movff	??_LCD_ShowString,tblptrl
  3554  001B4E  C005  FFF7         	movff	??_LCD_ShowString+1,tblptrh
  3555  001B52  0E00               	movlw	low (__smallconst shr (0+16))
  3556  001B54  6EF8               	movwf	tblptru,c
  3557  001B56  0E0F               	movlw	(high __ramtop+-1)
  3558  001B58  64F7               	cpfsgt	tblptrh,c
  3559  001B5A  D003               	bra	u1667
  3560  001B5C  0008               	tblrd		*
  3561  001B5E  50F5               	movf	tablat,w,c
  3562  001B60  D005               	bra	u1660
  3563  001B62                     u1667:
  3564  001B62  CFF6 FFE1          	movff	tblptrl,fsr1l
  3565  001B66  CFF7 FFE2          	movff	tblptrh,fsr1h
  3566  001B6A  50E7               	movf	indf1,w,c
  3567  001B6C                     u1660:
  3568  001B6C  ECD6  F00E         	call	_LCD_Send
  3569                           
  3570                           ;lcd.c: 82:     }
  3571  001B70  2A07               	incf	LCD_ShowString@i^0,f,c
  3572  001B72  0E0F               	movlw	15
  3573  001B74  6407               	cpfsgt	LCD_ShowString@i^0,c
  3574  001B76  D7E3               	goto	l2134
  3575                           
  3576                           ;lcd.c: 84:     SSP2CON2bits.PEN = 1;
  3577  001B78  846B               	bsf	107,2,c	;volatile
  3578  001B7A                     l115:
  3579  001B7A  A46B               	btfss	107,2,c	;volatile
  3580  001B7C  0012               	return	
  3581  001B7E  D7FD               	goto	l115
  3582  001B80                     __end_of_LCD_ShowString:
  3583                           	opt callstack 0
  3584                           
  3585 ;; *************** function _LCD_Init *****************
  3586 ;; Defined at:
  3587 ;;		line 6 in file "lcd.c"
  3588 ;; Parameters:    Size  Location     Type
  3589 ;;		None
  3590 ;; Auto vars:     Size  Location     Type
  3591 ;;		None
  3592 ;; Return value:  Size  Location     Type
  3593 ;;                  1    wreg      void 
  3594 ;; Registers used:
  3595 ;;		wreg, status,2, cstack
  3596 ;; Tracked objects:
  3597 ;;		On entry : 3F/F
  3598 ;;		On exit  : 0/0
  3599 ;;		Unchanged: 0/0
  3600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3602 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3603 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3604 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3605 ;;Total ram usage:        1 bytes
  3606 ;; Hardware stack levels used:    1
  3607 ;; Hardware stack levels required when called:    2
  3608 ;; This function calls:
  3609 ;;		_LCD_Send
  3610 ;; This function is called by:
  3611 ;;		_main
  3612 ;; This function uses a non-reentrant model
  3613 ;;
  3614                           
  3615                           	psect	text21
  3616  00193C                     __ptext21:
  3617                           	opt callstack 0
  3618  00193C                     _LCD_Init:
  3619                           	opt callstack 28
  3620                           
  3621                           ; BSR set to: 15
  3622                           ;lcd.c: 8:     ANSELDbits.ANSD0 = 0;
  3623                           
  3624                           ;incstack = 0
  3625  00193C  913B               	bcf	59,0,b	;volatile
  3626                           
  3627                           ;lcd.c: 9:     ANSELDbits.ANSD1 = 0;
  3628  00193E  933B               	bcf	59,1,b	;volatile
  3629                           
  3630                           ;lcd.c: 11:     TRISDbits.TRISD0 = 1;
  3631  001940  8095               	bsf	149,0,c	;volatile
  3632                           
  3633                           ;lcd.c: 12:     TRISDbits.TRISD1 = 1;
  3634  001942  8295               	bsf	149,1,c	;volatile
  3635                           
  3636                           ;lcd.c: 13:     TRISAbits.TRISA0 = 0;
  3637  001944  9092               	bcf	146,0,c	;volatile
  3638                           
  3639                           ;lcd.c: 14:     LATAbits.LATA0 = 1;
  3640  001946  8089               	bsf	137,0,c	;volatile
  3641                           
  3642                           ; BSR set to: 15
  3643                           ;lcd.c: 17:     SSP2CON1bits.SSPM = 0b1000;
  3644  001948  506C               	movf	108,w,c	;volatile
  3645  00194A  0BF0               	andlw	-16
  3646  00194C  0908               	iorlw	8
  3647  00194E  6E6C               	movwf	108,c	;volatile
  3648                           
  3649                           ;lcd.c: 18:     SSP2ADD = 19;
  3650  001950  0E13               	movlw	19
  3651  001952  6E6E               	movwf	110,c	;volatile
  3652                           
  3653                           ; BSR set to: 15
  3654                           ;lcd.c: 19:     SSP2CON1bits.SSPEN = 1;
  3655  001954  8A6C               	bsf	108,5,c	;volatile
  3656                           
  3657                           ; BSR set to: 15
  3658                           ;lcd.c: 21:     _delay((unsigned long)((5)*(32E6/4000.0)));
  3659  001956  0E34               	movlw	52
  3660  001958  6E02               	movwf	??_LCD_Init^0,c
  3661  00195A  0EF2               	movlw	242
  3662  00195C                     u1937:
  3663  00195C  2EE8               	decfsz	wreg,f,c
  3664  00195E  D7FE               	bra	u1937
  3665  001960  2E02               	decfsz	??_LCD_Init^0,f,c
  3666  001962  D7FC               	bra	u1937
  3667                           
  3668                           ;lcd.c: 23:     SSP2CON2bits.SEN = 1;
  3669  001964  806B               	bsf	107,0,c	;volatile
  3670  001966                     l98:
  3671  001966  B06B               	btfsc	107,0,c	;volatile
  3672  001968  D7FE               	goto	l98
  3673                           
  3674                           ;lcd.c: 25:     SSP2IF = 0;
  3675  00196A  9EA4               	bcf	4004,7,c	;volatile
  3676                           
  3677                           ;lcd.c: 30:     LCD_Send(0x7C);
  3678  00196C  0E7C               	movlw	124
  3679  00196E  ECD6  F00E         	call	_LCD_Send
  3680                           
  3681                           ;lcd.c: 31:     LCD_Send(0x80);
  3682  001972  0E80               	movlw	128
  3683  001974  ECD6  F00E         	call	_LCD_Send
  3684                           
  3685                           ;lcd.c: 32:     LCD_Send(0x38);
  3686  001978  0E38               	movlw	56
  3687  00197A  ECD6  F00E         	call	_LCD_Send
  3688                           
  3689                           ;lcd.c: 33:     LCD_Send(0x80);
  3690  00197E  0E80               	movlw	128
  3691  001980  ECD6  F00E         	call	_LCD_Send
  3692                           
  3693                           ;lcd.c: 34:     LCD_Send(0x39);
  3694  001984  0E39               	movlw	57
  3695  001986  ECD6  F00E         	call	_LCD_Send
  3696                           
  3697                           ;lcd.c: 35:     LCD_Send(0x80);
  3698  00198A  0E80               	movlw	128
  3699  00198C  ECD6  F00E         	call	_LCD_Send
  3700                           
  3701                           ;lcd.c: 36:     LCD_Send(0x17);
  3702  001990  0E17               	movlw	23
  3703  001992  ECD6  F00E         	call	_LCD_Send
  3704                           
  3705                           ;lcd.c: 37:     LCD_Send(0x80);
  3706  001996  0E80               	movlw	128
  3707  001998  ECD6  F00E         	call	_LCD_Send
  3708                           
  3709                           ;lcd.c: 38:     LCD_Send(0x7A);
  3710  00199C  0E7A               	movlw	122
  3711  00199E  ECD6  F00E         	call	_LCD_Send
  3712                           
  3713                           ;lcd.c: 39:     LCD_Send(0x80);
  3714  0019A2  0E80               	movlw	128
  3715  0019A4  ECD6  F00E         	call	_LCD_Send
  3716                           
  3717                           ;lcd.c: 40:     LCD_Send(0x5E);
  3718  0019A8  0E5E               	movlw	94
  3719  0019AA  ECD6  F00E         	call	_LCD_Send
  3720                           
  3721                           ;lcd.c: 41:     LCD_Send(0x80);
  3722  0019AE  0E80               	movlw	128
  3723  0019B0  ECD6  F00E         	call	_LCD_Send
  3724                           
  3725                           ;lcd.c: 42:     LCD_Send(0x6B);
  3726  0019B4  0E6B               	movlw	107
  3727  0019B6  ECD6  F00E         	call	_LCD_Send
  3728                           
  3729                           ;lcd.c: 43:     LCD_Send(0x80);
  3730  0019BA  0E80               	movlw	128
  3731  0019BC  ECD6  F00E         	call	_LCD_Send
  3732                           
  3733                           ;lcd.c: 44:     LCD_Send(0x0C);
  3734  0019C0  0E0C               	movlw	12
  3735  0019C2  ECD6  F00E         	call	_LCD_Send
  3736                           
  3737                           ;lcd.c: 45:     LCD_Send(0x80);
  3738  0019C6  0E80               	movlw	128
  3739  0019C8  ECD6  F00E         	call	_LCD_Send
  3740                           
  3741                           ;lcd.c: 46:     LCD_Send(0x01);
  3742  0019CC  0E01               	movlw	1
  3743  0019CE  ECD6  F00E         	call	_LCD_Send
  3744                           
  3745                           ;lcd.c: 47:     LCD_Send(0x80);
  3746  0019D2  0E80               	movlw	128
  3747  0019D4  ECD6  F00E         	call	_LCD_Send
  3748                           
  3749                           ;lcd.c: 48:     LCD_Send(0x06);
  3750  0019D8  0E06               	movlw	6
  3751  0019DA  ECD6  F00E         	call	_LCD_Send
  3752                           
  3753                           ;lcd.c: 49:     LCD_Send(0x80);
  3754  0019DE  0E80               	movlw	128
  3755  0019E0  ECD6  F00E         	call	_LCD_Send
  3756                           
  3757                           ;lcd.c: 50:     LCD_Send(0x02);
  3758  0019E4  0E02               	movlw	2
  3759  0019E6  ECD6  F00E         	call	_LCD_Send
  3760                           
  3761                           ;lcd.c: 52:     SSP2CON2bits.PEN = 1;
  3762  0019EA  846B               	bsf	107,2,c	;volatile
  3763  0019EC                     l101:
  3764  0019EC  B46B               	btfsc	107,2,c	;volatile
  3765  0019EE  D7FE               	goto	l101
  3766                           
  3767                           ;lcd.c: 55:     _delay((unsigned long)((5)*(32E6/4000.0)));
  3768  0019F0  0E34               	movlw	52
  3769  0019F2  6E02               	movwf	??_LCD_Init^0,c
  3770  0019F4  0EF2               	movlw	242
  3771  0019F6                     u1947:
  3772  0019F6  2EE8               	decfsz	wreg,f,c
  3773  0019F8  D7FE               	bra	u1947
  3774  0019FA  2E02               	decfsz	??_LCD_Init^0,f,c
  3775  0019FC  D7FC               	bra	u1947
  3776  0019FE  0012               	return		;funcret
  3777  001A00                     __end_of_LCD_Init:
  3778                           	opt callstack 0
  3779                           
  3780 ;; *************** function _LCD_Send *****************
  3781 ;; Defined at:
  3782 ;;		line 88 in file "lcd.c"
  3783 ;; Parameters:    Size  Location     Type
  3784 ;;  data            1    wreg     unsigned char 
  3785 ;; Auto vars:     Size  Location     Type
  3786 ;;  data            1    0[COMRAM] unsigned char 
  3787 ;; Return value:  Size  Location     Type
  3788 ;;                  1    wreg      void 
  3789 ;; Registers used:
  3790 ;;		wreg
  3791 ;; Tracked objects:
  3792 ;;		On entry : 0/0
  3793 ;;		On exit  : 0/0
  3794 ;;		Unchanged: 0/0
  3795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3797 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3799 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3800 ;;Total ram usage:        1 bytes
  3801 ;; Hardware stack levels used:    1
  3802 ;; Hardware stack levels required when called:    1
  3803 ;; This function calls:
  3804 ;;		Nothing
  3805 ;; This function is called by:
  3806 ;;		_LCD_Init
  3807 ;;		_LCD_ShowString
  3808 ;; This function uses a non-reentrant model
  3809 ;;
  3810                           
  3811                           	psect	text22
  3812  001DAC                     __ptext22:
  3813                           	opt callstack 0
  3814  001DAC                     _LCD_Send:
  3815                           	opt callstack 28
  3816                           
  3817                           ;incstack = 0
  3818                           ;LCD_Send@data stored from wreg
  3819  001DAC  6E01               	movwf	LCD_Send@data^0,c
  3820                           
  3821                           ;lcd.c: 90:     SSP2BUF = data;
  3822  001DAE  C001  FF6F         	movff	LCD_Send@data,3951	;volatile
  3823  001DB2                     l121:
  3824  001DB2  B06D               	btfsc	109,0,c	;volatile
  3825  001DB4  D7FE               	goto	l121
  3826  001DB6                     u1580:
  3827  001DB6  AEA4               	btfss	4004,7,c	;volatile
  3828  001DB8  D7FE               	goto	u1580
  3829                           
  3830                           ;lcd.c: 93:     SSP2IF = 0;
  3831  001DBA  9EA4               	bcf	4004,7,c	;volatile
  3832  001DBC  0012               	return		;funcret
  3833  001DBE                     __end_of_LCD_Send:
  3834                           	opt callstack 0
  3835                           
  3836 ;; *************** function _ISR *****************
  3837 ;; Defined at:
  3838 ;;		line 29 in file "main.c"
  3839 ;; Parameters:    Size  Location     Type
  3840 ;;		None
  3841 ;; Auto vars:     Size  Location     Type
  3842 ;;		None
  3843 ;; Return value:  Size  Location     Type
  3844 ;;                  1    wreg      void 
  3845 ;; Registers used:
  3846 ;;		wreg, status,2, status,0
  3847 ;; Tracked objects:
  3848 ;;		On entry : 0/0
  3849 ;;		On exit  : 0/0
  3850 ;;		Unchanged: 0/0
  3851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3853 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3855 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3856 ;;Total ram usage:        0 bytes
  3857 ;; Hardware stack levels used:    1
  3858 ;; This function calls:
  3859 ;;		Nothing
  3860 ;; This function is called by:
  3861 ;;		Interrupt level 2
  3862 ;; This function uses a non-reentrant model
  3863 ;;
  3864                           
  3865                           	psect	intcode
  3866  000008                     __pintcode:
  3867                           	opt callstack 0
  3868  000008                     _ISR:
  3869                           	opt callstack 22
  3870                           
  3871                           ;incstack = 0
  3872  000008  825F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3873                           
  3874                           ;main.c: 30:     volatile static uint8_t start,;main.c: 31:                             
      +                          pause,;main.c: 32:                             reset;;main.c: 35:     if (TMR1IE && TMR1
      +                          IF){
  3875  00000A  B09D               	btfsc	3997,0,c	;volatile
  3876  00000C  A09E               	btfss	3998,0,c	;volatile
  3877  00000E  D02A               	goto	i2l53
  3878                           
  3879                           ;main.c: 36:         if (PORTCbits.RC0){
  3880  000010  A082               	btfss	130,0,c	;volatile
  3881  000012  D008               	goto	i2l2178
  3882                           
  3883                           ;main.c: 37:            start++;
  3884  000014  0100               	movlb	0	; () banked
  3885  000016  2B6A               	incf	ISR@start& (0+255),f,b	;volatile
  3886                           
  3887                           ; BSR set to: 0
  3888                           ;main.c: 38:            if (start>5) g_state=2;
  3889  000018  0E05               	movlw	5
  3890  00001A  656A               	cpfsgt	ISR@start& (0+255),b	;volatile
  3891  00001C  D006               	goto	i2l2180
  3892                           
  3893                           ; BSR set to: 0
  3894  00001E  0E02               	movlw	2
  3895  000020  6FA9               	movwf	_g_state& (0+255),b	;volatile
  3896  000022  D003               	goto	i2l2180
  3897  000024                     i2l2178:
  3898                           
  3899                           ;main.c: 41:             start = 0;
  3900  000024  0E00               	movlw	0
  3901  000026  0100               	movlb	0	; () banked
  3902  000028  6F6A               	movwf	ISR@start& (0+255),b	;volatile
  3903  00002A                     i2l2180:
  3904                           
  3905                           ; BSR set to: 0
  3906                           ;main.c: 44:         if (PORTAbits.RA4){
  3907  00002A  A880               	btfss	128,4,c	;volatile
  3908  00002C  D007               	goto	i2l2188
  3909                           
  3910                           ; BSR set to: 0
  3911                           ;main.c: 45:            pause++;
  3912  00002E  2B69               	incf	ISR@pause& (0+255),f,b	;volatile
  3913                           
  3914                           ; BSR set to: 0
  3915                           ;main.c: 46:            if (pause>5) g_state=1;
  3916  000030  0E05               	movlw	5
  3917  000032  6569               	cpfsgt	ISR@pause& (0+255),b	;volatile
  3918  000034  D005               	goto	i2l2190
  3919                           
  3920                           ; BSR set to: 0
  3921  000036  0E01               	movlw	1
  3922  000038  6FA9               	movwf	_g_state& (0+255),b	;volatile
  3923  00003A  D002               	goto	i2l2190
  3924  00003C                     i2l2188:
  3925                           
  3926                           ; BSR set to: 0
  3927                           ;main.c: 49:             pause = 0;
  3928  00003C  0E00               	movlw	0
  3929  00003E  6F69               	movwf	ISR@pause& (0+255),b	;volatile
  3930  000040                     i2l2190:
  3931                           
  3932                           ; BSR set to: 0
  3933                           ;main.c: 52:         if (PORTAbits.RA3){
  3934  000040  A680               	btfss	128,3,c	;volatile
  3935  000042  D007               	goto	i2l2198
  3936                           
  3937                           ; BSR set to: 0
  3938                           ;main.c: 53:            reset++;
  3939  000044  2B68               	incf	ISR@reset& (0+255),f,b	;volatile
  3940                           
  3941                           ; BSR set to: 0
  3942                           ;main.c: 54:            if (reset>5) g_state=3;
  3943  000046  0E05               	movlw	5
  3944  000048  6568               	cpfsgt	ISR@reset& (0+255),b	;volatile
  3945  00004A  D005               	goto	i2l52
  3946                           
  3947                           ; BSR set to: 0
  3948  00004C  0E03               	movlw	3
  3949  00004E  6FA9               	movwf	_g_state& (0+255),b	;volatile
  3950  000050  D002               	goto	i2l52
  3951  000052                     i2l2198:
  3952                           
  3953                           ; BSR set to: 0
  3954                           ;main.c: 57:             reset = 0;
  3955  000052  0E00               	movlw	0
  3956  000054  6F68               	movwf	ISR@reset& (0+255),b	;volatile
  3957  000056                     i2l52:
  3958                           
  3959                           ; BSR set to: 0
  3960                           ;main.c: 60:         g_timer_flag = 1;
  3961  000056  0E01               	movlw	1
  3962  000058  6F6B               	movwf	_g_timer_flag& (0+255),b	;volatile
  3963                           
  3964                           ;main.c: 61:         TMR1 = (0xffff - 10000);
  3965  00005A  0ED8               	movlw	216
  3966  00005C  6ECF               	movwf	207,c	;volatile
  3967  00005E  0EEF               	movlw	239
  3968  000060  6ECE               	movwf	206,c	;volatile
  3969                           
  3970                           ; BSR set to: 0
  3971                           ;main.c: 62:         TMR1IF = 0;
  3972  000062  909E               	bcf	3998,0,c	;volatile
  3973  000064                     i2l53:
  3974  000064  925F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3975  000066  0011               	retfie		f
  3976  000068                     __end_of_ISR:
  3977                           	opt callstack 0
  3978                           
  3979                           	psect	rparam
  3980  0000                     
  3981                           	psect	temp
  3982  00005F                     btemp:
  3983                           	opt callstack 0
  3984  00005F                     	ds	1
  3985  0000                     int$flags	set	btemp
  3986  0000                     wtemp8	set	btemp+1
  3987  0000                     ttemp5	set	btemp+1
  3988  0000                     ttemp6	set	btemp+4
  3989  0000                     ttemp7	set	btemp+8
  3990                           tosu	equ	0xFFF
  3991                           tosh	equ	0xFFE
  3992                           tosl	equ	0xFFD
  3993                           stkptr	equ	0xFFC
  3994                           pclatu	equ	0xFFB
  3995                           pclath	equ	0xFFA
  3996                           pcl	equ	0xFF9
  3997                           tblptru	equ	0xFF8
  3998                           tblptrh	equ	0xFF7
  3999                           tblptrl	equ	0xFF6
  4000                           tablat	equ	0xFF5
  4001                           prodh	equ	0xFF4
  4002                           prodl	equ	0xFF3
  4003                           indf0	equ	0xFEF
  4004                           postinc0	equ	0xFEE
  4005                           postdec0	equ	0xFED
  4006                           preinc0	equ	0xFEC
  4007                           plusw0	equ	0xFEB
  4008                           fsr0h	equ	0xFEA
  4009                           fsr0l	equ	0xFE9
  4010                           wreg	equ	0xFE8
  4011                           indf1	equ	0xFE7
  4012                           postinc1	equ	0xFE6
  4013                           postdec1	equ	0xFE5
  4014                           preinc1	equ	0xFE4
  4015                           plusw1	equ	0xFE3
  4016                           fsr1h	equ	0xFE2
  4017                           fsr1l	equ	0xFE1
  4018                           bsr	equ	0xFE0
  4019                           indf2	equ	0xFDF
  4020                           postinc2	equ	0xFDE
  4021                           postdec2	equ	0xFDD
  4022                           preinc2	equ	0xFDC
  4023                           plusw2	equ	0xFDB
  4024                           fsr2h	equ	0xFDA
  4025                           fsr2l	equ	0xFD9
  4026                           status	equ	0xFD8


Data Sizes:
    Strings     37
    Constant    0
    Data        1
    BSS         44
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     94      94
    BANK0           160     29      74
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 22
		 -> STR_2(CODE[22]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 17
		 -> main@text(BANK0[17]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    f.buffer	PTR unsigned char  size(1) Largest target is 17
		 -> main@text(BANK0[17]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 7
		 -> sprintf@f(BANK0[5]), 

    S1755_IO_FILE$buffer	PTR unsigned char  size(1) Largest target is 17
		 -> main@text(BANK0[17]), 

    fputc@fp.buffer	PTR unsigned char  size(1) Largest target is 17
		 -> main@text(BANK0[17]), 

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 7
		 -> sprintf@f(BANK0[5]), 

    atoi@s	PTR const unsigned char  size(1) Largest target is 22
		 -> STR_2(CODE[22]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 7
		 -> sprintf@f(BANK0[5]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 22
		 -> STR_2(CODE[22]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 22
		 -> STR_2(CODE[22]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 7
		 -> sprintf@f(BANK0[5]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 7
		 -> sprintf@f(BANK0[5]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 7
		 -> sprintf@f(BANK0[5]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK0[32]), 

    LCD_ShowString@textData	PTR unsigned char  size(2) Largest target is 17
		 -> main@text(BANK0[17]), STR_1(CODE[15]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->___aodiv
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _atoi->_isspace
    _LCD_ShowString->_LCD_Send
    _LCD_Init->_LCD_Send

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                23    23      0    8995
                                             92 COMRAM     2     2      0
                                              8 BANK0     21    21      0
                           _LCD_Init
                     _LCD_ShowString
                         _drive_leds
                          _init_gpio
                          _init_tmr1
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             16     8      8    8292
                                             84 COMRAM     8     0      8
                                              0 BANK0      8     8      0
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             4     1      3    7939
                                             80 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           43    40      3    7566
                                             61 COMRAM    19    16      3
                               _atoi
                               _dtoa
                              _fputc
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                35    26      9    4358
                                             26 COMRAM    35    26      9
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                  9     5      4    2709
                                             13 COMRAM     9     5      4
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               3     1      2     166
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                5     3      2    1235
                                              8 COMRAM     5     3      2
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                8     5      3     834
                                              0 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                             18 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     448
                                              0 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     452
                                              0 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (4) _atoi                                                15    13      2    1244
                                              7 COMRAM    15    13      2
                             ___wmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (5) _isspace                                              7     5      2     207
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              6     4      2     237
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     403
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _init_tmr1                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_gpio                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _drive_leds                                           1     1      0     155
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _LCD_ShowString                                       6     4      2     309
                                              1 COMRAM     6     4      2
                           _LCD_Send
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             1     1      0      22
                                              1 COMRAM     1     1      0
                           _LCD_Send
 ---------------------------------------------------------------------------------
 (2) _LCD_Send                                             1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_Init
     _LCD_Send
   _LCD_ShowString
     _LCD_Send
   _drive_leds
   _init_gpio
   _init_tmr1
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _atoi
           ___wmul
           _isdigit
           _isspace
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
                 _putch
             _strlen
         _fputc
           _putch
         _isdigit

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     1D      4A       5       46.3%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     5E      5E       1      100.0%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A8      12        0.0%
DATA                 0      0      A8       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Sun Mar 08 09:38:31 2020

                     l98 1966      ___wmul@multiplicand 0003                      l101 19EC  
                    l111 1B34                      l121 1DB2                      l115 1B7A  
                    l107 1B06                      l211 1A28                      l222 12FE  
                    l224 1306                      l956 1CA2                      l987 1738  
                    _GIE 007F97                      _ISR 0008                      u980 1A8E  
                    _abs 1C7A                      _pad 1A00                      wreg 000FE8  
                   ?_ISR 0001                     l2000 113E                     ?_abs 0013  
                   l2024 1246                     l2018 1216                     l2034 1262  
                   l2124 1B26                     l2028 1250                     l2134 1B3E  
                   l2054 1B8E                     l2222 18A4                     l2056 1BA8  
                   l2226 18AE                     l2252 18EA                     l1702 1CC8  
                   l2254 190C                     l2248 18DC                     l2256 1910  
                   l1810 17AC                     l1802 176E                     l1706 1D90  
                   l1722 1A20                     l1812 17C0                     l1708 1D92  
                   l1732 1A6C                     l1724 1A32                     l1900 149E  
                   l1822 181E                     l1806 1792                     l1718 1A12  
                   l1728 1A46                     l1922 1670                     l1906 1618  
                   l1770 1538                     l1826 1844                     l1818 1808  
                   l1932 16D8                     l1924 1678                     l1916 1660  
                   l1908 161A                     l1772 154C                     l1764 1512  
                   l1838 1C3C                     l1926 167C                     l1790 15E4  
                   l1782 15A8                     l1758 14EA                     l1862 1320  
                   l1928 16A4                     l1688 1A96                     l1848 12E0  
                   l1960 1070                     l1786 15BE                     l1698 1CB6  
                   l1866 132E                     l1876 1422                     l1980 108A  
                   l1972 107C                     l1964 1074                     l1956 1064  
                   l1958 1066                     l1982 10CA                     ?_pad 000E  
                   l1896 148A                     l1976 1080                     l1968 1078  
                   l1996 111E                     l1998 1136                     STR_1 1017  
                   STR_2 1001                     u1000 1AD0                     u1200 17C4  
                   u1121 1518                     u1140 1550                     u1070 1C88  
                   u1310 131A                     u1080 1D04                     u1240 1C38  
                   u1320 1430                     u1090 1D06                     u1410 165C  
                   u1250 12B2                     u1340 1452                     u1260 12B4  
                   u1341 1450                     u1430 1708                     u1350 1460  
                   u1440 170A                     u1360 1466                     u1520 1174  
                   u1290 12F4                     u1530 1176                     u1380 1474  
                   u1540 1182                     u1710 1BDA                     u1560 11B2  
                   u1705 1BD2                     u1730 1BE4                     u1580 1DB6  
                   u1660 1B6C                     u1725 1BDC                     u1750 1BEE  
                   u1745 1BE6                     u1770 1BF8                     u1690 1BD0  
                   u1667 1B62                     u1765 1BF0                     u1790 1C02  
                   u1937 195C                     u1785 1BFA                     u1947 19F6  
                   _PEIE 007F96                     i2l52 0056                     i2l53 0064  
                   _TMR1 000FCE                     abs@a 0013              main@minutes 00A7  
            main@seconds 00A8                     _dbuf 006C                     _atoi 1606  
                   _main 1866                     _dtoa 128A                     _prec 0064  
                   _nout 0060                     pad@i 0013                     pad@p 0010  
                   fsr1h 000FE2                     fsr2h 000FDA                     indf1 000FE7  
                   indf2 000FDF                     fsr1l 000FE1                     pad@w 0015  
                   fsr2l 000FD9                     btemp 005F                     prodh 000FF4  
                   prodl 000FF3                     start 0068             ___param_bank 000000  
                  ??_ISR 0001           _LCD_ShowString 1B02                    ??_abs 0015  
                  ??_pad 0012         __end_of_LCD_Init 1A00         __end_of_LCD_Send 1DBE  
        __end_of___aodiv 1606                    ?_atoi 0008                    ?_main 0001  
                  ?_dtoa 001B          __end_of___aomod 1866                    _LATD2 007C62  
                  _LATC4 007C5C                    _LATD3 007C63                    _LATD4 007C64  
                  _LATD5 007C65                    _LATD6 007C66             vfpfcnvrt@fmt 003F  
                  _flags 0066                    _fputc 1A82                    _fputs 1CAC  
        __end_of_isdigit 1D0C                    atoi@n 0015                    pad@fp 000E  
                  atoi@s 0008                    _width 0062                    _putch 1DCC  
                  dtoa@d 001C                    dtoa@i 003C                    dtoa@n 0034  
                  dtoa@p 002E                    dtoa@s 0032                    dtoa@w 0030  
        __end_of_isspace 1C44                    tablat 000FF5                    ttemp5 0060  
                  ttemp6 0063                    ttemp7 0067                    status 000FD8  
                  wtemp8 0060          __end_of_sprintf 1C7A           __CFG_FOSC$HSMP 000000  
        __initialization 1D0C   __end_of_LCD_ShowString 1B80             __end_of_atoi 1742  
           __end_of_main 193C             __end_of_dtoa 14BE             LCD_Send@data 0001  
                 ??_atoi 000A                   ??_main 005D                   ??_dtoa 0024  
          __activetblptr 000002           __CFG_PLLCFG$ON 000000                   ?_fputc 0001  
                 ?_fputs 0009                   _ANSELA 000F38                   ?_putch 0001  
                 _ANSELC 000F3A                   i2l2180 002A                   i2l2190 0040  
                 i2l2178 0024                   i2l2188 003C                   i2l2198 0052  
         __CFG_WDTEN$OFF 000000            vfpfcnvrt@done 004D                   _TMR1IE 007CE8  
                 _TMR1IF 007CF0                   _SSP2IF 007D27             vfprintf@cfmt 0054  
        ?_LCD_ShowString 0002                ??___aodiv 0011                ??___aomod 0011  
                 ___wmul 1D64                   clear_0 1D24                   pad@buf 000F  
                 dtoa@fp 001B                   _strlen 1D8A                   fputc@c 0001  
                 fputs@c 000B                   fputs@i 000C                   fputs@s 0009  
              ??_isdigit 0003             __mediumconst 0000                ??_isspace 0003  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
                 putch@c 0001         __end_of_vfprintf 1BC4                ??_sprintf 005D  
             __accesstop 0060  __end_of__initialization 1D2A                ?_LCD_Init 0001  
              ?_LCD_Send 0001             drive_leds@in 0001            ___rparam_used 000001  
         __pcstackCOMRAM 0001             __pidataBANK0 1DCE            __end_of_fputc 1B02  
          __end_of_fputs 1CDC            __end_of_putch 1DCE                  ??_fputc 0004  
                ??_fputs 000B                  ??_putch 0001               __pbssBANK0 0060  
             ??_LCD_Init 0002               ??_LCD_Send 0001       __size_of_init_gpio 002C  
     __size_of_init_tmr1 000E                  ?___wmul 0001                  ?_strlen 0001  
     __size_of_vfpfcnvrt 0262                  _SSP2ADD 000F6E                  _SSP2BUF 000F6F  
        LCD_ShowString@i 0007               _drive_leds 1BC4                  __Hparam 0000  
                __Lparam 0000             _g_timer_flag 006B                  ___aodiv 14BE  
                ___aomod 1742          __size_of___wmul 0026                ?_vfprintf 0051  
           __psmallconst 1000                  __pcinit 1D0C                  __ramtop 1000  
                __ptext0 1866                  __ptext1 1C44                  __ptext2 1B80  
                __ptext3 1028                  __ptext4 128A                  __ptext5 1A00  
                __ptext6 1D8A                  __ptext7 1CAC                  __ptext8 1A82  
                __ptext9 1DCC                  _g_state 00A9          __size_of_strlen 0022  
           __size_of_ISR 0060                _T1CONbits 000FCD             __size_of_abs 0032  
           __size_of_pad 0082                  _isdigit 1CDC        __end_of_init_gpio 1D64  
      __end_of_init_tmr1 1DCC                  _isspace 1C06                  atoi@neg 000E  
                _sprintf 1C44                  main@hos 00A6     end_of_initialization 1D2A  
                fputc@fp 0003            __Lmediumconst 0000                  fputs@fp 000A  
       ??_LCD_ShowString 0004    LCD_ShowString@lineNum 0006        __end_of_vfpfcnvrt 128A  
                postdec2 000FDD                  postinc0 000FEE                  postinc1 000FE6  
                postinc2 000FDE               ??_vfprintf 0054                  strlen@a 0003  
                strlen@s 0001                _PORTAbits 000F80                _PORTCbits 000F82  
              _TRISAbits 000F92                _TRISCbits 000F94                _TRISDbits 000F95  
            ?_drive_leds 0001        __size_of_LCD_Init 00C4        __size_of_LCD_Send 0012  
            vfpfcnvrt@ap 0040              vfpfcnvrt@fp 003E              vfpfcnvrt@ll 0045  
         __end_of___wmul 1D8A           __end_of_strlen 1DAC      start_initialization 1D0C  
            __end_of_ISR 0068              __end_of_abs 1CAC              __end_of_pad 1A82  
            vfprintf@fmt 0052                 ??___wmul 0005              __pdataBANK0 00A9  
               ??_strlen 0003      __size_of_drive_leds 0042            __pcstackBANK0 008C  
       ___aodiv@dividend 0001                _atoi$1733 0010                _atoi$1734 0014  
              _atoi$1735 0012                 ISR@pause 0069                 ISR@reset 0068  
               ISR@start 006A                _dtoa$1261 002C                __pintcode 0008  
               ?___aodiv 0001                 ?___aomod 0001         ___aodiv@quotient 0013  
      __size_of_vfprintf 0044              __smallconst 1000                 ?_isdigit 0001  
               ?_isspace 0001                _init_gpio 1D38                 ?_sprintf 0055  
              _init_tmr1 1DBE           __size_of_fputc 0080           __size_of_fputs 0030  
         __size_of_putch 0002                 _LCD_Init 193C                 _LCD_Send 1DAC  
         ___wmul@product 0005                 _LATAbits 000F89                 _LATCbits 000F8B  
               _LATDbits 000F8C                _vfpfcnvrt 1028        ___wmul@multiplier 0001  
           _isspace$1751 0007               ?_init_gpio 0001               ?_init_tmr1 0001  
           ??_drive_leds 0001                 __Hrparam 0000               vfprintf@ap 0053  
               __Lrparam 0000               vfprintf@fp 0051         __size_of___aodiv 0148  
       __size_of___aomod 0124               ?_vfpfcnvrt 003E          ___aodiv@divisor 0009  
        ___aodiv@counter 0011               _ANSELDbits 000F3B               sprintf@fmt 0056  
     __end_of_drive_leds 1C06         __size_of_isdigit 0030         __size_of_isspace 003E  
               __ptext10 1C7A                 __ptext11 1742                 __ptext20 1B02  
               __ptext12 14BE                 __ptext21 193C                 __ptext13 1606  
               __ptext22 1DAC                 __ptext14 1C06                 __ptext15 1CDC  
               __ptext16 1D64                 __ptext17 1DBE                 __ptext18 1D38  
               __ptext19 1BC4             _SSP2CON1bits 000F6C             _SSP2CON2bits 000F6B  
       __size_of_sprintf 0036            __size_of_atoi 013C            __size_of_main 00D6  
          __size_of_dtoa 0234                 int$flags 005F                 _vfprintf 1B80  
__size_of_LCD_ShowString 007E                 main@leds 00A5                 main@text 0094  
           _SSP2STATbits 000F6D         ___aomod@dividend 0001           _vfpfcnvrt$1276 004F  
               isdigit@c 0001              ??_init_gpio 0001              ??_init_tmr1 0001  
               intlevel2 0000                sprintf@ap 008E                 isspace@c 0001  
        ___aomod@divisor 0009              ??_vfpfcnvrt 0041          ___aomod@counter 0011  
 LCD_ShowString@textData 0002                 sprintf@f 008F                 sprintf@s 0055  
           ___aodiv@sign 0012             ___aomod@sign 0012  
