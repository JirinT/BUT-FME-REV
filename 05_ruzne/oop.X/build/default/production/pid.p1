Version 4.0 HI-TECH Software Intermediate Code
"4 ./pid.h
[; ;./pid.h: 4: typedef struct{
[s S1 `f 1 `f 1 `f 1 `f 1 `f 1 `f 1 ]
[n S1 . kp ki _integral max min h ]
[v F30 `*S1 ~T0 @X0 1 t ]
[v F39 `*S1 ~T0 @X0 1 t ]
[v F48 `*S1 ~T0 @X0 1 t ]
"3 pid.c
[; ;pid.c: 3: void pid_init( stPID * const self,
[v _pid_init `(v ~T0 @X0 1 ef6`C*S1`f`f`f`f`f ]
"8
[; ;pid.c: 8:                 float h){
{
[e :U _pid_init ]
[v F32 `*S1 ~T0 @X0 1 t ]
"3
[; ;pid.c: 3: void pid_init( stPID * const self,
[v _self `C*S1 ~T0 @X0 1 r1 ]
"4
[; ;pid.c: 4:                 float kp,
[v _kp `f ~T0 @X0 1 r2 ]
"5
[; ;pid.c: 5:                 float ki,
[v _ki `f ~T0 @X0 1 r3 ]
"6
[; ;pid.c: 6:                 float max,
[v _max `f ~T0 @X0 1 r4 ]
"7
[; ;pid.c: 7:                 float min,
[v _min `f ~T0 @X0 1 r5 ]
"8
[; ;pid.c: 8:                 float h){
[v _h `f ~T0 @X0 1 r6 ]
[f ]
"10
[; ;pid.c: 10:     self->kp = kp;
[e = . *U _self 0 _kp ]
"11
[; ;pid.c: 11:     self->ki = ki;
[e = . *U _self 1 _ki ]
"12
[; ;pid.c: 12:     self->h = h;
[e = . *U _self 5 _h ]
"13
[; ;pid.c: 13:     self->max = max;
[e = . *U _self 3 _max ]
"14
[; ;pid.c: 14:     self->min = min;
[e = . *U _self 4 _min ]
"15
[; ;pid.c: 15:     self->_integral = 0;
[e = . *U _self 2 -> -> 0 `i `f ]
"17
[; ;pid.c: 17: }
[e :UE 2 ]
}
"19
[; ;pid.c: 19: float pid_step( stPID * const self,
[v _pid_step `(f ~T0 @X0 1 ef3`C*S1`f`f ]
"21
[; ;pid.c: 21:                     float feedback){
{
[e :U _pid_step ]
[v F41 `*S1 ~T0 @X0 1 t ]
"19
[; ;pid.c: 19: float pid_step( stPID * const self,
[v _self `C*S1 ~T0 @X0 1 r1 ]
"20
[; ;pid.c: 20:                     float setpoint,
[v _setpoint `f ~T0 @X0 1 r2 ]
"21
[; ;pid.c: 21:                     float feedback){
[v _feedback `f ~T0 @X0 1 r3 ]
[f ]
"23
[; ;pid.c: 23:     float err = setpoint - feedback;
[v _err `f ~T0 @X0 1 a ]
[e = _err - _setpoint _feedback ]
"25
[; ;pid.c: 25:     float kgain = err * self->kp;
[v _kgain `f ~T0 @X0 1 a ]
[e = _kgain * _err . *U _self 0 ]
"27
[; ;pid.c: 27:     self->_integral += err * self->ki * self->h;
[e =+ . *U _self 2 * * _err . *U _self 1 . *U _self 5 ]
"29
[; ;pid.c: 29:     float action = kgain + self->_integral;
[v _action `f ~T0 @X0 1 a ]
[e = _action + _kgain . *U _self 2 ]
"31
[; ;pid.c: 31:     if (action < self->min)
[e $ ! < _action . *U _self 4 4  ]
"32
[; ;pid.c: 32:         return self->min;
[e ) . *U _self 4 ]
[e $UE 3  ]
[e $U 5  ]
"33
[; ;pid.c: 33:     else if(action > self->max)
[e :U 4 ]
[e $ ! > _action . *U _self 3 6  ]
"34
[; ;pid.c: 34:         return self->max;
[e ) . *U _self 3 ]
[e $UE 3  ]
[e $U 7  ]
"35
[; ;pid.c: 35:     else
[e :U 6 ]
"36
[; ;pid.c: 36:         return action;
[e ) _action ]
[e $UE 3  ]
[e :U 7 ]
[e :U 5 ]
"38
[; ;pid.c: 38: }
[e :UE 3 ]
}
"40
[; ;pid.c: 40: void pid_reset(stPID * const self){
[v _pid_reset `(v ~T0 @X0 1 ef1`C*S1 ]
{
[e :U _pid_reset ]
[v F50 `*S1 ~T0 @X0 1 t ]
[v _self `C*S1 ~T0 @X0 1 r1 ]
[f ]
"42
[; ;pid.c: 42:     pid_init(self, self->kp, self->ki, self->max, self->min, self->h);
[e ( _pid_init (4 , , , , , _self . *U _self 0 . *U _self 1 . *U _self 3 . *U _self 4 . *U _self 5 ]
"44
[; ;pid.c: 44: }
[e :UE 8 ]
}
