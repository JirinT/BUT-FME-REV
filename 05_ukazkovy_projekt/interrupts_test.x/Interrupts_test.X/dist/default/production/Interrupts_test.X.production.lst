

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Mon Mar 25 09:30:21 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=2
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=2
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    21                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    22                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    23                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    24  0000                     
    25                           ; Version 2.05
    26                           ; Generated 20/12/2018 GMT
    27                           ; 
    28                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    29                           ; All rights reserved.
    30                           ; 
    31                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    32                           ; 
    33                           ; Redistribution and use in source and binary forms, with or without modification, are
    34                           ; permitted provided that the following conditions are met:
    35                           ; 
    36                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    37                           ;        conditions and the following disclaimer.
    38                           ; 
    39                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    40                           ;        of conditions and the following disclaimer in the documentation and/or other
    41                           ;        materials provided with the distribution.
    42                           ; 
    43                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    44                           ;        software without specific prior written permission.
    45                           ; 
    46                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    47                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    48                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    49                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    50                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    51                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    52                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    53                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    54                           ; 
    55                           ; 
    56                           ; Code-generator required, PIC18F46K22 Definitions
    57                           ; 
    58                           ; SFR Addresses
    59  0000                     _TMR5	set	3919
    60  0000                     _T5CONbits	set	3918
    61  0000                     _ANSELC	set	3898
    62  0000                     _ANSELA	set	3896
    63  0000                     _ANSELDbits	set	3899
    64  0000                     _TMR1	set	4046
    65  0000                     _PORTCbits	set	3970
    66  0000                     _LATCbits	set	3979
    67  0000                     _T1CONbits	set	4045
    68  0000                     _TRISCbits	set	3988
    69  0000                     _LATDbits	set	3980
    70  0000                     _SSP2STATbits	set	3949
    71  0000                     _SSP2BUF	set	3951
    72  0000                     _SSP2CON2bits	set	3947
    73  0000                     _SSP2ADD	set	3950
    74  0000                     _SSP2CON1bits	set	3948
    75  0000                     _LATAbits	set	3977
    76  0000                     _TRISAbits	set	3986
    77  0000                     _TRISDbits	set	3989
    78  0000                     _GIE	set	32663
    79  0000                     _PEIE	set	32662
    80  0000                     _TMR5IF	set	31729
    81  0000                     _TMR5IE	set	31721
    82  0000                     _TMR1IF	set	31984
    83  0000                     _TMR1IE	set	31976
    84  0000                     _SSP2IF	set	32039
    85                           
    86                           	psect	smallconst
    87  001000                     __psmallconst:
    88                           	opt callstack 0
    89  001000  00                 	db	0
    90  001001                     STR_1:
    91  001001  4D                 	db	77	;'M'
    92  001002  65                 	db	101	;'e'
    93  001003  63                 	db	99	;'c'
    94  001004  68                 	db	104	;'h'
    95  001005  61                 	db	97	;'a'
    96  001006  6C                 	db	108	;'l'
    97  001007  61                 	db	97	;'a'
    98  001008  62                 	db	98	;'b'
    99  001009  20                 	db	32
   100  00100A  6A                 	db	106	;'j'
   101  00100B  65                 	db	101	;'e'
   102  00100C  20                 	db	32
   103  00100D  62                 	db	98	;'b'
   104  00100E  6F                 	db	111	;'o'
   105  00100F  7A                 	db	122	;'z'
   106  001010  69                 	db	105	;'i'
   107  001011  00                 	db	0
   108                           
   109                           ; #config settings
   110  001012  00                 	db	0	; dummy byte at the end
   111  0000                     
   112                           	psect	cinit
   113  0013CE                     __pcinit:
   114                           	opt callstack 0
   115  0013CE                     start_initialization:
   116                           	opt callstack 0
   117  0013CE                     __initialization:
   118                           	opt callstack 0
   119                           
   120                           ; Clear objects allocated to COMRAM (40 bytes)
   121  0013CE  EE00  F037         	lfsr	0,__pbssCOMRAM
   122  0013D2  0E28               	movlw	40
   123  0013D4                     clear_0:
   124  0013D4  6AEE               	clrf	postinc0,c
   125  0013D6  06E8               	decf	wreg,f,c
   126  0013D8  E1FD               	bnz	clear_0
   127  0013DA                     end_of_initialization:
   128                           	opt callstack 0
   129  0013DA                     __end_of__initialization:
   130                           	opt callstack 0
   131  0013DA  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   132  0013DC  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   133  0013DE  0E00               	movlw	low (__Lsmallconst shr (0+16))
   134  0013E0  6EF8               	movwf	tblptru,c
   135  0013E2  0E10               	movlw	high __Lsmallconst
   136  0013E4  6EF7               	movwf	tblptrh,c
   137  0013E6  0100               	movlb	0
   138  0013E8  EFCD  F009         	goto	_main	;jump to C main() function
   139                           
   140                           	psect	bssCOMRAM
   141  000037                     __pbssCOMRAM:
   142                           	opt callstack 0
   143  000037                     	ds	32
   144  000057                     _nout:
   145                           	opt callstack 0
   146  000057                     	ds	2
   147  000059                     _width:
   148                           	opt callstack 0
   149  000059                     	ds	2
   150  00005B                     _prec:
   151                           	opt callstack 0
   152  00005B                     	ds	2
   153  00005D                     _flags:
   154                           	opt callstack 0
   155  00005D                     	ds	2
   156                           
   157                           	psect	cstackCOMRAM
   158  000001                     __pcstackCOMRAM:
   159                           	opt callstack 0
   160  000001                     LCD_Send@data:
   161                           	opt callstack 0
   162  000001                     fputc@c:
   163                           	opt callstack 0
   164                           
   165                           ; 2 bytes @ 0x0
   166  000001                     	ds	1
   167  000002                     ??_LCD_Init:
   168  000002                     LCD_ShowString@textData:
   169                           	opt callstack 0
   170                           
   171                           ; 2 bytes @ 0x1
   172  000002                     	ds	1
   173  000003                     fputc@fp:
   174                           	opt callstack 0
   175                           
   176                           ; 2 bytes @ 0x2
   177  000003                     	ds	1
   178  000004                     LCD_ShowString@lineNum:
   179                           	opt callstack 0
   180                           
   181                           ; 1 bytes @ 0x3
   182  000004                     	ds	1
   183  000005                     ??_fputc:
   184  000005                     LCD_ShowString@i:
   185                           	opt callstack 0
   186                           
   187                           ; 1 bytes @ 0x4
   188  000005                     	ds	5
   189  00000A                     ?_vfpfcnvrt:
   190                           	opt callstack 0
   191  00000A                     vfpfcnvrt@fp:
   192                           	opt callstack 0
   193                           
   194                           ; 2 bytes @ 0x9
   195  00000A                     	ds	2
   196  00000C                     vfpfcnvrt@fmt:
   197                           	opt callstack 0
   198                           
   199                           ; 2 bytes @ 0xB
   200  00000C                     	ds	2
   201  00000E                     vfpfcnvrt@ap:
   202                           	opt callstack 0
   203                           
   204                           ; 2 bytes @ 0xD
   205  00000E                     	ds	2
   206  000010                     ?_vfprintf:
   207                           	opt callstack 0
   208  000010                     vfprintf@fp:
   209                           	opt callstack 0
   210                           
   211                           ; 2 bytes @ 0xF
   212  000010                     	ds	2
   213  000012                     vfprintf@fmt:
   214                           	opt callstack 0
   215                           
   216                           ; 2 bytes @ 0x11
   217  000012                     	ds	2
   218  000014                     vfprintf@ap:
   219                           	opt callstack 0
   220                           
   221                           ; 2 bytes @ 0x13
   222  000014                     	ds	2
   223  000016                     vfprintf@cfmt:
   224                           	opt callstack 0
   225                           
   226                           ; 2 bytes @ 0x15
   227  000016                     	ds	2
   228  000018                     ?_sprintf:
   229                           	opt callstack 0
   230  000018                     sprintf@s:
   231                           	opt callstack 0
   232                           
   233                           ; 2 bytes @ 0x17
   234  000018                     	ds	2
   235  00001A                     sprintf@fmt:
   236                           	opt callstack 0
   237                           
   238                           ; 2 bytes @ 0x19
   239  00001A                     	ds	2
   240  00001C                     
   241                           ; 1 bytes @ 0x1B
   242  00001C                     	ds	2
   243  00001E                     sprintf@ap:
   244                           	opt callstack 0
   245                           
   246                           ; 2 bytes @ 0x1D
   247  00001E                     	ds	2
   248  000020                     sprintf@f:
   249                           	opt callstack 0
   250                           
   251                           ; 6 bytes @ 0x1F
   252  000020                     	ds	6
   253  000026                     main@text:
   254                           	opt callstack 0
   255                           
   256                           ; 17 bytes @ 0x25
   257  000026                     	ds	17
   258                           
   259 ;;
   260 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   261 ;;
   262 ;; *************** function _main *****************
   263 ;; Defined at:
   264 ;;		line 96 in file "multintmain.c"
   265 ;; Parameters:    Size  Location     Type
   266 ;;		None
   267 ;; Auto vars:     Size  Location     Type
   268 ;;  text           17   37[COMRAM] unsigned char [17]
   269 ;; Return value:  Size  Location     Type
   270 ;;                  1    wreg      void 
   271 ;; Registers used:
   272 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   273 ;; Tracked objects:
   274 ;;		On entry : 0/0
   275 ;;		On exit  : 0/0
   276 ;;		Unchanged: 0/0
   277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   278 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   279 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   281 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   282 ;;Total ram usage:       17 bytes
   283 ;; Hardware stack levels required when called:    6
   284 ;; This function calls:
   285 ;;		_LCD_Clear
   286 ;;		_LCD_Init
   287 ;;		_LCD_ShowString
   288 ;;		_init
   289 ;;		_sprintf
   290 ;; This function is called by:
   291 ;;		Startup code after reset
   292 ;; This function uses a non-reentrant model
   293 ;;
   294                           
   295                           	psect	text0
   296  00139A                     __ptext0:
   297                           	opt callstack 0
   298  00139A                     _main:
   299                           	opt callstack 25
   300                           
   301                           ;multintmain.c: 98:     init();
   302                           
   303                           ;incstack = 0
   304  00139A  EC53  F009         	call	_init	;wreg free
   305                           
   306                           ;multintmain.c: 99:     LCD_Init();
   307  00139E  EC71  F008         	call	_LCD_Init	;wreg free
   308                           
   309                           ;multintmain.c: 100:     char text[17];;multintmain.c: 101:     sprintf(text, "Mechalab 
      +                          je bozi");
   310  0013A2  0E26               	movlw	low main@text
   311  0013A4  6E18               	movwf	sprintf@s,c
   312  0013A6  0E00               	movlw	high main@text
   313  0013A8  6E19               	movwf	sprintf@s+1,c
   314  0013AA  0E01               	movlw	low STR_1
   315  0013AC  6E1A               	movwf	sprintf@fmt,c
   316  0013AE  0E10               	movlw	high STR_1
   317  0013B0  6E1B               	movwf	sprintf@fmt+1,c
   318  0013B2  ECA6  F009         	call	_sprintf	;wreg free
   319                           
   320                           ;multintmain.c: 102:     LCD_ShowString(1,text);
   321  0013B6  0E26               	movlw	low main@text
   322  0013B8  6E02               	movwf	LCD_ShowString@textData,c
   323  0013BA  0E00               	movlw	high main@text
   324  0013BC  6E03               	movwf	LCD_ShowString@textData+1,c
   325  0013BE  0E01               	movlw	1
   326  0013C0  EC24  F009         	call	_LCD_ShowString
   327  0013C4                     l1159:
   328                           
   329                           ;multintmain.c: 105:         if(PORTCbits.RC0){
   330  0013C4  A082               	btfss	3970,0,c	;volatile
   331  0013C6  D7FE               	goto	l1159
   332                           
   333                           ;multintmain.c: 106:             LCD_Clear();
   334  0013C8  ECFF  F009         	call	_LCD_Clear	;wreg free
   335  0013CC  D7FB               	goto	l1159
   336  0013CE                     __end_of_main:
   337                           	opt callstack 0
   338                           
   339 ;; *************** function _sprintf *****************
   340 ;; Defined at:
   341 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_sprintf.c"
   342 ;; Parameters:    Size  Location     Type
   343 ;;  s               2   23[COMRAM] PTR unsigned char 
   344 ;;		 -> main@text(17), 
   345 ;;  fmt             2   25[COMRAM] PTR const unsigned char 
   346 ;;		 -> STR_1(17), 
   347 ;; Auto vars:     Size  Location     Type
   348 ;;  f               6   31[COMRAM] struct _IO_FILE
   349 ;;  ap              2   29[COMRAM] PTR void [1]
   350 ;;		 -> ?_sprintf(2), 
   351 ;;  ret             2    0        int 
   352 ;; Return value:  Size  Location     Type
   353 ;;                  2   23[COMRAM] int 
   354 ;; Registers used:
   355 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   356 ;; Tracked objects:
   357 ;;		On entry : 0/0
   358 ;;		On exit  : 0/0
   359 ;;		Unchanged: 0/0
   360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   361 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   362 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   364 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   365 ;;Total ram usage:       14 bytes
   366 ;; Hardware stack levels used:    1
   367 ;; Hardware stack levels required when called:    5
   368 ;; This function calls:
   369 ;;		_vfprintf
   370 ;; This function is called by:
   371 ;;		_main
   372 ;; This function uses a non-reentrant model
   373 ;;
   374                           
   375                           	psect	text1
   376  00134C                     __ptext1:
   377                           	opt callstack 0
   378  00134C                     _sprintf:
   379                           	opt callstack 25
   380                           
   381                           ;incstack = 0
   382  00134C  0E1C               	movlw	low (?_sprintf+4)
   383  00134E  6E1E               	movwf	sprintf@ap,c
   384  001350  0E00               	movlw	high (?_sprintf+4)
   385  001352  6E1F               	movwf	sprintf@ap+1,c
   386  001354  C018  F020         	movff	sprintf@s,sprintf@f
   387  001358  C019  F021         	movff	sprintf@s+1,sprintf@f+1
   388  00135C  0E00               	movlw	0
   389  00135E  6E23               	movwf	sprintf@f+3,c
   390  001360  0E00               	movlw	0
   391  001362  6E22               	movwf	sprintf@f+2,c
   392  001364  0E00               	movlw	0
   393  001366  6E25               	movwf	sprintf@f+5,c
   394  001368  0E00               	movlw	0
   395  00136A  6E24               	movwf	sprintf@f+4,c
   396  00136C  0E20               	movlw	low sprintf@f
   397  00136E  6E10               	movwf	vfprintf@fp,c
   398  001370  0E00               	movlw	high sprintf@f
   399  001372  6E11               	movwf	vfprintf@fp+1,c
   400  001374  C01A  F012         	movff	sprintf@fmt,vfprintf@fmt
   401  001378  C01B  F013         	movff	sprintf@fmt+1,vfprintf@fmt+1
   402  00137C  0E1E               	movlw	low sprintf@ap
   403  00137E  6E14               	movwf	vfprintf@ap,c
   404  001380  0E00               	movlw	high sprintf@ap
   405  001382  6E15               	movwf	vfprintf@ap+1,c
   406  001384  EC7D  F009         	call	_vfprintf	;wreg free
   407  001388  5022               	movf	sprintf@f+2,w,c
   408  00138A  2418               	addwf	sprintf@s,w,c
   409  00138C  6ED9               	movwf	fsr2l,c
   410  00138E  5023               	movf	sprintf@f+3,w,c
   411  001390  2019               	addwfc	sprintf@s+1,w,c
   412  001392  6EDA               	movwf	fsr2h,c
   413  001394  0E00               	movlw	0
   414  001396  6EDF               	movwf	indf2,c
   415  001398  0012               	return		;funcret
   416  00139A                     __end_of_sprintf:
   417                           	opt callstack 0
   418                           
   419 ;; *************** function _vfprintf *****************
   420 ;; Defined at:
   421 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
   422 ;; Parameters:    Size  Location     Type
   423 ;;  fp              2   15[COMRAM] PTR struct _IO_FILE
   424 ;;		 -> sprintf@f(6), 
   425 ;;  fmt             2   17[COMRAM] PTR const unsigned char 
   426 ;;		 -> STR_1(17), 
   427 ;;  ap              2   19[COMRAM] PTR PTR void 
   428 ;;		 -> sprintf@ap(2), 
   429 ;; Auto vars:     Size  Location     Type
   430 ;;  cfmt            2   21[COMRAM] PTR unsigned char 
   431 ;;		 -> STR_1(17), 
   432 ;; Return value:  Size  Location     Type
   433 ;;                  2   15[COMRAM] int 
   434 ;; Registers used:
   435 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   436 ;; Tracked objects:
   437 ;;		On entry : 0/0
   438 ;;		On exit  : 0/0
   439 ;;		Unchanged: 0/0
   440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   441 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   442 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   444 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   445 ;;Total ram usage:        8 bytes
   446 ;; Hardware stack levels used:    1
   447 ;; Hardware stack levels required when called:    4
   448 ;; This function calls:
   449 ;;		_vfpfcnvrt
   450 ;; This function is called by:
   451 ;;		_sprintf
   452 ;; This function uses a non-reentrant model
   453 ;;
   454                           
   455                           	psect	text2
   456  0012FA                     __ptext2:
   457                           	opt callstack 0
   458  0012FA                     _vfprintf:
   459                           	opt callstack 25
   460                           
   461                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
   462                           
   463                           ;incstack = 0
   464  0012FA  C012  F016         	movff	vfprintf@fmt,vfprintf@cfmt
   465  0012FE  C013  F017         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
   466                           
   467                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
   468  001302  0E00               	movlw	0
   469  001304  6E58               	movwf	_nout+1,c
   470  001306  0E00               	movlw	0
   471  001308  6E57               	movwf	_nout,c
   472                           
   473                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
   474  00130A  D012               	goto	l1113
   475  00130C                     l1111:
   476                           
   477                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
   478  00130C  C010  F00A         	movff	vfprintf@fp,vfpfcnvrt@fp
   479  001310  C011  F00B         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
   480  001314  0E16               	movlw	low vfprintf@cfmt
   481  001316  6E0C               	movwf	vfpfcnvrt@fmt,c
   482  001318  0E00               	movlw	high vfprintf@cfmt
   483  00131A  6E0D               	movwf	vfpfcnvrt@fmt+1,c
   484  00131C  C014  F00E         	movff	vfprintf@ap,vfpfcnvrt@ap
   485  001320  C015  F00F         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
   486  001324  EC0A  F008         	call	_vfpfcnvrt	;wreg free
   487  001328  500A               	movf	?_vfpfcnvrt,w,c
   488  00132A  2657               	addwf	_nout,f,c
   489  00132C  500B               	movf	?_vfpfcnvrt+1,w,c
   490  00132E  2258               	addwfc	_nout+1,f,c
   491  001330                     l1113:
   492                           
   493                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
   494  001330  C016  FFF6         	movff	vfprintf@cfmt,tblptrl
   495  001334  C017  FFF7         	movff	vfprintf@cfmt+1,tblptrh
   496  001338                     	if	0	;tblptru may be non-zero
   497  001338                     	endif
   498  001338                     	if	0	;tblptru may be non-zero
   499  001338                     	endif
   500  001338  0008               	tblrd		*
   501  00133A  50F5               	movf	tablat,w,c
   502  00133C  0900               	iorlw	0
   503  00133E  A4D8               	btfss	status,2,c
   504  001340  D7E5               	goto	l1111
   505                           
   506                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
   507  001342  C057  F010         	movff	_nout,?_vfprintf
   508  001346  C058  F011         	movff	_nout+1,?_vfprintf+1
   509  00134A  0012               	return		;funcret
   510  00134C                     __end_of_vfprintf:
   511                           	opt callstack 0
   512                           
   513 ;; *************** function _vfpfcnvrt *****************
   514 ;; Defined at:
   515 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
   516 ;; Parameters:    Size  Location     Type
   517 ;;  fp              2    9[COMRAM] PTR struct _IO_FILE
   518 ;;		 -> sprintf@f(6), 
   519 ;;  fmt             2   11[COMRAM] PTR PTR unsigned char 
   520 ;;		 -> vfprintf@cfmt(2), 
   521 ;;  ap              2   13[COMRAM] PTR PTR void 
   522 ;;		 -> sprintf@ap(2), 
   523 ;; Auto vars:     Size  Location     Type
   524 ;;  llu             8    0        unsigned long long 
   525 ;;  ll              8    0        long long 
   526 ;;  f               4    0        long long 
   527 ;;  vp              3    0        PTR void 
   528 ;;  ct              3    0        unsigned char [3]
   529 ;;  cp              3    0        PTR unsigned char 
   530 ;;  i               2    0        int 
   531 ;;  done            2    0        int 
   532 ;;  c               1    0        unsigned char 
   533 ;; Return value:  Size  Location     Type
   534 ;;                  2    9[COMRAM] int 
   535 ;; Registers used:
   536 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   537 ;; Tracked objects:
   538 ;;		On entry : 0/0
   539 ;;		On exit  : 0/0
   540 ;;		Unchanged: 0/0
   541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   542 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   543 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   545 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   546 ;;Total ram usage:        6 bytes
   547 ;; Hardware stack levels used:    1
   548 ;; Hardware stack levels required when called:    3
   549 ;; This function calls:
   550 ;;		_fputc
   551 ;; This function is called by:
   552 ;;		_vfprintf
   553 ;; This function uses a non-reentrant model
   554 ;;
   555                           
   556                           	psect	text3
   557  001014                     __ptext3:
   558                           	opt callstack 0
   559  001014                     _vfpfcnvrt:
   560                           	opt callstack 25
   561                           
   562                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
   563                           
   564                           ;incstack = 0
   565  001014  C00C  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   566  001018  C00D  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   567  00101C  CFDE FFF6          	movff	postinc2,tblptrl
   568  001020  CFDD FFF7          	movff	postdec2,tblptrh
   569  001024                     	if	0	;tblptru may be non-zero
   570  001024                     	endif
   571  001024                     	if	0	;tblptru may be non-zero
   572  001024                     	endif
   573  001024  0008               	tblrd		*
   574  001026  50F5               	movf	tablat,w,c
   575  001028  0A25               	xorlw	37
   576  00102A  A4D8               	btfss	status,2,c
   577  00102C  D040               	goto	l1099
   578                           
   579                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
   580  00102E  C00C  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   581  001032  C00D  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   582  001036  2ADE               	incf	postinc2,f,c
   583  001038  0E00               	movlw	0
   584  00103A  22DD               	addwfc	postdec2,f,c
   585                           
   586                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
   587  00103C  0E00               	movlw	0
   588  00103E  6E5A               	movwf	_width+1,c
   589  001040  0E00               	movlw	0
   590  001042  6E59               	movwf	_width,c
   591  001044  C059  F05D         	movff	_width,_flags
   592  001048  C05A  F05E         	movff	_width+1,_flags+1
   593                           
   594                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
   595  00104C  685B               	setf	_prec,c
   596  00104E  685C               	setf	_prec+1,c
   597                           
   598                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
   599  001050  C00C  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   600  001054  C00D  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   601  001058  CFDE FFF6          	movff	postinc2,tblptrl
   602  00105C  CFDD FFF7          	movff	postdec2,tblptrh
   603  001060                     	if	0	;tblptru may be non-zero
   604  001060                     	endif
   605  001060                     	if	0	;tblptru may be non-zero
   606  001060                     	endif
   607  001060  0008               	tblrd		*
   608  001062  50F5               	movf	tablat,w,c
   609  001064  0A25               	xorlw	37
   610  001066  A4D8               	btfss	status,2,c
   611  001068  D016               	goto	l1093
   612                           
   613                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
   614  00106A  C00C  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   615  00106E  C00D  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   616  001072  2ADE               	incf	postinc2,f,c
   617  001074  0E00               	movlw	0
   618  001076  22DD               	addwfc	postdec2,f,c
   619                           
   620                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
   621  001078  0E00               	movlw	0
   622  00107A  6E02               	movwf	fputc@c+1,c
   623  00107C  0E25               	movlw	37
   624  00107E  6E01               	movwf	fputc@c,c
   625  001080  C00A  F003         	movff	vfpfcnvrt@fp,fputc@fp
   626  001084  C00B  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
   627  001088  ECD4  F008         	call	_fputc	;wreg free
   628  00108C                     l1089:
   629                           
   630                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
   631  00108C  0E00               	movlw	0
   632  00108E  6E0B               	movwf	?_vfpfcnvrt+1,c
   633  001090  0E01               	movlw	1
   634  001092  6E0A               	movwf	?_vfpfcnvrt,c
   635  001094  0012               	return	
   636  001096                     l1093:
   637                           
   638                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
   639  001096  C00C  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   640  00109A  C00D  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   641  00109E  2ADE               	incf	postinc2,f,c
   642  0010A0  0E00               	movlw	0
   643  0010A2  22DD               	addwfc	postdec2,f,c
   644                           
   645                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
   646  0010A4  0E00               	movlw	0
   647  0010A6  6E0B               	movwf	?_vfpfcnvrt+1,c
   648  0010A8  0E00               	movlw	0
   649  0010AA  6E0A               	movwf	?_vfpfcnvrt,c
   650  0010AC  0012               	return	
   651  0010AE                     l1099:
   652                           
   653                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
   654  0010AE  C00C  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   655  0010B2  C00D  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   656  0010B6  CFDE FFF6          	movff	postinc2,tblptrl
   657  0010BA  CFDD FFF7          	movff	postdec2,tblptrh
   658  0010BE                     	if	0	;tblptru may be non-zero
   659  0010BE                     	endif
   660  0010BE                     	if	0	;tblptru may be non-zero
   661  0010BE                     	endif
   662  0010BE  0008               	tblrd		*
   663  0010C0  50F5               	movf	tablat,w,c
   664  0010C2  6E01               	movwf	fputc@c,c
   665  0010C4  6A02               	clrf	fputc@c+1,c
   666  0010C6  C00A  F003         	movff	vfpfcnvrt@fp,fputc@fp
   667  0010CA  C00B  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
   668  0010CE  ECD4  F008         	call	_fputc	;wreg free
   669                           
   670                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
   671  0010D2  C00C  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   672  0010D6  C00D  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   673  0010DA  2ADE               	incf	postinc2,f,c
   674  0010DC  0E00               	movlw	0
   675  0010DE  22DD               	addwfc	postdec2,f,c
   676  0010E0  D7D5               	goto	l1089
   677  0010E2                     __end_of_vfpfcnvrt:
   678                           	opt callstack 0
   679                           
   680 ;; *************** function _fputc *****************
   681 ;; Defined at:
   682 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
   683 ;; Parameters:    Size  Location     Type
   684 ;;  c               2    0[COMRAM] int 
   685 ;;  fp              2    2[COMRAM] PTR struct _IO_FILE
   686 ;;		 -> sprintf@f(6), 
   687 ;; Auto vars:     Size  Location     Type
   688 ;;		None
   689 ;; Return value:  Size  Location     Type
   690 ;;                  2    0[COMRAM] int 
   691 ;; Registers used:
   692 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   693 ;; Tracked objects:
   694 ;;		On entry : 0/0
   695 ;;		On exit  : 0/0
   696 ;;		Unchanged: 0/0
   697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   698 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   699 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   700 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   701 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   702 ;;Total ram usage:        9 bytes
   703 ;; Hardware stack levels used:    1
   704 ;; Hardware stack levels required when called:    2
   705 ;; This function calls:
   706 ;;		_putch
   707 ;; This function is called by:
   708 ;;		_vfpfcnvrt
   709 ;; This function uses a non-reentrant model
   710 ;;
   711                           
   712                           	psect	text4
   713  0011A8                     __ptext4:
   714                           	opt callstack 0
   715  0011A8                     _fputc:
   716                           	opt callstack 25
   717                           
   718                           ;incstack = 0
   719  0011A8  5003               	movf	fputc@fp,w,c
   720  0011AA  1004               	iorwf	fputc@fp+1,w,c
   721  0011AC  B4D8               	btfsc	status,2,c
   722  0011AE  D004               	goto	u210
   723  0011B0  5003               	movf	fputc@fp,w,c
   724  0011B2  1004               	iorwf	fputc@fp+1,w,c
   725  0011B4  A4D8               	btfss	status,2,c
   726  0011B6  D004               	goto	l1067
   727  0011B8                     u210:
   728  0011B8  5001               	movf	fputc@c,w,c
   729  0011BA  EC06  F00A         	call	_putch
   730  0011BE  0012               	return	
   731  0011C0                     l1067:
   732  0011C0  EE20 F004          	lfsr	2,4
   733  0011C4  5003               	movf	fputc@fp,w,c
   734  0011C6  26D9               	addwf	fsr2l,f,c
   735  0011C8  5004               	movf	fputc@fp+1,w,c
   736  0011CA  22DA               	addwfc	fsr2h,f,c
   737  0011CC  50DE               	movf	postinc2,w,c
   738  0011CE  10DE               	iorwf	postinc2,w,c
   739  0011D0  B4D8               	btfsc	status,2,c
   740  0011D2  D016               	goto	u230
   741  0011D4  EE20 F004          	lfsr	2,4
   742  0011D8  5003               	movf	fputc@fp,w,c
   743  0011DA  26D9               	addwf	fsr2l,f,c
   744  0011DC  5004               	movf	fputc@fp+1,w,c
   745  0011DE  22DA               	addwfc	fsr2h,f,c
   746  0011E0  EE10 F002          	lfsr	1,2
   747  0011E4  5003               	movf	fputc@fp,w,c
   748  0011E6  26E1               	addwf	fsr1l,f,c
   749  0011E8  5004               	movf	fputc@fp+1,w,c
   750  0011EA  22E2               	addwfc	fsr1h,f,c
   751  0011EC  50DE               	movf	postinc2,w,c
   752  0011EE  5CE6               	subwf	postinc1,w,c
   753  0011F0  50E6               	movf	postinc1,w,c
   754  0011F2  0A80               	xorlw	128
   755  0011F4  6E09               	movwf	(??_fputc+4)& (0+255),c
   756  0011F6  50DE               	movf	postinc2,w,c
   757  0011F8  0A80               	xorlw	128
   758  0011FA  5809               	subwfb	(??_fputc+4)& (0+255),w,c
   759  0011FC  B0D8               	btfsc	status,0,c
   760  0011FE  0012               	return	
   761  001200                     u230:
   762  001200  EE20 F002          	lfsr	2,2
   763  001204  5003               	movf	fputc@fp,w,c
   764  001206  26D9               	addwf	fsr2l,f,c
   765  001208  5004               	movf	fputc@fp+1,w,c
   766  00120A  22DA               	addwfc	fsr2h,f,c
   767  00120C  CFDE F005          	movff	postinc2,??_fputc
   768  001210  CFDD F006          	movff	postdec2,??_fputc+1
   769  001214  C003  FFD9         	movff	fputc@fp,fsr2l
   770  001218  C004  FFDA         	movff	fputc@fp+1,fsr2h
   771  00121C  CFDE F007          	movff	postinc2,??_fputc+2
   772  001220  CFDD F008          	movff	postdec2,??_fputc+3
   773  001224  5005               	movf	??_fputc,w,c
   774  001226  2407               	addwf	??_fputc+2,w,c
   775  001228  6ED9               	movwf	fsr2l,c
   776  00122A  5006               	movf	??_fputc+1,w,c
   777  00122C  2008               	addwfc	??_fputc+3,w,c
   778  00122E  6EDA               	movwf	fsr2h,c
   779  001230  C001  FFDF         	movff	fputc@c,indf2
   780  001234  EE20 F002          	lfsr	2,2
   781  001238  5003               	movf	fputc@fp,w,c
   782  00123A  26D9               	addwf	fsr2l,f,c
   783  00123C  5004               	movf	fputc@fp+1,w,c
   784  00123E  22DA               	addwfc	fsr2h,f,c
   785  001240  2ADE               	incf	postinc2,f,c
   786  001242  0E00               	movlw	0
   787  001244  22DD               	addwfc	postdec2,f,c
   788  001246  0012               	return		;funcret
   789  001248                     __end_of_fputc:
   790                           	opt callstack 0
   791                           
   792 ;; *************** function _putch *****************
   793 ;; Defined at:
   794 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\putch.c"
   795 ;; Parameters:    Size  Location     Type
   796 ;;  c               1    wreg     unsigned char 
   797 ;; Auto vars:     Size  Location     Type
   798 ;;  c               1    0[COMRAM] unsigned char 
   799 ;; Return value:  Size  Location     Type
   800 ;;                  1    wreg      void 
   801 ;; Registers used:
   802 ;;		wreg
   803 ;; Tracked objects:
   804 ;;		On entry : 0/0
   805 ;;		On exit  : 0/0
   806 ;;		Unchanged: 0/0
   807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   809 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   811 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   812 ;;Total ram usage:        0 bytes
   813 ;; Hardware stack levels used:    1
   814 ;; Hardware stack levels required when called:    1
   815 ;; This function calls:
   816 ;;		Nothing
   817 ;; This function is called by:
   818 ;;		_fputc
   819 ;; This function uses a non-reentrant model
   820 ;;
   821                           
   822                           	psect	text5
   823  00140C                     __ptext5:
   824                           	opt callstack 0
   825  00140C                     _putch:
   826                           	opt callstack 25
   827                           
   828                           ;incstack = 0
   829  00140C  0012               	return		;funcret
   830  00140E                     __end_of_putch:
   831                           	opt callstack 0
   832                           
   833 ;; *************** function _init *****************
   834 ;; Defined at:
   835 ;;		line 52 in file "multintmain.c"
   836 ;; Parameters:    Size  Location     Type
   837 ;;		None
   838 ;; Auto vars:     Size  Location     Type
   839 ;;		None
   840 ;; Return value:  Size  Location     Type
   841 ;;                  1    wreg      void 
   842 ;; Registers used:
   843 ;;		wreg, status,2
   844 ;; Tracked objects:
   845 ;;		On entry : 0/0
   846 ;;		On exit  : 0/0
   847 ;;		Unchanged: 0/0
   848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   850 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   851 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   852 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   853 ;;Total ram usage:        0 bytes
   854 ;; Hardware stack levels used:    1
   855 ;; Hardware stack levels required when called:    1
   856 ;; This function calls:
   857 ;;		Nothing
   858 ;; This function is called by:
   859 ;;		_main
   860 ;; This function uses a non-reentrant model
   861 ;;
   862                           
   863                           	psect	text6
   864  0012A6                     __ptext6:
   865                           	opt callstack 0
   866  0012A6                     _init:
   867                           	opt callstack 29
   868                           
   869                           ;multintmain.c: 54:     ANSELA = 0x00;
   870                           
   871                           ;incstack = 0
   872  0012A6  0E00               	movlw	0
   873  0012A8  010F               	movlb	15	; () banked
   874  0012AA  6F38               	movwf	56,b	;volatile
   875                           
   876                           ;multintmain.c: 55:     ANSELC = 0x00;
   877  0012AC  0E00               	movlw	0
   878  0012AE  6F3A               	movwf	58,b	;volatile
   879                           
   880                           ; BSR set to: 15
   881                           ;multintmain.c: 58:     TRISDbits.TRISD2 = 0;
   882  0012B0  9495               	bcf	3989,2,c	;volatile
   883                           
   884                           ; BSR set to: 15
   885                           ;multintmain.c: 59:     TRISDbits.TRISD3 = 0;
   886  0012B2  9695               	bcf	3989,3,c	;volatile
   887                           
   888                           ; BSR set to: 15
   889                           ;multintmain.c: 60:     TRISCbits.TRISC4 = 0;
   890  0012B4  9894               	bcf	3988,4,c	;volatile
   891                           
   892                           ; BSR set to: 15
   893                           ;multintmain.c: 61:     TRISDbits.TRISD4 = 0;
   894  0012B6  9895               	bcf	3989,4,c	;volatile
   895                           
   896                           ; BSR set to: 15
   897                           ;multintmain.c: 62:     TRISDbits.TRISD5 = 0;
   898  0012B8  9A95               	bcf	3989,5,c	;volatile
   899                           
   900                           ; BSR set to: 15
   901                           ;multintmain.c: 63:     TRISDbits.TRISD6 = 0;
   902  0012BA  9C95               	bcf	3989,6,c	;volatile
   903                           
   904                           ; BSR set to: 15
   905                           ;multintmain.c: 66:     TRISAbits.TRISA4 = 1;
   906  0012BC  8892               	bsf	3986,4,c	;volatile
   907                           
   908                           ; BSR set to: 15
   909                           ;multintmain.c: 67:     TRISAbits.TRISA3 = 1;
   910  0012BE  8692               	bsf	3986,3,c	;volatile
   911                           
   912                           ; BSR set to: 15
   913                           ;multintmain.c: 68:     TRISAbits.TRISA2 = 1;
   914  0012C0  8492               	bsf	3986,2,c	;volatile
   915                           
   916                           ; BSR set to: 15
   917                           ;multintmain.c: 69:     TRISCbits.TRISC0 = 1;
   918  0012C2  8094               	bsf	3988,0,c	;volatile
   919                           
   920                           ;multintmain.c: 72:     T1CONbits.TMR1CS = 0b00;
   921  0012C4  0E3F               	movlw	-193
   922  0012C6  16CD               	andwf	4045,f,c	;volatile
   923                           
   924                           ;multintmain.c: 73:     T1CONbits.T1CKPS = 0b11;
   925  0012C8  0E30               	movlw	48
   926  0012CA  12CD               	iorwf	4045,f,c	;volatile
   927                           
   928                           ; BSR set to: 15
   929                           ;multintmain.c: 74:     T1CONbits.TMR1ON = 1;
   930  0012CC  80CD               	bsf	4045,0,c	;volatile
   931                           
   932                           ;multintmain.c: 76:     T5CONbits.TMR5CS = 0b00;
   933  0012CE  0E3F               	movlw	-193
   934  0012D0  174E               	andwf	78,f,b	;volatile
   935                           
   936                           ;multintmain.c: 77:     T5CONbits.T5CKPS = 0b11;
   937  0012D2  0E30               	movlw	48
   938  0012D4  134E               	iorwf	78,f,b	;volatile
   939                           
   940                           ; BSR set to: 15
   941                           ;multintmain.c: 78:     T5CONbits.TMR5ON = 1;
   942  0012D6  814E               	bsf	78,0,b	;volatile
   943                           
   944                           ; BSR set to: 15
   945                           ;multintmain.c: 81:     PEIE = 1;
   946  0012D8  8CF2               	bsf	4082,6,c	;volatile
   947                           
   948                           ; BSR set to: 15
   949                           ;multintmain.c: 82:     GIE = 1;
   950  0012DA  8EF2               	bsf	4082,7,c	;volatile
   951                           
   952                           ; BSR set to: 15
   953                           ;multintmain.c: 83:     TMR1IE = 1;
   954  0012DC  809D               	bsf	3997,0,c	;volatile
   955                           
   956                           ; BSR set to: 15
   957                           ;multintmain.c: 84:     TMR5IE = 1;
   958  0012DE  827D               	bsf	3965,1,c	;volatile
   959                           
   960                           ; BSR set to: 15
   961                           ;multintmain.c: 87:     LATDbits.LATD2 = 1; __asm("nop");
   962  0012E0  848C               	bsf	3980,2,c	;volatile
   963  0012E2  F000               	nop		;# 
   964                           
   965                           ;multintmain.c: 88:     LATDbits.LATD3 = 1; __asm("nop");
   966  0012E4  868C               	bsf	3980,3,c	;volatile
   967  0012E6  F000               	nop		;# 
   968                           
   969                           ;multintmain.c: 89:     LATCbits.LATC4 = 1; __asm("nop");
   970  0012E8  888B               	bsf	3979,4,c	;volatile
   971  0012EA  F000               	nop		;# 
   972                           
   973                           ;multintmain.c: 90:     LATDbits.LATD4 = 1; __asm("nop");
   974  0012EC  888C               	bsf	3980,4,c	;volatile
   975  0012EE  F000               	nop		;# 
   976                           
   977                           ;multintmain.c: 91:     LATDbits.LATD5 = 1; __asm("nop");
   978  0012F0  8A8C               	bsf	3980,5,c	;volatile
   979  0012F2  F000               	nop		;# 
   980                           
   981                           ;multintmain.c: 92:     LATDbits.LATD6 = 1; __asm("nop");
   982  0012F4  8C8C               	bsf	3980,6,c	;volatile
   983  0012F6  F000               	nop		;# 
   984  0012F8  0012               	return		;funcret
   985  0012FA                     __end_of_init:
   986                           	opt callstack 0
   987                           
   988 ;; *************** function _LCD_ShowString *****************
   989 ;; Defined at:
   990 ;;		line 57 in file "lcd.c"
   991 ;; Parameters:    Size  Location     Type
   992 ;;  lineNum         1    wreg     unsigned char 
   993 ;;  textData        2    1[COMRAM] PTR unsigned char 
   994 ;;		 -> main@text(17), 
   995 ;; Auto vars:     Size  Location     Type
   996 ;;  lineNum         1    3[COMRAM] unsigned char 
   997 ;;  i               1    4[COMRAM] unsigned char 
   998 ;; Return value:  Size  Location     Type
   999 ;;                  1    wreg      void 
  1000 ;; Registers used:
  1001 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1002 ;; Tracked objects:
  1003 ;;		On entry : 0/0
  1004 ;;		On exit  : 0/0
  1005 ;;		Unchanged: 0/0
  1006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1007 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1008 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1010 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1011 ;;Total ram usage:        4 bytes
  1012 ;; Hardware stack levels used:    1
  1013 ;; Hardware stack levels required when called:    2
  1014 ;; This function calls:
  1015 ;;		_LCD_Send
  1016 ;; This function is called by:
  1017 ;;		_main
  1018 ;; This function uses a non-reentrant model
  1019 ;;
  1020                           
  1021                           	psect	text7
  1022  001248                     __ptext7:
  1023                           	opt callstack 0
  1024  001248                     _LCD_ShowString:
  1025                           	opt callstack 28
  1026                           
  1027                           ;incstack = 0
  1028                           ;LCD_ShowString@lineNum stored from wreg
  1029  001248  6E04               	movwf	LCD_ShowString@lineNum,c
  1030                           
  1031                           ;lcd.c: 62:     SSP2CON2bits.SEN = 1;
  1032  00124A  806B               	bsf	3947,0,c	;volatile
  1033  00124C                     l36:
  1034  00124C  B06B               	btfsc	3947,0,c	;volatile
  1035  00124E  D7FE               	goto	l36
  1036                           
  1037                           ;lcd.c: 64:     SSP2IF = 0;
  1038  001250  9EA4               	bcf	4004,7,c	;volatile
  1039                           
  1040                           ;lcd.c: 66:     LCD_Send(0x7c);
  1041  001252  0E7C               	movlw	124
  1042  001254  ECF6  F009         	call	_LCD_Send
  1043                           
  1044                           ;lcd.c: 68:     LCD_Send(0x80);
  1045  001258  0E80               	movlw	128
  1046  00125A  ECF6  F009         	call	_LCD_Send
  1047                           
  1048                           ;lcd.c: 70:     if(lineNum == 1){
  1049  00125E  0404               	decf	LCD_ShowString@lineNum,w,c
  1050  001260  A4D8               	btfss	status,2,c
  1051  001262  D004               	goto	l1125
  1052                           
  1053                           ;lcd.c: 71:         LCD_Send(0x80);
  1054  001264  0E80               	movlw	128
  1055  001266  ECF6  F009         	call	_LCD_Send
  1056                           
  1057                           ;lcd.c: 72:     }
  1058  00126A  D007               	goto	l40
  1059  00126C                     l1125:
  1060  00126C  0E02               	movlw	2
  1061  00126E  1804               	xorwf	LCD_ShowString@lineNum,w,c
  1062  001270  A4D8               	btfss	status,2,c
  1063  001272  D003               	goto	l40
  1064                           
  1065                           ;lcd.c: 74:         LCD_Send(0xC0);
  1066  001274  0EC0               	movlw	192
  1067  001276  ECF6  F009         	call	_LCD_Send
  1068  00127A                     l40:
  1069                           
  1070                           ;lcd.c: 77:     LCD_Send(0x40);
  1071  00127A  0E40               	movlw	64
  1072  00127C  ECF6  F009         	call	_LCD_Send
  1073                           
  1074                           ;lcd.c: 79:     for (i = 0; i<16; i++){
  1075  001280  0E00               	movlw	0
  1076  001282  6E05               	movwf	LCD_ShowString@i,c
  1077  001284                     l1135:
  1078                           
  1079                           ;lcd.c: 80:         LCD_Send(textData[i]);
  1080  001284  5005               	movf	LCD_ShowString@i,w,c
  1081  001286  2402               	addwf	LCD_ShowString@textData,w,c
  1082  001288  6ED9               	movwf	fsr2l,c
  1083  00128A  0E00               	movlw	0
  1084  00128C  2003               	addwfc	LCD_ShowString@textData+1,w,c
  1085  00128E  6EDA               	movwf	fsr2h,c
  1086  001290  50DF               	movf	indf2,w,c
  1087  001292  ECF6  F009         	call	_LCD_Send
  1088                           
  1089                           ;lcd.c: 81:     }
  1090  001296  2A05               	incf	LCD_ShowString@i,f,c
  1091  001298  0E0F               	movlw	15
  1092  00129A  6405               	cpfsgt	LCD_ShowString@i,c
  1093  00129C  D7F3               	goto	l1135
  1094                           
  1095                           ;lcd.c: 83:     SSP2CON2bits.PEN = 1;
  1096  00129E  846B               	bsf	3947,2,c	;volatile
  1097  0012A0                     l44:
  1098  0012A0  A46B               	btfss	3947,2,c	;volatile
  1099  0012A2  0012               	return	
  1100  0012A4  D7FD               	goto	l44
  1101  0012A6                     __end_of_LCD_ShowString:
  1102                           	opt callstack 0
  1103                           
  1104 ;; *************** function _LCD_Init *****************
  1105 ;; Defined at:
  1106 ;;		line 6 in file "lcd.c"
  1107 ;; Parameters:    Size  Location     Type
  1108 ;;		None
  1109 ;; Auto vars:     Size  Location     Type
  1110 ;;		None
  1111 ;; Return value:  Size  Location     Type
  1112 ;;                  1    wreg      void 
  1113 ;; Registers used:
  1114 ;;		wreg, status,2, cstack
  1115 ;; Tracked objects:
  1116 ;;		On entry : 0/0
  1117 ;;		On exit  : 0/0
  1118 ;;		Unchanged: 0/0
  1119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1121 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1122 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1123 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1124 ;;Total ram usage:        1 bytes
  1125 ;; Hardware stack levels used:    1
  1126 ;; Hardware stack levels required when called:    2
  1127 ;; This function calls:
  1128 ;;		_LCD_Send
  1129 ;; This function is called by:
  1130 ;;		_main
  1131 ;; This function uses a non-reentrant model
  1132 ;;
  1133                           
  1134                           	psect	text8
  1135  0010E2                     __ptext8:
  1136                           	opt callstack 0
  1137  0010E2                     _LCD_Init:
  1138                           	opt callstack 28
  1139                           
  1140                           ;lcd.c: 8:     ANSELDbits.ANSD0 = 0;
  1141                           
  1142                           ;incstack = 0
  1143  0010E2  010F               	movlb	15	; () banked
  1144  0010E4  913B               	bcf	59,0,b	;volatile
  1145                           
  1146                           ;lcd.c: 9:     ANSELDbits.ANSD1 = 0;
  1147  0010E6  933B               	bcf	59,1,b	;volatile
  1148                           
  1149                           ;lcd.c: 11:     TRISDbits.TRISD0 = 1;
  1150  0010E8  8095               	bsf	3989,0,c	;volatile
  1151                           
  1152                           ;lcd.c: 12:     TRISDbits.TRISD1 = 1;
  1153  0010EA  8295               	bsf	3989,1,c	;volatile
  1154                           
  1155                           ;lcd.c: 13:     TRISAbits.TRISA0 = 0;
  1156  0010EC  9092               	bcf	3986,0,c	;volatile
  1157                           
  1158                           ;lcd.c: 14:     LATAbits.LATA0 = 1;
  1159  0010EE  8089               	bsf	3977,0,c	;volatile
  1160                           
  1161                           ; BSR set to: 15
  1162                           ;lcd.c: 17:     SSP2CON1bits.SSPM = 0b1000;
  1163  0010F0  506C               	movf	3948,w,c	;volatile
  1164  0010F2  0BF0               	andlw	-16
  1165  0010F4  0908               	iorlw	8
  1166  0010F6  6E6C               	movwf	3948,c	;volatile
  1167                           
  1168                           ;lcd.c: 18:     SSP2ADD = 19;
  1169  0010F8  0E13               	movlw	19
  1170  0010FA  6E6E               	movwf	3950,c	;volatile
  1171                           
  1172                           ; BSR set to: 15
  1173                           ;lcd.c: 19:     SSP2CON1bits.SSPEN = 1;
  1174  0010FC  8A6C               	bsf	3948,5,c	;volatile
  1175                           
  1176                           ; BSR set to: 15
  1177                           ;lcd.c: 21:     _delay((unsigned long)((5)*(32E6/4000.0)));
  1178  0010FE  0E34               	movlw	52
  1179  001100  6E02               	movwf	??_LCD_Init& (0+255),c
  1180  001102  0EF2               	movlw	242
  1181  001104                     u337:
  1182  001104  2EE8               	decfsz	wreg,f,c
  1183  001106  D7FE               	bra	u337
  1184  001108  2E02               	decfsz	??_LCD_Init& (0+255),f,c
  1185  00110A  D7FC               	bra	u337
  1186                           
  1187                           ;lcd.c: 23:     SSP2CON2bits.SEN = 1;
  1188  00110C  806B               	bsf	3947,0,c	;volatile
  1189  00110E                     l27:
  1190  00110E  B06B               	btfsc	3947,0,c	;volatile
  1191  001110  D7FE               	goto	l27
  1192                           
  1193                           ;lcd.c: 25:     SSP2IF = 0;
  1194  001112  9EA4               	bcf	4004,7,c	;volatile
  1195                           
  1196                           ;lcd.c: 27:     LCD_Send(0x7C);
  1197  001114  0E7C               	movlw	124
  1198  001116  ECF6  F009         	call	_LCD_Send
  1199                           
  1200                           ;lcd.c: 28:     LCD_Send(0x80);
  1201  00111A  0E80               	movlw	128
  1202  00111C  ECF6  F009         	call	_LCD_Send
  1203                           
  1204                           ;lcd.c: 29:     LCD_Send(0x38);
  1205  001120  0E38               	movlw	56
  1206  001122  ECF6  F009         	call	_LCD_Send
  1207                           
  1208                           ;lcd.c: 30:     LCD_Send(0x80);
  1209  001126  0E80               	movlw	128
  1210  001128  ECF6  F009         	call	_LCD_Send
  1211                           
  1212                           ;lcd.c: 31:     LCD_Send(0x39);
  1213  00112C  0E39               	movlw	57
  1214  00112E  ECF6  F009         	call	_LCD_Send
  1215                           
  1216                           ;lcd.c: 32:     LCD_Send(0x80);
  1217  001132  0E80               	movlw	128
  1218  001134  ECF6  F009         	call	_LCD_Send
  1219                           
  1220                           ;lcd.c: 33:     LCD_Send(0x17);
  1221  001138  0E17               	movlw	23
  1222  00113A  ECF6  F009         	call	_LCD_Send
  1223                           
  1224                           ;lcd.c: 34:     LCD_Send(0x80);
  1225  00113E  0E80               	movlw	128
  1226  001140  ECF6  F009         	call	_LCD_Send
  1227                           
  1228                           ;lcd.c: 35:     LCD_Send(0x7A);
  1229  001144  0E7A               	movlw	122
  1230  001146  ECF6  F009         	call	_LCD_Send
  1231                           
  1232                           ;lcd.c: 36:     LCD_Send(0x80);
  1233  00114A  0E80               	movlw	128
  1234  00114C  ECF6  F009         	call	_LCD_Send
  1235                           
  1236                           ;lcd.c: 37:     LCD_Send(0x5E);
  1237  001150  0E5E               	movlw	94
  1238  001152  ECF6  F009         	call	_LCD_Send
  1239                           
  1240                           ;lcd.c: 38:     LCD_Send(0x80);
  1241  001156  0E80               	movlw	128
  1242  001158  ECF6  F009         	call	_LCD_Send
  1243                           
  1244                           ;lcd.c: 39:     LCD_Send(0x6B);
  1245  00115C  0E6B               	movlw	107
  1246  00115E  ECF6  F009         	call	_LCD_Send
  1247                           
  1248                           ;lcd.c: 40:     LCD_Send(0x80);
  1249  001162  0E80               	movlw	128
  1250  001164  ECF6  F009         	call	_LCD_Send
  1251                           
  1252                           ;lcd.c: 41:     LCD_Send(0x0C);
  1253  001168  0E0C               	movlw	12
  1254  00116A  ECF6  F009         	call	_LCD_Send
  1255                           
  1256                           ;lcd.c: 42:     LCD_Send(0x80);
  1257  00116E  0E80               	movlw	128
  1258  001170  ECF6  F009         	call	_LCD_Send
  1259                           
  1260                           ;lcd.c: 43:     LCD_Send(0x01);
  1261  001174  0E01               	movlw	1
  1262  001176  ECF6  F009         	call	_LCD_Send
  1263                           
  1264                           ;lcd.c: 44:     LCD_Send(0x80);
  1265  00117A  0E80               	movlw	128
  1266  00117C  ECF6  F009         	call	_LCD_Send
  1267                           
  1268                           ;lcd.c: 45:     LCD_Send(0x06);
  1269  001180  0E06               	movlw	6
  1270  001182  ECF6  F009         	call	_LCD_Send
  1271                           
  1272                           ;lcd.c: 46:     LCD_Send(0x80);
  1273  001186  0E80               	movlw	128
  1274  001188  ECF6  F009         	call	_LCD_Send
  1275                           
  1276                           ;lcd.c: 47:     LCD_Send(0x02);
  1277  00118C  0E02               	movlw	2
  1278  00118E  ECF6  F009         	call	_LCD_Send
  1279                           
  1280                           ;lcd.c: 49:     SSP2CON2bits.PEN = 1;
  1281  001192  846B               	bsf	3947,2,c	;volatile
  1282  001194                     l30:
  1283  001194  B46B               	btfsc	3947,2,c	;volatile
  1284  001196  D7FE               	goto	l30
  1285                           
  1286                           ;lcd.c: 52:     _delay((unsigned long)((5)*(32E6/4000.0)));
  1287  001198  0E34               	movlw	52
  1288  00119A  6E02               	movwf	??_LCD_Init& (0+255),c
  1289  00119C  0EF2               	movlw	242
  1290  00119E                     u347:
  1291  00119E  2EE8               	decfsz	wreg,f,c
  1292  0011A0  D7FE               	bra	u347
  1293  0011A2  2E02               	decfsz	??_LCD_Init& (0+255),f,c
  1294  0011A4  D7FC               	bra	u347
  1295  0011A6  0012               	return		;funcret
  1296  0011A8                     __end_of_LCD_Init:
  1297                           	opt callstack 0
  1298                           
  1299 ;; *************** function _LCD_Send *****************
  1300 ;; Defined at:
  1301 ;;		line 88 in file "lcd.c"
  1302 ;; Parameters:    Size  Location     Type
  1303 ;;  data            1    wreg     unsigned char 
  1304 ;; Auto vars:     Size  Location     Type
  1305 ;;  data            1    0[COMRAM] unsigned char 
  1306 ;; Return value:  Size  Location     Type
  1307 ;;                  1    wreg      void 
  1308 ;; Registers used:
  1309 ;;		wreg
  1310 ;; Tracked objects:
  1311 ;;		On entry : 0/0
  1312 ;;		On exit  : 0/0
  1313 ;;		Unchanged: 0/0
  1314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1316 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1318 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1319 ;;Total ram usage:        1 bytes
  1320 ;; Hardware stack levels used:    1
  1321 ;; Hardware stack levels required when called:    1
  1322 ;; This function calls:
  1323 ;;		Nothing
  1324 ;; This function is called by:
  1325 ;;		_LCD_Init
  1326 ;;		_LCD_ShowString
  1327 ;; This function uses a non-reentrant model
  1328 ;;
  1329                           
  1330                           	psect	text9
  1331  0013EC                     __ptext9:
  1332                           	opt callstack 0
  1333  0013EC                     _LCD_Send:
  1334                           	opt callstack 28
  1335                           
  1336                           ;incstack = 0
  1337                           ;LCD_Send@data stored from wreg
  1338  0013EC  6E01               	movwf	LCD_Send@data,c
  1339                           
  1340                           ;lcd.c: 90:     SSP2BUF = data;
  1341  0013EE  C001  FF6F         	movff	LCD_Send@data,3951	;volatile
  1342  0013F2                     l50:
  1343  0013F2  B06D               	btfsc	3949,0,c	;volatile
  1344  0013F4  D7FE               	goto	l50
  1345  0013F6                     u70:
  1346  0013F6  AEA4               	btfss	4004,7,c	;volatile
  1347  0013F8  D7FE               	goto	u70
  1348                           
  1349                           ;lcd.c: 93:     SSP2IF = 0;
  1350  0013FA  9EA4               	bcf	4004,7,c	;volatile
  1351  0013FC  0012               	return		;funcret
  1352  0013FE                     __end_of_LCD_Send:
  1353                           	opt callstack 0
  1354                           
  1355 ;; *************** function _LCD_Clear *****************
  1356 ;; Defined at:
  1357 ;;		line 97 in file "lcd.c"
  1358 ;; Parameters:    Size  Location     Type
  1359 ;;		None
  1360 ;; Auto vars:     Size  Location     Type
  1361 ;;		None
  1362 ;; Return value:  Size  Location     Type
  1363 ;;                  1    wreg      void 
  1364 ;; Registers used:
  1365 ;;		wreg
  1366 ;; Tracked objects:
  1367 ;;		On entry : 0/0
  1368 ;;		On exit  : 0/0
  1369 ;;		Unchanged: 0/0
  1370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1372 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1373 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1374 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1375 ;;Total ram usage:        0 bytes
  1376 ;; Hardware stack levels used:    1
  1377 ;; Hardware stack levels required when called:    1
  1378 ;; This function calls:
  1379 ;;		Nothing
  1380 ;; This function is called by:
  1381 ;;		_main
  1382 ;; This function uses a non-reentrant model
  1383 ;;
  1384                           
  1385                           	psect	text10
  1386  0013FE                     __ptext10:
  1387                           	opt callstack 0
  1388  0013FE                     _LCD_Clear:
  1389                           	opt callstack 29
  1390                           
  1391                           ;lcd.c: 98:     LATAbits.LATA0 = 0;
  1392                           
  1393                           ;incstack = 0
  1394  0013FE  9089               	bcf	3977,0,c	;volatile
  1395                           
  1396                           ;lcd.c: 99:     _delay((unsigned long)((100)*(32E6/4000000.0)));
  1397  001400  0EA0               	movlw	160
  1398  001402                     u357:
  1399  001402  D000               	nop2	
  1400  001404  2EE8               	decfsz	wreg,f,c
  1401  001406  D7FD               	bra	u357
  1402                           
  1403                           ;lcd.c: 100:     LATAbits.LATA0 = 1;
  1404  001408  8089               	bsf	3977,0,c	;volatile
  1405  00140A  0012               	return		;funcret
  1406  00140C                     __end_of_LCD_Clear:
  1407                           	opt callstack 0
  1408                           
  1409 ;; *************** function _ISR *****************
  1410 ;; Defined at:
  1411 ;;		line 38 in file "multintmain.c"
  1412 ;; Parameters:    Size  Location     Type
  1413 ;;		None
  1414 ;; Auto vars:     Size  Location     Type
  1415 ;;		None
  1416 ;; Return value:  Size  Location     Type
  1417 ;;                  1    wreg      void 
  1418 ;; Registers used:
  1419 ;;		wreg, status,2, status,0
  1420 ;; Tracked objects:
  1421 ;;		On entry : 0/0
  1422 ;;		On exit  : 0/0
  1423 ;;		Unchanged: 0/0
  1424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1426 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1427 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1428 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1429 ;;Total ram usage:        0 bytes
  1430 ;; Hardware stack levels used:    1
  1431 ;; This function calls:
  1432 ;;		Nothing
  1433 ;; This function is called by:
  1434 ;;		Interrupt level 2
  1435 ;; This function uses a non-reentrant model
  1436 ;;
  1437                           
  1438                           	psect	intcode
  1439  000008                     __pintcode:
  1440                           	opt callstack 0
  1441  000008                     _ISR:
  1442                           	opt callstack 25
  1443                           
  1444                           ;incstack = 0
  1445  000008  825F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  1446                           
  1447                           ;multintmain.c: 39:    if(TMR1IE & TMR1IF){
  1448  00000A  0E01               	movlw	1
  1449  00000C  A09D               	btfss	3997,0,c	;volatile
  1450  00000E  0E00               	movlw	0
  1451  000010  A09E               	btfss	3998,0,c	;volatile
  1452  000012  0E00               	movlw	0
  1453  000014  A0E8               	btfss	wreg,0,c
  1454  000016  D006               	goto	i2l1043
  1455                           
  1456                           ;multintmain.c: 40:         TMR1 = 0x8000;
  1457  000018  0E80               	movlw	128
  1458  00001A  6ECF               	movwf	4047,c	;volatile
  1459  00001C  0E00               	movlw	0
  1460  00001E  6ECE               	movwf	4046,c	;volatile
  1461                           
  1462                           ;multintmain.c: 41:         LATDbits.LATD2 ^= 1;
  1463  000020  748C               	btg	3980,2,c	;volatile
  1464                           
  1465                           ;multintmain.c: 42:         TMR1IF = 0;
  1466  000022  909E               	bcf	3998,0,c	;volatile
  1467  000024                     i2l1043:
  1468                           
  1469                           ;multintmain.c: 45:    if(TMR5IE & TMR5IF){
  1470  000024  0E01               	movlw	1
  1471  000026  A27D               	btfss	3965,1,c	;volatile
  1472  000028  0E00               	movlw	0
  1473  00002A  A27E               	btfss	3966,1,c	;volatile
  1474  00002C  0E00               	movlw	0
  1475  00002E  A0E8               	btfss	wreg,0,c
  1476  000030  D007               	goto	i2l110
  1477                           
  1478                           ;multintmain.c: 46:         TMR5 = 0;
  1479  000032  0E00               	movlw	0
  1480  000034  010F               	movlb	15	; () banked
  1481  000036  6F50               	movwf	80,b	;volatile
  1482  000038  0E00               	movlw	0
  1483  00003A  6F4F               	movwf	79,b	;volatile
  1484                           
  1485                           ; BSR set to: 15
  1486                           ;multintmain.c: 47:         LATDbits.LATD3 ^= 1;
  1487  00003C  768C               	btg	3980,3,c	;volatile
  1488                           
  1489                           ; BSR set to: 15
  1490                           ;multintmain.c: 48:         TMR5IF = 0;
  1491  00003E  927E               	bcf	3966,1,c	;volatile
  1492  000040                     i2l110:
  1493  000040  925F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  1494  000042  0011               	retfie		f
  1495  000044                     __end_of_ISR:
  1496                           	opt callstack 0
  1497                           
  1498                           	psect	rparam
  1499  0000                     
  1500                           	psect	temp
  1501  00005F                     btemp:
  1502                           	opt callstack 0
  1503  00005F                     	ds	1
  1504  0000                     int$flags	set	btemp
  1505  0000                     wtemp8	set	btemp+1
  1506  0000                     ttemp5	set	btemp+1
  1507  0000                     ttemp6	set	btemp+4
  1508  0000                     ttemp7	set	btemp+8
  1509                           tosu	equ	0xFFF
  1510                           tosh	equ	0xFFE
  1511                           tosl	equ	0xFFD
  1512                           stkptr	equ	0xFFC
  1513                           pclatu	equ	0xFFB
  1514                           pclath	equ	0xFFA
  1515                           pcl	equ	0xFF9
  1516                           tblptru	equ	0xFF8
  1517                           tblptrh	equ	0xFF7
  1518                           tblptrl	equ	0xFF6
  1519                           tablat	equ	0xFF5
  1520                           prodh	equ	0xFF4
  1521                           prodl	equ	0xFF3
  1522                           indf0	equ	0xFEF
  1523                           postinc0	equ	0xFEE
  1524                           postdec0	equ	0xFED
  1525                           preinc0	equ	0xFEC
  1526                           plusw0	equ	0xFEB
  1527                           fsr0h	equ	0xFEA
  1528                           fsr0l	equ	0xFE9
  1529                           wreg	equ	0xFE8
  1530                           indf1	equ	0xFE7
  1531                           postinc1	equ	0xFE6
  1532                           postdec1	equ	0xFE5
  1533                           preinc1	equ	0xFE4
  1534                           plusw1	equ	0xFE3
  1535                           fsr1h	equ	0xFE2
  1536                           fsr1l	equ	0xFE1
  1537                           bsr	equ	0xFE0
  1538                           indf2	equ	0xFDF
  1539                           postinc2	equ	0xFDE
  1540                           postdec2	equ	0xFDD
  1541                           preinc2	equ	0xFDC
  1542                           plusw2	equ	0xFDB
  1543                           fsr2h	equ	0xFDA
  1544                           fsr2l	equ	0xFD9
  1545                           status	equ	0xFD8


Data Sizes:
    Strings     17
    Constant    0
    Data        0
    BSS         40
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     54      94
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_1(CODE[17]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 17
		 -> main@text(COMRAM[17]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 17
		 -> main@text(COMRAM[17]), 

    S1531_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 17
		 -> main@text(COMRAM[17]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 17
		 -> main@text(COMRAM[17]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_1(CODE[17]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 17
		 -> STR_1(CODE[17]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    LCD_ShowString@textData	PTR unsigned char  size(2) Largest target is 17
		 -> main@text(COMRAM[17]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_fputc
    _LCD_ShowString->_LCD_Send
    _LCD_Init->_LCD_Send

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                17    17      0    2197
                                             37 COMRAM    17    17      0
                          _LCD_Clear
                           _LCD_Init
                     _LCD_ShowString
                               _init
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             14    10      4    1907
                                             23 COMRAM    14    10      4
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    1558
                                             15 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           40    34      6    1208
                                              9 COMRAM     6     0      6
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     782
                                              0 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCD_ShowString                                       4     2      2     226
                                              1 COMRAM     4     2      2
                           _LCD_Send
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             1     1      0      15
                                              1 COMRAM     1     1      0
                           _LCD_Send
 ---------------------------------------------------------------------------------
 (2) _LCD_Send                                             1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _LCD_Clear                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_Clear
   _LCD_Init
     _LCD_Send
   _LCD_ShowString
     _LCD_Send
   _init
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _fputc
           _putch

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     36      5E       1      100.0%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      5E      12        0.0%
DATA                 0      0      5E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Mon Mar 25 09:30:21 2019

                     l30 1194                       l40 127A                       l50 13F2  
                     l27 110E                       l44 12A0                       l36 124C  
                     u70 13F6                      _GIE 007F97                      u210 11B8  
                    u230 1200                      u337 1104                      u347 119E  
                    _ISR 0008                      u357 1402                      wreg 000FE8  
                   ?_ISR 0001                     l1111 130C                     l1113 1330  
                   l1125 126C                     l1135 1284                     l1067 11C0  
                   l1093 1096                     l1159 13C4                     l1089 108C  
                   l1099 10AE                     STR_1 1001                     _PEIE 007F96  
                   _TMR1 000FCE                     _TMR5 000F4F                     _dbuf 0037  
                   _main 139A                     _init 12A6       __size_of_LCD_Clear 000E  
                   _prec 005B                     _nout 0057                     fsr1h 000FE2  
                   fsr2h 000FDA                     indf2 000FDF                     fsr1l 000FE1  
                   fsr2l 000FD9                     btemp 005F                     start 0044  
          __CFG_IESO$OFF 000000             ___param_bank 000000                    ??_ISR 0001  
         _LCD_ShowString 1248         __end_of_LCD_Init 11A8         __end_of_LCD_Send 13FE  
                  ?_main 0001                    ?_init 0001                    i2l110 0040  
           vfpfcnvrt@fmt 000C           __CFG_FCMEN$OFF 000000                    _flags 005D  
                  _fputc 11A8                    _width 0059                    _putch 140C  
                  tablat 000FF5                    ttemp5 0060                    ttemp6 0063  
                  ttemp7 0067                    status 000FD8                    wtemp8 0060  
        __end_of_sprintf 139A           __CFG_FOSC$HSMP 000000          __initialization 13CE  
 __end_of_LCD_ShowString 12A6             __end_of_main 13CE             __end_of_init 12FA  
           LCD_Send@data 0001                   ??_main 0026                   ??_init 0001  
      __end_of_LCD_Clear 140C            __activetblptr 000001           __CFG_PLLCFG$ON 000000  
                 ?_fputc 0001                   _ANSELA 000F38                   ?_putch 0001  
                 _ANSELC 000F3A                   i2l1043 0024                   _TMR1IE 007CE8  
                 _TMR1IF 007CF0                   _TMR5IE 007BE9                   _TMR5IF 007BF1  
                 _SSP2IF 007D27             vfprintf@cfmt 0016          ?_LCD_ShowString 0002  
                 clear_0 13D4                   fputc@c 0001             __mediumconst 0000  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
                 putch@c 0001         __end_of_vfprintf 134C                ??_sprintf 001C  
             __accesstop 0060  __end_of__initialization 13DA                ?_LCD_Init 0001  
              ?_LCD_Send 0001            ___rparam_used 000001           __pcstackCOMRAM 0001  
          __end_of_fputc 1248            __end_of_putch 140E                  ??_fputc 0005  
                ??_putch 0001               ??_LCD_Init 0002               ??_LCD_Send 0001  
     __size_of_vfpfcnvrt 00CE                  _SSP2ADD 000F6E                  _SSP2BUF 000F6F  
        LCD_ShowString@i 0005                  __Hparam 0000                  __Lparam 0000  
              ?_vfprintf 0010             __psmallconst 1000                  __pcinit 13CE  
                __ramtop 1000                  __ptext0 139A                  __ptext1 134C  
                __ptext2 12FA                  __ptext3 1014                  __ptext4 11A8  
                __ptext5 140C                  __ptext6 12A6                  __ptext7 1248  
                __ptext8 10E2                  __ptext9 13EC             __size_of_ISR 003C  
              _T1CONbits 000FCD                _T5CONbits 000F4E                _LCD_Clear 13FE  
                _sprintf 134C     end_of_initialization 13DA                  fputc@fp 0003  
       ??_LCD_ShowString 0004    LCD_ShowString@lineNum 0004        __end_of_vfpfcnvrt 10E2  
                postdec2 000FDD                  postinc0 000FEE                  postinc1 000FE6  
                postinc2 000FDE               ??_vfprintf 0016                _PORTCbits 000F82  
              _TRISAbits 000F92                _TRISCbits 000F94                _TRISDbits 000F95  
             ?_LCD_Clear 0001        __size_of_LCD_Init 00C6        __size_of_LCD_Send 0012  
            vfpfcnvrt@ap 000E              vfpfcnvrt@fp 000A      start_initialization 13CE  
            __end_of_ISR 0044              vfprintf@fmt 0012              __pbssCOMRAM 0037  
            ??_LCD_Clear 0001                __pintcode 0008         __CFG_PRICLKEN$ON 000000  
      __size_of_vfprintf 0052              __smallconst 1000                 ?_sprintf 0018  
         __size_of_fputc 00A0           __size_of_putch 0002                 _LCD_Init 10E2  
               _LCD_Send 13EC                 _LATAbits 000F89                 _LATCbits 000F8B  
               _LATDbits 000F8C                _vfpfcnvrt 1014                 __Hrparam 0000  
             vfprintf@ap 0014                 __Lrparam 0000               vfprintf@fp 0010  
           __Lsmallconst 1000               ?_vfpfcnvrt 000A               _ANSELDbits 000F3B  
             sprintf@fmt 001A                 __ptext10 13FE             _SSP2CON1bits 000F6C  
           _SSP2CON2bits 000F6B         __size_of_sprintf 004E            __size_of_main 0034  
          __size_of_init 0054                 int$flags 005F                 _vfprintf 12FA  
__size_of_LCD_ShowString 005E                 main@text 0026             _SSP2STATbits 000F6D  
               intlevel2 0000                sprintf@ap 001E              ??_vfpfcnvrt 0010  
 LCD_ShowString@textData 0002                 sprintf@f 0020                 sprintf@s 0018  
