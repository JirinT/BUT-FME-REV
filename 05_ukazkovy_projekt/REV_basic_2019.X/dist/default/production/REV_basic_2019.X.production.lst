

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Mon Mar 25 09:29:06 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=2
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1
    19                           	psect	text11,global,reloc=2,class=CODE,delta=1
    20                           	psect	text12,global,reloc=2,class=CODE,delta=1
    21                           	psect	text13,global,reloc=2,class=CODE,delta=1
    22                           	psect	text14,global,reloc=2,class=CODE,delta=1
    23                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    26  0000                     
    27                           ; Version 2.05
    28                           ; Generated 20/12/2018 GMT
    29                           ; 
    30                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    31                           ; All rights reserved.
    32                           ; 
    33                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    34                           ; 
    35                           ; Redistribution and use in source and binary forms, with or without modification, are
    36                           ; permitted provided that the following conditions are met:
    37                           ; 
    38                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    39                           ;        conditions and the following disclaimer.
    40                           ; 
    41                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    42                           ;        of conditions and the following disclaimer in the documentation and/or other
    43                           ;        materials provided with the distribution.
    44                           ; 
    45                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    46                           ;        software without specific prior written permission.
    47                           ; 
    48                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    49                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    50                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    51                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    52                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    53                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    54                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    55                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    56                           ; 
    57                           ; 
    58                           ; Code-generator required, PIC18F46K22 Definitions
    59                           ; 
    60                           ; SFR Addresses
    61  0000                     
    62                           	psect	smallconst
    63  001000                     __psmallconst:
    64                           	opt callstack 0
    65  001000  00                 	db	0
    66  001001                     _dpowers:
    67                           	opt callstack 0
    68  001001  0001               	dw	1
    69  001003  000A               	dw	10
    70  001005  0064               	dw	100
    71  001007  03E8               	dw	1000
    72  001009  2710               	dw	10000
    73  00100B                     __end_of_dpowers:
    74                           	opt callstack 0
    75  0000                     _ANSELAbits	set	3896
    76  0000                     _ANSELCbits	set	3898
    77  0000                     _ANSELDbits	set	3899
    78  0000                     _LATBbits	set	3978
    79  0000                     _SSP2STATbits	set	3949
    80  0000                     _SSP2BUF	set	3951
    81  0000                     _SSP2CON2bits	set	3947
    82  0000                     _SSP2ADD	set	3950
    83  0000                     _SSP2CON1bits	set	3948
    84  0000                     _LATAbits	set	3977
    85  0000                     _RCREG1	set	4014
    86  0000                     _TXREG1	set	4013
    87  0000                     _PORTAbits	set	3968
    88  0000                     _PORTCbits	set	3970
    89  0000                     _ADRESL	set	4035
    90  0000                     _ADRESH	set	4036
    91  0000                     _SPBRG	set	4015
    92  0000                     _TXSTA1bits	set	4012
    93  0000                     _BAUDCON1bits	set	4024
    94  0000                     _RCSTA1	set	4011
    95  0000                     _TXSTA1	set	4012
    96  0000                     _ADCON0bits	set	4034
    97  0000                     _ADCON2bits	set	4032
    98  0000                     _ADCON2	set	4032
    99  0000                     _ADCON1	set	4033
   100  0000                     _TRISEbits	set	3990
   101  0000                     _TRISAbits	set	3986
   102  0000                     _LATCbits	set	3979
   103  0000                     _LATDbits	set	3980
   104  0000                     _TRISCbits	set	3988
   105  0000                     _TRISDbits	set	3989
   106  0000                     _OSCCON	set	4051
   107  0000                     _SSP2IF	set	32039
   108  0000                     _RC1IF	set	31989
   109  0000                     _TRMT1	set	32097
   110  0000                     _LATD6	set	31846
   111  0000                     _LATD5	set	31845
   112  0000                     _LATD4	set	31844
   113  0000                     _LATC4	set	31836
   114  0000                     _LATD3	set	31843
   115  0000                     _LATD2	set	31842
   116  0000                     _GODONE	set	32273
   117  0000                     _ADON	set	32272
   118  00100B                     STR_3:
   119  00100B  50                 	db	80	;'P'
   120  00100C  6F                 	db	111	;'o'
   121  00100D  74                 	db	116	;'t'
   122  00100E  31                 	db	49	;'1'
   123  00100F  3A                 	db	58	;':'
   124  001010  20                 	db	32
   125  001011  25                 	db	37
   126  001012  64                 	db	100	;'d'
   127  001013  20                 	db	32
   128  001014  25                 	db	37
   129  001015  64                 	db	100	;'d'
   130  001016  20                 	db	32
   131  001017  28                 	db	40
   132  001018  25                 	db	37
   133  001019  63                 	db	99	;'c'
   134  00101A  29                 	db	41
   135  00101B  0A                 	db	10
   136  00101C  00                 	db	0
   137  00101D                     STR_2:
   138  00101D  20                 	db	32
   139  00101E  20                 	db	32
   140  00101F  20                 	db	32
   141  001020  20                 	db	32
   142  001021  20                 	db	32
   143  001022  20                 	db	32
   144  001023  20                 	db	32
   145  001024  20                 	db	32
   146  001025  20                 	db	32
   147  001026  20                 	db	32
   148  001027  20                 	db	32
   149  001028  20                 	db	32
   150  001029  20                 	db	32
   151  00102A  20                 	db	32
   152  00102B  20                 	db	32
   153  00102C  20                 	db	32
   154  00102D  00                 	db	0
   155  00102E                     STR_1:
   156  00102E  4D                 	db	77	;'M'
   157  00102F  65                 	db	101	;'e'
   158  001030  63                 	db	99	;'c'
   159  001031  68                 	db	104	;'h'
   160  001032  6C                 	db	108	;'l'
   161  001033  61                 	db	97	;'a'
   162  001034  62                 	db	98	;'b'
   163  001035  20                 	db	32
   164  001036  6A                 	db	106	;'j'
   165  001037  65                 	db	101	;'e'
   166  001038  20                 	db	32
   167  001039  62                 	db	98	;'b'
   168  00103A  6F                 	db	111	;'o'
   169  00103B  7A                 	db	122	;'z'
   170  00103C  69                 	db	105	;'i'
   171  00103D  21                 	db	33
   172  00103E  00                 	db	0
   173  00103F                     STR_4:
   174  00103F  50                 	db	80	;'P'
   175  001040  6F                 	db	111	;'o'
   176  001041  74                 	db	116	;'t'
   177  001042  3A                 	db	58	;':'
   178  001043  20                 	db	32
   179  001044  25                 	db	37
   180  001045  64                 	db	100	;'d'
   181  001046  20                 	db	32
   182  001047  20                 	db	32
   183  001048  25                 	db	37
   184  001049  64                 	db	100	;'d'
   185  00104A  00                 	db	0
   186  0000                     
   187                           ; #config settings
   188  00104B  00                 	db	0	; dummy byte at the end
   189  0000                     
   190                           	psect	cinit
   191  0018F0                     __pcinit:
   192                           	opt callstack 0
   193  0018F0                     start_initialization:
   194                           	opt callstack 0
   195  0018F0                     __initialization:
   196                           	opt callstack 0
   197  0018F0                     end_of_initialization:
   198                           	opt callstack 0
   199  0018F0                     __end_of__initialization:
   200                           	opt callstack 0
   201  0018F0  0100               	movlb	0
   202  0018F2  EF89  F009         	goto	_main	;jump to C main() function
   203                           
   204                           	psect	cstackCOMRAM
   205  000001                     __pcstackCOMRAM:
   206                           	opt callstack 0
   207  000001                     ??_REV_btn:
   208  000001                     ?_REV_pot:
   209                           	opt callstack 0
   210  000001                     ?___lwdiv:
   211                           	opt callstack 0
   212  000001                     putch@c:
   213                           	opt callstack 0
   214  000001                     LCD_Send@data:
   215                           	opt callstack 0
   216  000001                     ___lwdiv@dividend:
   217                           	opt callstack 0
   218                           
   219                           ; 2 bytes @ 0x0
   220  000001                     	ds	1
   221  000002                     ??_LCD_Init:
   222  000002                     REV_btn@id:
   223                           	opt callstack 0
   224  000002                     LCD_ShowString@textData:
   225                           	opt callstack 0
   226                           
   227                           ; 2 bytes @ 0x1
   228  000002                     	ds	1
   229  000003                     ??_REV_pot:
   230  000003                     REV_btn@btn_state:
   231                           	opt callstack 0
   232  000003                     ___lwdiv@divisor:
   233                           	opt callstack 0
   234                           
   235                           ; 2 bytes @ 0x2
   236  000003                     	ds	1
   237  000004                     REV_led@state:
   238                           	opt callstack 0
   239  000004                     LCD_ShowString@lineNum:
   240                           	opt callstack 0
   241                           
   242                           ; 1 bytes @ 0x3
   243  000004                     	ds	1
   244  000005                     REV_led@id:
   245                           	opt callstack 0
   246  000005                     LCD_ShowString@i:
   247                           	opt callstack 0
   248  000005                     REV_pot@result:
   249                           	opt callstack 0
   250  000005                     ___lwdiv@quotient:
   251                           	opt callstack 0
   252                           
   253                           ; 2 bytes @ 0x4
   254  000005                     	ds	2
   255  000007                     REV_pot@adc_id:
   256                           	opt callstack 0
   257  000007                     ___lwdiv@counter:
   258                           	opt callstack 0
   259                           
   260                           ; 1 bytes @ 0x6
   261  000007                     	ds	1
   262  000008                     ?___lwmod:
   263                           	opt callstack 0
   264  000008                     ___lwmod@dividend:
   265                           	opt callstack 0
   266                           
   267                           ; 2 bytes @ 0x7
   268  000008                     	ds	2
   269  00000A                     ___lwmod@divisor:
   270                           	opt callstack 0
   271                           
   272                           ; 2 bytes @ 0x9
   273  00000A                     	ds	2
   274  00000C                     ___lwmod@counter:
   275                           	opt callstack 0
   276                           
   277                           ; 1 bytes @ 0xB
   278  00000C                     	ds	1
   279  00000D                     ?__doprnt:
   280                           	opt callstack 0
   281  00000D                     __doprnt@pb:
   282                           	opt callstack 0
   283                           
   284                           ; 2 bytes @ 0xC
   285  00000D                     	ds	2
   286  00000F                     __doprnt@f:
   287                           	opt callstack 0
   288                           
   289                           ; 2 bytes @ 0xE
   290  00000F                     	ds	2
   291  000011                     __doprnt@ap:
   292                           	opt callstack 0
   293                           
   294                           ; 2 bytes @ 0x10
   295  000011                     	ds	2
   296  000013                     ??__doprnt:
   297                           
   298                           ; 1 bytes @ 0x12
   299  000013                     	ds	2
   300  000015                     __doprnt@flag:
   301                           	opt callstack 0
   302                           
   303                           ; 1 bytes @ 0x14
   304  000015                     	ds	1
   305  000016                     __doprnt@prec:
   306                           	opt callstack 0
   307                           
   308                           ; 1 bytes @ 0x15
   309  000016                     	ds	1
   310  000017                     __doprnt@val:
   311                           	opt callstack 0
   312                           
   313                           ; 2 bytes @ 0x16
   314  000017                     	ds	2
   315  000019                     __doprnt@c:
   316                           	opt callstack 0
   317                           
   318                           ; 1 bytes @ 0x18
   319  000019                     	ds	1
   320  00001A                     ?_sprintf:
   321                           	opt callstack 0
   322  00001A                     ?_printf:
   323                           	opt callstack 0
   324  00001A                     printf@f:
   325                           	opt callstack 0
   326  00001A                     sprintf@wh:
   327                           	opt callstack 0
   328                           
   329                           ; 2 bytes @ 0x19
   330  00001A                     	ds	2
   331  00001C                     sprintf@f:
   332                           	opt callstack 0
   333                           
   334                           ; 2 bytes @ 0x1B
   335  00001C                     	ds	6
   336  000022                     printf@ap:
   337                           	opt callstack 0
   338  000022                     sprintf@ap:
   339                           	opt callstack 0
   340                           
   341                           ; 2 bytes @ 0x21
   342  000022                     	ds	2
   343  000024                     printf@pb:
   344                           	opt callstack 0
   345  000024                     sprintf@pb:
   346                           	opt callstack 0
   347                           
   348                           ; 4 bytes @ 0x23
   349  000024                     	ds	4
   350  000028                     ??_main:
   351                           
   352                           ; 1 bytes @ 0x27
   353  000028                     	ds	2
   354  00002A                     main@text:
   355                           	opt callstack 0
   356                           
   357                           ; 17 bytes @ 0x29
   358  00002A                     	ds	17
   359  00003B                     main@pot2:
   360                           	opt callstack 0
   361                           
   362                           ; 2 bytes @ 0x3A
   363  00003B                     	ds	2
   364  00003D                     main@a:
   365                           	opt callstack 0
   366                           
   367                           ; 1 bytes @ 0x3C
   368  00003D                     	ds	1
   369  00003E                     main@pot1:
   370                           	opt callstack 0
   371                           
   372                           ; 2 bytes @ 0x3D
   373  00003E                     	ds	2
   374  000040                     main@count:
   375                           	opt callstack 0
   376                           
   377                           ; 2 bytes @ 0x3F
   378  000040                     	ds	2
   379                           
   380 ;;
   381 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   382 ;;
   383 ;; *************** function _main *****************
   384 ;; Defined at:
   385 ;;		line 19 in file "main_advanced.c"
   386 ;; Parameters:    Size  Location     Type
   387 ;;		None
   388 ;; Auto vars:     Size  Location     Type
   389 ;;  text           17   41[COMRAM] unsigned char [17]
   390 ;;  count           2   63[COMRAM] int 
   391 ;;  pot1            2   61[COMRAM] int 
   392 ;;  pot2            2   58[COMRAM] int 
   393 ;;  a               1   60[COMRAM] unsigned char 
   394 ;; Return value:  Size  Location     Type
   395 ;;                  1    wreg      void 
   396 ;; Registers used:
   397 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   398 ;; Tracked objects:
   399 ;;		On entry : 0/0
   400 ;;		On exit  : 0/0
   401 ;;		Unchanged: 0/0
   402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   404 ;;      Locals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   405 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   406 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   407 ;;Total ram usage:       26 bytes
   408 ;; Hardware stack levels required when called:    3
   409 ;; This function calls:
   410 ;;		_LCD_Clear
   411 ;;		_LCD_ShowString
   412 ;;		_REV_btn
   413 ;;		_REV_init
   414 ;;		_REV_led
   415 ;;		_REV_pot
   416 ;;		_printf
   417 ;;		_sprintf
   418 ;; This function is called by:
   419 ;;		Startup code after reset
   420 ;; This function uses a non-reentrant model
   421 ;;
   422                           
   423                           	psect	text0
   424  001312                     __ptext0:
   425                           	opt callstack 0
   426  001312                     _main:
   427                           	opt callstack 28
   428                           
   429                           ;main_advanced.c: 20: REV_init();
   430                           
   431                           ;incstack = 0
   432  001312  ECF9  F00A         	call	_REV_init	;wreg free
   433                           
   434                           ;main_advanced.c: 23: int count = 0;
   435  001316  0E00               	movlw	0
   436  001318  6E41               	movwf	main@count+1,c
   437  00131A  0E00               	movlw	0
   438  00131C  6E40               	movwf	main@count,c
   439                           
   440                           ;main_advanced.c: 24: char a = 'x';
   441  00131E  0E78               	movlw	120
   442  001320  6E3D               	movwf	main@a,c
   443                           
   444                           ;main_advanced.c: 25: char text[17];;main_advanced.c: 26: int pot1,pot2;;main_advanced.c
      +                          : 29: sprintf(text,"Mechlab je bozi!");
   445  001322  0E2A               	movlw	low main@text
   446  001324  6E1A               	movwf	sprintf@wh,c
   447  001326  0E00               	movlw	high main@text
   448  001328  6E1B               	movwf	sprintf@wh+1,c
   449  00132A  0E2E               	movlw	low STR_1
   450  00132C  6E1C               	movwf	sprintf@f,c
   451  00132E  0E10               	movlw	high STR_1
   452  001330  6E1D               	movwf	sprintf@f+1,c
   453  001332  EC05  F00C         	call	_sprintf	;wreg free
   454                           
   455                           ;main_advanced.c: 30: LCD_ShowString(1,text);
   456  001336  0E2A               	movlw	low main@text
   457  001338  6E02               	movwf	LCD_ShowString@textData,c
   458  00133A  0E00               	movlw	high main@text
   459  00133C  6E03               	movwf	LCD_ShowString@textData+1,c
   460  00133E  0E01               	movlw	1
   461  001340  EC82  F00B         	call	_LCD_ShowString
   462                           
   463                           ;main_advanced.c: 31: sprintf(text,"                ");
   464  001344  0E2A               	movlw	low main@text
   465  001346  6E1A               	movwf	sprintf@wh,c
   466  001348  0E00               	movlw	high main@text
   467  00134A  6E1B               	movwf	sprintf@wh+1,c
   468  00134C  0E1D               	movlw	low STR_2
   469  00134E  6E1C               	movwf	sprintf@f,c
   470  001350  0E10               	movlw	high STR_2
   471  001352  6E1D               	movwf	sprintf@f+1,c
   472  001354  EC05  F00C         	call	_sprintf	;wreg free
   473  001358                     l1713:
   474                           
   475                           ;main_advanced.c: 37: if (count == 1){
   476  001358  0440               	decf	main@count,w,c
   477  00135A  1041               	iorwf	main@count+1,w,c
   478  00135C  A4D8               	btfss	status,2,c
   479  00135E  D01B               	goto	l1721
   480                           
   481                           ;main_advanced.c: 38: REV_led(1,1);
   482  001360  0E01               	movlw	1
   483  001362  6E04               	movwf	REV_led@state,c
   484  001364  0E01               	movlw	1
   485  001366  EC41  F00B         	call	_REV_led
   486                           
   487                           ;main_advanced.c: 39: LATBbits.LATB0 = 1;
   488  00136A  808A               	bsf	3978,0,c	;volatile
   489                           
   490                           ;main_advanced.c: 40: printf("Pot1: %d %d (%c)\n",((unsigned char)(((pot1)>>8)&0xFF)),((
      +                          unsigned char)((pot1)&0xFF)),a);
   491  00136C  0E0B               	movlw	low STR_3
   492  00136E  6E1A               	movwf	printf@f,c
   493  001370  0E10               	movlw	high STR_3
   494  001372  6E1B               	movwf	printf@f+1,c
   495  001374  C03F  F028         	movff	main@pot1+1,??_main
   496  001378  6A29               	clrf	(??_main+1)& (0+255),c
   497  00137A  BE28               	btfsc	??_main& (0+255),7,c
   498  00137C  6829               	setf	(??_main+1)& (0+255),c
   499  00137E  5028               	movf	??_main,w,c
   500  001380  6E1C               	movwf	?_printf+2,c
   501  001382  6A1D               	clrf	?_printf+3,c
   502  001384  C03E  F01E         	movff	main@pot1,?_printf+4
   503  001388  6A1F               	clrf	?_printf+5,c
   504  00138A  C03D  F020         	movff	main@a,?_printf+6
   505  00138E  6A21               	clrf	?_printf+7,c
   506  001390  EC47  F00C         	call	_printf	;wreg free
   507                           
   508                           ;main_advanced.c: 42: }else if(count == 2){
   509  001394  D01B               	goto	l228
   510  001396                     l1721:
   511  001396  0E02               	movlw	2
   512  001398  1840               	xorwf	main@count,w,c
   513  00139A  1041               	iorwf	main@count+1,w,c
   514  00139C  A4D8               	btfss	status,2,c
   515  00139E  D006               	goto	l1725
   516                           
   517                           ;main_advanced.c: 43: REV_led(1,0);
   518  0013A0  0E00               	movlw	0
   519  0013A2  6E04               	movwf	REV_led@state,c
   520  0013A4  0E01               	movlw	1
   521  0013A6  EC41  F00B         	call	_REV_led
   522                           
   523                           ;main_advanced.c: 44: }else if(count == 5){
   524  0013AA  D010               	goto	l228
   525  0013AC                     l1725:
   526  0013AC  0E05               	movlw	5
   527  0013AE  1840               	xorwf	main@count,w,c
   528  0013B0  1041               	iorwf	main@count+1,w,c
   529  0013B2  A4D8               	btfss	status,2,c
   530  0013B4  D002               	goto	l1729
   531                           
   532                           ;main_advanced.c: 45: LATBbits.LATB0 = 0;
   533  0013B6  908A               	bcf	3978,0,c	;volatile
   534                           
   535                           ;main_advanced.c: 46: }else if(count == 100){
   536  0013B8  D009               	goto	l228
   537  0013BA                     l1729:
   538  0013BA  0E64               	movlw	100
   539  0013BC  1840               	xorwf	main@count,w,c
   540  0013BE  1041               	iorwf	main@count+1,w,c
   541  0013C0  A4D8               	btfss	status,2,c
   542  0013C2  D004               	goto	l228
   543                           
   544                           ;main_advanced.c: 47: count = 0;
   545  0013C4  0E00               	movlw	0
   546  0013C6  6E41               	movwf	main@count+1,c
   547  0013C8  0E00               	movlw	0
   548  0013CA  6E40               	movwf	main@count,c
   549  0013CC                     l228:
   550                           
   551                           ;main_advanced.c: 48: };main_advanced.c: 50: REV_led(2,REV_btn(1));
   552  0013CC  0E01               	movlw	1
   553  0013CE  ECAD  F00A         	call	_REV_btn
   554  0013D2  6E04               	movwf	REV_led@state,c
   555  0013D4  0E02               	movlw	2
   556  0013D6  EC41  F00B         	call	_REV_led
   557                           
   558                           ;main_advanced.c: 51: REV_led(3,REV_btn(2));
   559  0013DA  0E02               	movlw	2
   560  0013DC  ECAD  F00A         	call	_REV_btn
   561  0013E0  6E04               	movwf	REV_led@state,c
   562  0013E2  0E03               	movlw	3
   563  0013E4  EC41  F00B         	call	_REV_led
   564                           
   565                           ;main_advanced.c: 53: pot1 = REV_pot(1);
   566  0013E8  0E01               	movlw	1
   567  0013EA  ECB1  F00B         	call	_REV_pot
   568  0013EE  C001  F03E         	movff	?_REV_pot,main@pot1
   569  0013F2  C002  F03F         	movff	?_REV_pot+1,main@pot1+1
   570                           
   571                           ;main_advanced.c: 54: pot2 = REV_pot(2);
   572  0013F6  0E02               	movlw	2
   573  0013F8  ECB1  F00B         	call	_REV_pot
   574  0013FC  C001  F03B         	movff	?_REV_pot,main@pot2
   575  001400  C002  F03C         	movff	?_REV_pot+1,main@pot2+1
   576                           
   577                           ;main_advanced.c: 56: sprintf(text,"Pot: %d  %d", pot1,pot2);
   578  001404  0E2A               	movlw	low main@text
   579  001406  6E1A               	movwf	sprintf@wh,c
   580  001408  0E00               	movlw	high main@text
   581  00140A  6E1B               	movwf	sprintf@wh+1,c
   582  00140C  0E3F               	movlw	low STR_4
   583  00140E  6E1C               	movwf	sprintf@f,c
   584  001410  0E10               	movlw	high STR_4
   585  001412  6E1D               	movwf	sprintf@f+1,c
   586  001414  C03E  F01E         	movff	main@pot1,?_sprintf+4
   587  001418  C03F  F01F         	movff	main@pot1+1,?_sprintf+5
   588  00141C  C03B  F020         	movff	main@pot2,?_sprintf+6
   589  001420  C03C  F021         	movff	main@pot2+1,?_sprintf+7
   590  001424  EC05  F00C         	call	_sprintf	;wreg free
   591                           
   592                           ;main_advanced.c: 57: LCD_ShowString(2,text);
   593  001428  0E2A               	movlw	low main@text
   594  00142A  6E02               	movwf	LCD_ShowString@textData,c
   595  00142C  0E00               	movlw	high main@text
   596  00142E  6E03               	movwf	LCD_ShowString@textData+1,c
   597  001430  0E02               	movlw	2
   598  001432  EC82  F00B         	call	_LCD_ShowString
   599                           
   600                           ;main_advanced.c: 59: if (REV_btn(3)){
   601  001436  0E03               	movlw	3
   602  001438  ECAD  F00A         	call	_REV_btn
   603  00143C  0900               	iorlw	0
   604  00143E  A4D8               	btfss	status,2,c
   605                           
   606                           ;main_advanced.c: 60: LCD_Clear();
   607  001440  EC6B  F00C         	call	_LCD_Clear	;wreg free
   608                           
   609                           ;main_advanced.c: 61: };main_advanced.c: 63: if (REV_btn(4)){
   610  001444  0E04               	movlw	4
   611  001446  ECAD  F00A         	call	_REV_btn
   612  00144A  0900               	iorlw	0
   613  00144C  B4D8               	btfsc	status,2,c
   614  00144E  D01B               	goto	l1757
   615                           
   616                           ;main_advanced.c: 64: sprintf(text,"Mechlab je bozi!");
   617  001450  0E2A               	movlw	low main@text
   618  001452  6E1A               	movwf	sprintf@wh,c
   619  001454  0E00               	movlw	high main@text
   620  001456  6E1B               	movwf	sprintf@wh+1,c
   621  001458  0E2E               	movlw	low STR_1
   622  00145A  6E1C               	movwf	sprintf@f,c
   623  00145C  0E10               	movlw	high STR_1
   624  00145E  6E1D               	movwf	sprintf@f+1,c
   625  001460  EC05  F00C         	call	_sprintf	;wreg free
   626                           
   627                           ;main_advanced.c: 65: LCD_ShowString(1,text);
   628  001464  0E2A               	movlw	low main@text
   629  001466  6E02               	movwf	LCD_ShowString@textData,c
   630  001468  0E00               	movlw	high main@text
   631  00146A  6E03               	movwf	LCD_ShowString@textData+1,c
   632  00146C  0E01               	movlw	1
   633  00146E  EC82  F00B         	call	_LCD_ShowString
   634                           
   635                           ;main_advanced.c: 66: sprintf(text,"                ");
   636  001472  0E2A               	movlw	low main@text
   637  001474  6E1A               	movwf	sprintf@wh,c
   638  001476  0E00               	movlw	high main@text
   639  001478  6E1B               	movwf	sprintf@wh+1,c
   640  00147A  0E1D               	movlw	low STR_2
   641  00147C  6E1C               	movwf	sprintf@f,c
   642  00147E  0E10               	movlw	high STR_2
   643  001480  6E1D               	movwf	sprintf@f+1,c
   644  001482  EC05  F00C         	call	_sprintf	;wreg free
   645  001486                     l1757:
   646                           
   647                           ;main_advanced.c: 67: };main_advanced.c: 71: _delay((unsigned long)((10000 - 8000 - 1800
      +                          )*(16000000/4000000.0)));
   648  001486  0EA0               	movlw	160
   649  001488                     u1057:
   650  001488  D000               	nop2	
   651  00148A  2EE8               	decfsz	wreg,f,c
   652  00148C  D7FD               	bra	u1057
   653                           
   654                           ;main_advanced.c: 72: count++;
   655  00148E  4A40               	infsnz	main@count,f,c
   656  001490  2A41               	incf	main@count+1,f,c
   657  001492  D762               	goto	l1713
   658  001494                     __end_of_main:
   659                           	opt callstack 0
   660                           
   661 ;; *************** function _sprintf *****************
   662 ;; Defined at:
   663 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\sprintf.c"
   664 ;; Parameters:    Size  Location     Type
   665 ;;  wh              2   25[COMRAM] PTR unsigned char 
   666 ;;		 -> main@text(17), 
   667 ;;  f               2   27[COMRAM] PTR const unsigned char 
   668 ;;		 -> STR_6(17), STR_5(17), STR_4(12), STR_2(17), 
   669 ;;		 -> STR_1(17), 
   670 ;; Auto vars:     Size  Location     Type
   671 ;;  pb              4   35[COMRAM] struct __prbuf
   672 ;;  ap              2   33[COMRAM] PTR void [1]
   673 ;;		 -> ?_sprintf(2), ?_printf(2), 
   674 ;; Return value:  Size  Location     Type
   675 ;;                  2   25[COMRAM] int 
   676 ;; Registers used:
   677 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   678 ;; Tracked objects:
   679 ;;		On entry : 0/0
   680 ;;		On exit  : 0/0
   681 ;;		Unchanged: 0/0
   682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   683 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   684 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   685 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   686 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   687 ;;Total ram usage:       14 bytes
   688 ;; Hardware stack levels used:    1
   689 ;; Hardware stack levels required when called:    2
   690 ;; This function calls:
   691 ;;		__doprnt
   692 ;; This function is called by:
   693 ;;		_main
   694 ;; This function uses a non-reentrant model
   695 ;;
   696                           
   697                           	psect	text1
   698  00180A                     __ptext1:
   699                           	opt callstack 0
   700  00180A                     _sprintf:
   701                           	opt callstack 28
   702                           
   703                           ;incstack = 0
   704  00180A  C01A  F024         	movff	sprintf@wh,sprintf@pb
   705  00180E  C01B  F025         	movff	sprintf@wh+1,sprintf@pb+1
   706  001812  0E00               	movlw	0
   707  001814  6E26               	movwf	sprintf@pb+2,c
   708  001816  0E00               	movlw	0
   709  001818  6E27               	movwf	sprintf@pb+3,c
   710  00181A  0E1E               	movlw	low (?_sprintf+4)
   711  00181C  6E22               	movwf	sprintf@ap,c
   712  00181E  0E00               	movlw	high (?_sprintf+4)
   713  001820  6E23               	movwf	sprintf@ap+1,c
   714  001822  0E24               	movlw	low sprintf@pb
   715  001824  6E0D               	movwf	__doprnt@pb,c
   716  001826  0E00               	movlw	high sprintf@pb
   717  001828  6E0E               	movwf	__doprnt@pb+1,c
   718  00182A  C01C  F00F         	movff	sprintf@f,__doprnt@f
   719  00182E  C01D  F010         	movff	sprintf@f+1,__doprnt@f+1
   720  001832  0E22               	movlw	low sprintf@ap
   721  001834  6E11               	movwf	__doprnt@ap,c
   722  001836  0E00               	movlw	high sprintf@ap
   723  001838  6E12               	movwf	__doprnt@ap+1,c
   724  00183A  EC26  F008         	call	__doprnt	;wreg free
   725  00183E  C024  FFD9         	movff	sprintf@pb,fsr2l
   726  001842  C025  FFDA         	movff	sprintf@pb+1,fsr2h
   727  001846  0E00               	movlw	0
   728  001848  6EDF               	movwf	indf2,c
   729  00184A  0012               	return		;funcret
   730  00184C                     __end_of_sprintf:
   731                           	opt callstack 0
   732                           
   733 ;; *************** function _printf *****************
   734 ;; Defined at:
   735 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\printf.c"
   736 ;; Parameters:    Size  Location     Type
   737 ;;  f               2   25[COMRAM] PTR const unsigned char 
   738 ;;		 -> STR_3(18), 
   739 ;; Auto vars:     Size  Location     Type
   740 ;;  pb              4   35[COMRAM] struct __prbuf
   741 ;;  ap              2   33[COMRAM] PTR void [1]
   742 ;;		 -> ?_sprintf(2), ?_printf(2), 
   743 ;; Return value:  Size  Location     Type
   744 ;;                  2   25[COMRAM] int 
   745 ;; Registers used:
   746 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   747 ;; Tracked objects:
   748 ;;		On entry : 0/0
   749 ;;		On exit  : 0/0
   750 ;;		Unchanged: 0/0
   751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   752 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   753 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   755 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   756 ;;Total ram usage:       14 bytes
   757 ;; Hardware stack levels used:    1
   758 ;; Hardware stack levels required when called:    2
   759 ;; This function calls:
   760 ;;		__doprnt
   761 ;; This function is called by:
   762 ;;		_main
   763 ;; This function uses a non-reentrant model
   764 ;;
   765                           
   766                           	psect	text2
   767  00188E                     __ptext2:
   768                           	opt callstack 0
   769  00188E                     _printf:
   770                           	opt callstack 28
   771                           
   772                           ;incstack = 0
   773  00188E  0E00               	movlw	0
   774  001890  6E24               	movwf	printf@pb,c
   775  001892  0E00               	movlw	0
   776  001894  6E25               	movwf	printf@pb+1,c
   777  001896  0EE4               	movlw	low _putch
   778  001898  6E26               	movwf	printf@pb+2,c
   779  00189A  0E18               	movlw	high _putch
   780  00189C  6E27               	movwf	printf@pb+3,c
   781  00189E  0E1C               	movlw	low (?_printf+2)
   782  0018A0  6E22               	movwf	printf@ap,c
   783  0018A2  0E00               	movlw	high (?_printf+2)
   784  0018A4  6E23               	movwf	printf@ap+1,c
   785                           
   786                           ;	Return value of _printf is never used
   787  0018A6  0E24               	movlw	low printf@pb
   788  0018A8  6E0D               	movwf	__doprnt@pb,c
   789  0018AA  0E00               	movlw	high printf@pb
   790  0018AC  6E0E               	movwf	__doprnt@pb+1,c
   791  0018AE  C01A  F00F         	movff	printf@f,__doprnt@f
   792  0018B2  C01B  F010         	movff	printf@f+1,__doprnt@f+1
   793  0018B6  0E22               	movlw	low printf@ap
   794  0018B8  6E11               	movwf	__doprnt@ap,c
   795  0018BA  0E00               	movlw	high printf@ap
   796  0018BC  6E12               	movwf	__doprnt@ap+1,c
   797  0018BE  EC26  F008         	call	__doprnt	;wreg free
   798  0018C2  0012               	return		;funcret
   799  0018C4                     __end_of_printf:
   800                           	opt callstack 0
   801                           
   802 ;; *************** function __doprnt *****************
   803 ;; Defined at:
   804 ;;		line 466 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c"
   805 ;; Parameters:    Size  Location     Type
   806 ;;  pb              2   12[COMRAM] PTR struct __prbuf
   807 ;;		 -> sprintf@pb(4), printf@pb(4), 
   808 ;;  f               2   14[COMRAM] PTR const unsigned char 
   809 ;;		 -> STR_6(17), STR_5(17), STR_4(12), STR_3(18), 
   810 ;;		 -> STR_2(17), STR_1(17), 
   811 ;;  ap              2   16[COMRAM] PTR PTR void 
   812 ;;		 -> sprintf@ap(2), printf@ap(2), 
   813 ;; Auto vars:     Size  Location     Type
   814 ;;  tmpval          4    0        struct .
   815 ;;  cp              3    0        PTR const unsigned char 
   816 ;;  val             2   22[COMRAM] unsigned int 
   817 ;;  len             2    0        unsigned int 
   818 ;;  c               1   24[COMRAM] unsigned char 
   819 ;;  prec            1   21[COMRAM] char 
   820 ;;  flag            1   20[COMRAM] unsigned char 
   821 ;; Return value:  Size  Location     Type
   822 ;;                  2   12[COMRAM] int 
   823 ;; Registers used:
   824 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   825 ;; Tracked objects:
   826 ;;		On entry : 0/0
   827 ;;		On exit  : 0/0
   828 ;;		Unchanged: 0/0
   829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   830 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   831 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   832 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   833 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   834 ;;Total ram usage:       13 bytes
   835 ;; Hardware stack levels used:    1
   836 ;; Hardware stack levels required when called:    1
   837 ;; This function calls:
   838 ;;		Absolute function
   839 ;;		___lwdiv
   840 ;;		___lwmod
   841 ;;		_putch
   842 ;; This function is called by:
   843 ;;		_printf
   844 ;;		_sprintf
   845 ;; This function uses a non-reentrant model
   846 ;;
   847                           
   848                           	psect	text3
   849  00104C                     __ptext3:
   850                           	opt callstack 0
   851  00104C                     __doprnt:
   852                           	opt callstack 28
   853                           
   854                           ;doprnt.c: 507: char c;;doprnt.c: 516: signed char prec;;doprnt.c: 520: unsigned char fl
      +                          ag;;doprnt.c: 535: union {;doprnt.c: 536: unsigned long vd;;doprnt.c: 537: double integ;
      +                          ;doprnt.c: 538: } tmpval;;doprnt.c: 540: unsigned int val;;doprnt.c: 541: unsigned len;;
      +                          doprnt.c: 542: const char * cp;;doprnt.c: 548: while((c = *f++)) {
   855                           
   856                           ;incstack = 0
   857  00104C  D150               	goto	u920
   858  00104E                     l1499:
   859                           
   860                           ;doprnt.c: 550: if(c != '%')
   861  00104E  0E25               	movlw	37
   862  001050  1819               	xorwf	__doprnt@c,w,c
   863  001052  B4D8               	btfsc	status,2,c
   864  001054  D019               	goto	l1509
   865  001056  EE20 F002          	lfsr	2,2
   866  00105A  500D               	movf	__doprnt@pb,w,c
   867  00105C  26D9               	addwf	fsr2l,f,c
   868  00105E  500E               	movf	__doprnt@pb+1,w,c
   869  001060  22DA               	addwfc	fsr2h,f,c
   870  001062  50DE               	movf	postinc2,w,c
   871  001064  10DE               	iorwf	postinc2,w,c
   872  001066  B4D8               	btfsc	status,2,c
   873  001068  D044               	goto	l1515
   874  00106A  EE20 F002          	lfsr	2,2
   875  00106E  500D               	movf	__doprnt@pb,w,c
   876  001070  26D9               	addwf	fsr2l,f,c
   877  001072  500E               	movf	__doprnt@pb+1,w,c
   878  001074  22DA               	addwfc	fsr2h,f,c
   879  001076  CFDE F013          	movff	postinc2,??__doprnt
   880  00107A  CFDD F014          	movff	postdec2,??__doprnt+1
   881  00107E  D801               	call	u818
   882  001080  D136               	goto	u920
   883  001082                     u818:
   884  001082  0005               	push	
   885  001084  6EFA               	movwf	pclath,c
   886  001086  D02D               	goto	L1
   887  001088                     l1509:
   888                           
   889                           ;doprnt.c: 555: };doprnt.c: 560: flag = 0;
   890  001088  0E00               	movlw	0
   891  00108A  6E15               	movwf	__doprnt@flag,c
   892                           
   893                           ;doprnt.c: 654: switch(c = *f++) {
   894  00108C  D048               	goto	l1521
   895  00108E                     l1511:
   896                           
   897                           ;doprnt.c: 818: c = (*(int *)__va_arg((*(int **)ap), (int)0));
   898  00108E  C011  FFD9         	movff	__doprnt@ap,fsr2l
   899  001092  C012  FFDA         	movff	__doprnt@ap+1,fsr2h
   900  001096  CFDF F013          	movff	indf2,??__doprnt
   901  00109A  0E02               	movlw	2
   902  00109C  26DE               	addwf	postinc2,f,c
   903  00109E  CFDF F014          	movff	indf2,??__doprnt+1
   904  0010A2  0E00               	movlw	0
   905  0010A4  22DD               	addwfc	postdec2,f,c
   906  0010A6  C013  FFD9         	movff	??__doprnt,fsr2l
   907  0010AA  C014  FFDA         	movff	??__doprnt+1,fsr2h
   908  0010AE  50DF               	movf	indf2,w,c
   909  0010B0  6E19               	movwf	__doprnt@c,c
   910  0010B2                     l258:
   911  0010B2  EE20 F002          	lfsr	2,2
   912  0010B6  500D               	movf	__doprnt@pb,w,c
   913  0010B8  26D9               	addwf	fsr2l,f,c
   914  0010BA  500E               	movf	__doprnt@pb+1,w,c
   915  0010BC  22DA               	addwfc	fsr2h,f,c
   916  0010BE  50DE               	movf	postinc2,w,c
   917  0010C0  10DE               	iorwf	postinc2,w,c
   918  0010C2  B4D8               	btfsc	status,2,c
   919  0010C4  D016               	goto	l1515
   920  0010C6  EE20 F002          	lfsr	2,2
   921  0010CA  500D               	movf	__doprnt@pb,w,c
   922  0010CC  26D9               	addwf	fsr2l,f,c
   923  0010CE  500E               	movf	__doprnt@pb+1,w,c
   924  0010D0  22DA               	addwfc	fsr2h,f,c
   925  0010D2  CFDE F013          	movff	postinc2,??__doprnt
   926  0010D6  CFDD F014          	movff	postdec2,??__doprnt+1
   927  0010DA  D801               	call	u838
   928  0010DC  D108               	goto	u920
   929  0010DE                     u838:
   930  0010DE  0005               	push	
   931  0010E0  6EFA               	movwf	pclath,c
   932  0010E2                     L1:
   933  0010E2  5013               	movf	??__doprnt,w,c
   934  0010E4  6EFD               	movwf	tosl,c
   935  0010E6  5014               	movf	??__doprnt+1,w,c
   936  0010E8  6EFE               	movwf	tosh,c
   937  0010EA  6AFF               	clrf	tosu,c
   938  0010EC  50FA               	movf	pclath,w,c
   939  0010EE  5019               	movf	__doprnt@c,w,c
   940  0010F0  0012               	return		;indir
   941  0010F2                     l1515:
   942  0010F2  C00D  FFD9         	movff	__doprnt@pb,fsr2l
   943  0010F6  C00E  FFDA         	movff	__doprnt@pb+1,fsr2h
   944  0010FA  CFDE F013          	movff	postinc2,??__doprnt
   945  0010FE  CFDD F014          	movff	postdec2,??__doprnt+1
   946  001102  C013  FFD9         	movff	??__doprnt,fsr2l
   947  001106  C014  FFDA         	movff	??__doprnt+1,fsr2h
   948  00110A  C019  FFDF         	movff	__doprnt@c,indf2
   949  00110E  C00D  FFD9         	movff	__doprnt@pb,fsr2l
   950  001112  C00E  FFDA         	movff	__doprnt@pb+1,fsr2h
   951  001116  2ADE               	incf	postinc2,f,c
   952  001118  0E00               	movlw	0
   953  00111A  22DD               	addwfc	postdec2,f,c
   954  00111C  D0E8               	goto	u920
   955  00111E                     l1521:
   956  00111E  C00F  FFF6         	movff	__doprnt@f,tblptrl
   957  001122  C010  FFF7         	movff	__doprnt@f+1,tblptrh
   958  001126  4A0F               	infsnz	__doprnt@f,f,c
   959  001128  2A10               	incf	__doprnt@f+1,f,c
   960  00112A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
   961  00112A  6AF8               	clrf	tblptru,c
   962  00112C                     	endif
   963  00112C                     	if	0	;tblptru may be non-zero
   964  00112C                     	endif
   965  00112C  0008               	tblrd		*
   966  00112E  CFF5 F019          	movff	tablat,__doprnt@c
   967  001132  5019               	movf	__doprnt@c,w,c
   968                           
   969                           ; Switch size 1, requested type "simple"
   970                           ; Number of cases is 4, Range of values is 0 to 105
   971                           ; switch strategies available:
   972                           ; Name         Instructions Cycles
   973                           ; simple_byte           13     7 (average)
   974                           ;	Chosen strategy is simple_byte
   975  001134  0A00               	xorlw	0	; case 0
   976  001136  B4D8               	btfsc	status,2,c
   977  001138  D0E7               	goto	u930
   978  00113A  0A63               	xorlw	99	; case 99
   979  00113C  B4D8               	btfsc	status,2,c
   980  00113E  D7A7               	goto	l1511
   981  001140  0A07               	xorlw	7	; case 100
   982  001142  B4D8               	btfsc	status,2,c
   983  001144  D003               	goto	l1523
   984  001146  0A0D               	xorlw	13	; case 105
   985  001148  A4D8               	btfss	status,2,c
   986  00114A  D7B3               	goto	l258
   987  00114C                     l1523:
   988                           
   989                           ;doprnt.c: 1272: {;doprnt.c: 1278: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
   990  00114C  C011  FFD9         	movff	__doprnt@ap,fsr2l
   991  001150  C012  FFDA         	movff	__doprnt@ap+1,fsr2h
   992  001154  CFDF F013          	movff	indf2,??__doprnt
   993  001158  0E02               	movlw	2
   994  00115A  26DE               	addwf	postinc2,f,c
   995  00115C  CFDF F014          	movff	indf2,??__doprnt+1
   996  001160  0E00               	movlw	0
   997  001162  22DD               	addwfc	postdec2,f,c
   998  001164  C013  FFD9         	movff	??__doprnt,fsr2l
   999  001168  C014  FFDA         	movff	??__doprnt+1,fsr2h
  1000  00116C  CFDE F017          	movff	postinc2,__doprnt@val
  1001  001170  CFDD F018          	movff	postdec2,__doprnt@val+1
  1002                           
  1003                           ;doprnt.c: 1280: if((int)val < 0) {
  1004  001174  AE18               	btfss	__doprnt@val+1,7,c
  1005  001176  D006               	goto	l1531
  1006                           
  1007                           ;doprnt.c: 1281: flag |= 0x03;
  1008  001178  0E03               	movlw	3
  1009  00117A  1215               	iorwf	__doprnt@flag,f,c
  1010                           
  1011                           ;doprnt.c: 1282: val = -val;
  1012  00117C  6C17               	negf	__doprnt@val,c
  1013  00117E  1E18               	comf	__doprnt@val+1,f,c
  1014  001180  B0D8               	btfsc	status,0,c
  1015  001182  2A18               	incf	__doprnt@val+1,f,c
  1016  001184                     l1531:
  1017                           
  1018                           ;doprnt.c: 1283: };doprnt.c: 1285: };doprnt.c: 1324: for(c = 1 ; c != sizeof dpowers/siz
      +                          eof dpowers[0] ; c++)
  1019  001184  0E01               	movlw	1
  1020  001186  6E19               	movwf	__doprnt@c,c
  1021  001188                     l1537:
  1022                           
  1023                           ;doprnt.c: 1325: if(val < dpowers[c])
  1024  001188  5019               	movf	__doprnt@c,w,c
  1025  00118A  0D02               	mullw	2
  1026  00118C  0E01               	movlw	low _dpowers
  1027  00118E  24F3               	addwf	prodl,w,c
  1028  001190  6EF6               	movwf	tblptrl,c
  1029  001192  0E10               	movlw	high _dpowers
  1030  001194  20F4               	addwfc	prodh,w,c
  1031  001196  6EF7               	movwf	tblptrh,c
  1032  001198                     	if	1	;There are 3 active tblptr bytes
  1033  001198  6AF8               	clrf	tblptru,c
  1034  00119A  0E00               	movlw	low (__mediumconst shr (0+16))
  1035  00119C  22F8               	addwfc	tblptru,f,c
  1036  00119E                     	endif
  1037  00119E  0009               	tblrd		*+
  1038  0011A0  50F5               	movf	tablat,w,c
  1039  0011A2  5C17               	subwf	__doprnt@val,w,c
  1040  0011A4  0009               	tblrd		*+
  1041  0011A6  50F5               	movf	tablat,w,c
  1042  0011A8  5818               	subwfb	__doprnt@val+1,w,c
  1043  0011AA  A0D8               	btfss	status,0,c
  1044  0011AC  D005               	goto	u860
  1045  0011AE  2A19               	incf	__doprnt@c,f,c
  1046  0011B0  0E05               	movlw	5
  1047  0011B2  1819               	xorwf	__doprnt@c,w,c
  1048  0011B4  A4D8               	btfss	status,2,c
  1049  0011B6  D7E8               	goto	l1537
  1050  0011B8                     u860:
  1051                           
  1052                           ;doprnt.c: 1441: {;doprnt.c: 1457: if(flag & 0x03)
  1053  0011B8  C015  F013         	movff	__doprnt@flag,??__doprnt
  1054  0011BC  0E03               	movlw	3
  1055  0011BE  1613               	andwf	??__doprnt,f,c
  1056  0011C0  B4D8               	btfsc	status,2,c
  1057  0011C2  D035               	goto	l1555
  1058  0011C4  EE20 F002          	lfsr	2,2
  1059  0011C8  500D               	movf	__doprnt@pb,w,c
  1060  0011CA  26D9               	addwf	fsr2l,f,c
  1061  0011CC  500E               	movf	__doprnt@pb+1,w,c
  1062  0011CE  22DA               	addwfc	fsr2h,f,c
  1063  0011D0  50DE               	movf	postinc2,w,c
  1064  0011D2  10DE               	iorwf	postinc2,w,c
  1065  0011D4  B4D8               	btfsc	status,2,c
  1066  0011D6  D016               	goto	l1551
  1067  0011D8  EE20 F002          	lfsr	2,2
  1068  0011DC  500D               	movf	__doprnt@pb,w,c
  1069  0011DE  26D9               	addwf	fsr2l,f,c
  1070  0011E0  500E               	movf	__doprnt@pb+1,w,c
  1071  0011E2  22DA               	addwfc	fsr2h,f,c
  1072  0011E4  CFDE F013          	movff	postinc2,??__doprnt
  1073  0011E8  CFDD F014          	movff	postdec2,??__doprnt+1
  1074  0011EC  D801               	call	u898
  1075  0011EE  D01F               	goto	l1555
  1076  0011F0                     u898:
  1077  0011F0  0005               	push	
  1078  0011F2  6EFA               	movwf	pclath,c
  1079  0011F4  5013               	movf	??__doprnt,w,c
  1080  0011F6  6EFD               	movwf	tosl,c
  1081  0011F8  5014               	movf	??__doprnt+1,w,c
  1082  0011FA  6EFE               	movwf	tosh,c
  1083  0011FC  6AFF               	clrf	tosu,c
  1084  0011FE  50FA               	movf	pclath,w,c
  1085  001200  0E2D               	movlw	45
  1086  001202  0012               	return		;indir
  1087  001204                     l1551:
  1088  001204  C00D  FFD9         	movff	__doprnt@pb,fsr2l
  1089  001208  C00E  FFDA         	movff	__doprnt@pb+1,fsr2h
  1090  00120C  CFDE F013          	movff	postinc2,??__doprnt
  1091  001210  CFDD F014          	movff	postdec2,??__doprnt+1
  1092  001214  C013  FFD9         	movff	??__doprnt,fsr2l
  1093  001218  C014  FFDA         	movff	??__doprnt+1,fsr2h
  1094  00121C  0E2D               	movlw	45
  1095  00121E  6EDF               	movwf	indf2,c
  1096  001220  C00D  FFD9         	movff	__doprnt@pb,fsr2l
  1097  001224  C00E  FFDA         	movff	__doprnt@pb+1,fsr2h
  1098  001228  2ADE               	incf	postinc2,f,c
  1099  00122A  0E00               	movlw	0
  1100  00122C  22DD               	addwfc	postdec2,f,c
  1101  00122E                     l1555:
  1102                           
  1103                           ;doprnt.c: 1488: };doprnt.c: 1491: prec = c;
  1104  00122E  C019  F016         	movff	__doprnt@c,__doprnt@prec
  1105                           
  1106                           ;doprnt.c: 1493: while(prec--) {
  1107  001232  D059               	goto	l1567
  1108  001234                     l1557:
  1109                           
  1110                           ;doprnt.c: 1497: {;doprnt.c: 1508: c = (val / dpowers[prec]) % 10 + '0';
  1111  001234  5016               	movf	__doprnt@prec,w,c
  1112  001236  0D02               	mullw	2
  1113  001238  0E01               	movlw	low _dpowers
  1114  00123A  24F3               	addwf	prodl,w,c
  1115  00123C  6EF6               	movwf	tblptrl,c
  1116  00123E  0E10               	movlw	high _dpowers
  1117  001240  20F4               	addwfc	prodh,w,c
  1118  001242  6EF7               	movwf	tblptrh,c
  1119  001244                     	if	1	;There are 3 active tblptr bytes
  1120  001244  6AF8               	clrf	tblptru,c
  1121  001246  0E00               	movlw	low (__mediumconst shr (0+16))
  1122  001248  22F8               	addwfc	tblptru,f,c
  1123  00124A                     	endif
  1124  00124A  0009               	tblrd		*+
  1125  00124C  CFF5 F003          	movff	tablat,___lwdiv@divisor
  1126  001250  000A               	tblrd		*-
  1127  001252  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  1128  001256  C017  F001         	movff	__doprnt@val,___lwdiv@dividend
  1129  00125A  C018  F002         	movff	__doprnt@val+1,___lwdiv@dividend+1
  1130  00125E  ECDC  F00B         	call	___lwdiv
  1131  001262  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  1132  001266  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  1133  00126A  0E00               	movlw	0
  1134  00126C  6E0B               	movwf	___lwmod@divisor+1,c
  1135  00126E  0E0A               	movlw	10
  1136  001270  6E0A               	movwf	___lwmod@divisor,c
  1137  001272  EC26  F00C         	call	___lwmod	;wreg free
  1138  001276  5008               	movf	?___lwmod,w,c
  1139  001278  0F30               	addlw	48
  1140  00127A  6E19               	movwf	__doprnt@c,c
  1141  00127C  EE20 F002          	lfsr	2,2
  1142  001280  500D               	movf	__doprnt@pb,w,c
  1143  001282  26D9               	addwf	fsr2l,f,c
  1144  001284  500E               	movf	__doprnt@pb+1,w,c
  1145  001286  22DA               	addwfc	fsr2h,f,c
  1146  001288  50DE               	movf	postinc2,w,c
  1147  00128A  10DE               	iorwf	postinc2,w,c
  1148  00128C  B4D8               	btfsc	status,2,c
  1149  00128E  D016               	goto	l1563
  1150  001290  EE20 F002          	lfsr	2,2
  1151  001294  500D               	movf	__doprnt@pb,w,c
  1152  001296  26D9               	addwf	fsr2l,f,c
  1153  001298  500E               	movf	__doprnt@pb+1,w,c
  1154  00129A  22DA               	addwfc	fsr2h,f,c
  1155  00129C  CFDE F013          	movff	postinc2,??__doprnt
  1156  0012A0  CFDD F014          	movff	postdec2,??__doprnt+1
  1157  0012A4  D801               	call	u918
  1158  0012A6  D01F               	goto	l1567
  1159  0012A8                     u918:
  1160  0012A8  0005               	push	
  1161  0012AA  6EFA               	movwf	pclath,c
  1162  0012AC  5013               	movf	??__doprnt,w,c
  1163  0012AE  6EFD               	movwf	tosl,c
  1164  0012B0  5014               	movf	??__doprnt+1,w,c
  1165  0012B2  6EFE               	movwf	tosh,c
  1166  0012B4  6AFF               	clrf	tosu,c
  1167  0012B6  50FA               	movf	pclath,w,c
  1168  0012B8  5019               	movf	__doprnt@c,w,c
  1169  0012BA  0012               	return		;indir
  1170  0012BC                     l1563:
  1171  0012BC  C00D  FFD9         	movff	__doprnt@pb,fsr2l
  1172  0012C0  C00E  FFDA         	movff	__doprnt@pb+1,fsr2h
  1173  0012C4  CFDE F013          	movff	postinc2,??__doprnt
  1174  0012C8  CFDD F014          	movff	postdec2,??__doprnt+1
  1175  0012CC  C013  FFD9         	movff	??__doprnt,fsr2l
  1176  0012D0  C014  FFDA         	movff	??__doprnt+1,fsr2h
  1177  0012D4  C019  FFDF         	movff	__doprnt@c,indf2
  1178  0012D8  C00D  FFD9         	movff	__doprnt@pb,fsr2l
  1179  0012DC  C00E  FFDA         	movff	__doprnt@pb+1,fsr2h
  1180  0012E0  2ADE               	incf	postinc2,f,c
  1181  0012E2  0E00               	movlw	0
  1182  0012E4  22DD               	addwfc	postdec2,f,c
  1183  0012E6                     l1567:
  1184  0012E6  0616               	decf	__doprnt@prec,f,c
  1185  0012E8  2816               	incf	__doprnt@prec,w,c
  1186  0012EA  A4D8               	btfss	status,2,c
  1187  0012EC  D7A3               	goto	l1557
  1188  0012EE                     u920:
  1189  0012EE  C00F  FFF6         	movff	__doprnt@f,tblptrl
  1190  0012F2  C010  FFF7         	movff	__doprnt@f+1,tblptrh
  1191  0012F6  4A0F               	infsnz	__doprnt@f,f,c
  1192  0012F8  2A10               	incf	__doprnt@f+1,f,c
  1193  0012FA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1194  0012FA  6AF8               	clrf	tblptru,c
  1195  0012FC                     	endif
  1196  0012FC                     	if	0	;tblptru may be non-zero
  1197  0012FC                     	endif
  1198  0012FC  0008               	tblrd		*
  1199  0012FE  CFF5 F019          	movff	tablat,__doprnt@c
  1200  001302  5019               	movf	__doprnt@c,w,c
  1201  001304  A4D8               	btfss	status,2,c
  1202  001306  D6A3               	goto	l1499
  1203  001308                     u930:
  1204                           
  1205                           ;doprnt.c: 1559: return 0;
  1206  001308  0E00               	movlw	0
  1207  00130A  6E0E               	movwf	?__doprnt+1,c
  1208  00130C  0E00               	movlw	0
  1209  00130E  6E0D               	movwf	?__doprnt,c
  1210  001310  0012               	return		;funcret
  1211  001312                     __end_of__doprnt:
  1212                           	opt callstack 0
  1213                           
  1214 ;; *************** function ___lwmod *****************
  1215 ;; Defined at:
  1216 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwmod.c"
  1217 ;; Parameters:    Size  Location     Type
  1218 ;;  dividend        2    7[COMRAM] unsigned int 
  1219 ;;  divisor         2    9[COMRAM] unsigned int 
  1220 ;; Auto vars:     Size  Location     Type
  1221 ;;  counter         1   11[COMRAM] unsigned char 
  1222 ;; Return value:  Size  Location     Type
  1223 ;;                  2    7[COMRAM] unsigned int 
  1224 ;; Registers used:
  1225 ;;		wreg, status,2, status,0
  1226 ;; Tracked objects:
  1227 ;;		On entry : 0/0
  1228 ;;		On exit  : 0/0
  1229 ;;		Unchanged: 0/0
  1230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1231 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1232 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1233 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1234 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1235 ;;Total ram usage:        5 bytes
  1236 ;; Hardware stack levels used:    1
  1237 ;; This function calls:
  1238 ;;		Nothing
  1239 ;; This function is called by:
  1240 ;;		__doprnt
  1241 ;; This function uses a non-reentrant model
  1242 ;;
  1243                           
  1244                           	psect	text4
  1245  00184C                     __ptext4:
  1246                           	opt callstack 0
  1247  00184C                     ___lwmod:
  1248                           	opt callstack 28
  1249                           
  1250                           ;incstack = 0
  1251  00184C  500A               	movf	___lwmod@divisor,w,c
  1252  00184E  100B               	iorwf	___lwmod@divisor+1,w,c
  1253  001850  B4D8               	btfsc	status,2,c
  1254  001852  D018               	goto	l771
  1255  001854  0E01               	movlw	1
  1256  001856  6E0C               	movwf	___lwmod@counter,c
  1257  001858  D004               	goto	l1461
  1258  00185A                     l1459:
  1259  00185A  90D8               	bcf	status,0,c
  1260  00185C  360A               	rlcf	___lwmod@divisor,f,c
  1261  00185E  360B               	rlcf	___lwmod@divisor+1,f,c
  1262  001860  2A0C               	incf	___lwmod@counter,f,c
  1263  001862                     l1461:
  1264  001862  AE0B               	btfss	___lwmod@divisor+1,7,c
  1265  001864  D7FA               	goto	l1459
  1266  001866                     u620:
  1267  001866  500A               	movf	___lwmod@divisor,w,c
  1268  001868  5C08               	subwf	___lwmod@dividend,w,c
  1269  00186A  500B               	movf	___lwmod@divisor+1,w,c
  1270  00186C  5809               	subwfb	___lwmod@dividend+1,w,c
  1271  00186E  A0D8               	btfss	status,0,c
  1272  001870  D004               	goto	l1467
  1273  001872  500A               	movf	___lwmod@divisor,w,c
  1274  001874  5E08               	subwf	___lwmod@dividend,f,c
  1275  001876  500B               	movf	___lwmod@divisor+1,w,c
  1276  001878  5A09               	subwfb	___lwmod@dividend+1,f,c
  1277  00187A                     l1467:
  1278  00187A  90D8               	bcf	status,0,c
  1279  00187C  320B               	rrcf	___lwmod@divisor+1,f,c
  1280  00187E  320A               	rrcf	___lwmod@divisor,f,c
  1281  001880  2E0C               	decfsz	___lwmod@counter,f,c
  1282  001882  D7F1               	goto	u620
  1283  001884                     l771:
  1284  001884  C008  F008         	movff	___lwmod@dividend,?___lwmod
  1285  001888  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  1286  00188C  0012               	return		;funcret
  1287  00188E                     __end_of___lwmod:
  1288                           	opt callstack 0
  1289                           
  1290 ;; *************** function ___lwdiv *****************
  1291 ;; Defined at:
  1292 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwdiv.c"
  1293 ;; Parameters:    Size  Location     Type
  1294 ;;  dividend        2    0[COMRAM] unsigned int 
  1295 ;;  divisor         2    2[COMRAM] unsigned int 
  1296 ;; Auto vars:     Size  Location     Type
  1297 ;;  quotient        2    4[COMRAM] unsigned int 
  1298 ;;  counter         1    6[COMRAM] unsigned char 
  1299 ;; Return value:  Size  Location     Type
  1300 ;;                  2    0[COMRAM] unsigned int 
  1301 ;; Registers used:
  1302 ;;		wreg, status,2, status,0
  1303 ;; Tracked objects:
  1304 ;;		On entry : 0/0
  1305 ;;		On exit  : 0/0
  1306 ;;		Unchanged: 0/0
  1307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1308 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1309 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1310 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1311 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1312 ;;Total ram usage:        7 bytes
  1313 ;; Hardware stack levels used:    1
  1314 ;; This function calls:
  1315 ;;		Nothing
  1316 ;; This function is called by:
  1317 ;;		__doprnt
  1318 ;; This function uses a non-reentrant model
  1319 ;;
  1320                           
  1321                           	psect	text5
  1322  0017B8                     __ptext5:
  1323                           	opt callstack 0
  1324  0017B8                     ___lwdiv:
  1325                           	opt callstack 28
  1326                           
  1327                           ;incstack = 0
  1328  0017B8  0E00               	movlw	0
  1329  0017BA  6E06               	movwf	___lwdiv@quotient+1,c
  1330  0017BC  0E00               	movlw	0
  1331  0017BE  6E05               	movwf	___lwdiv@quotient,c
  1332  0017C0  5003               	movf	___lwdiv@divisor,w,c
  1333  0017C2  1004               	iorwf	___lwdiv@divisor+1,w,c
  1334  0017C4  B4D8               	btfsc	status,2,c
  1335  0017C6  D01C               	goto	l761
  1336  0017C8  0E01               	movlw	1
  1337  0017CA  6E07               	movwf	___lwdiv@counter,c
  1338  0017CC  D004               	goto	l1441
  1339  0017CE                     l1439:
  1340  0017CE  90D8               	bcf	status,0,c
  1341  0017D0  3603               	rlcf	___lwdiv@divisor,f,c
  1342  0017D2  3604               	rlcf	___lwdiv@divisor+1,f,c
  1343  0017D4  2A07               	incf	___lwdiv@counter,f,c
  1344  0017D6                     l1441:
  1345  0017D6  AE04               	btfss	___lwdiv@divisor+1,7,c
  1346  0017D8  D7FA               	goto	l1439
  1347  0017DA                     u590:
  1348  0017DA  90D8               	bcf	status,0,c
  1349  0017DC  3605               	rlcf	___lwdiv@quotient,f,c
  1350  0017DE  3606               	rlcf	___lwdiv@quotient+1,f,c
  1351  0017E0  5003               	movf	___lwdiv@divisor,w,c
  1352  0017E2  5C01               	subwf	___lwdiv@dividend,w,c
  1353  0017E4  5004               	movf	___lwdiv@divisor+1,w,c
  1354  0017E6  5802               	subwfb	___lwdiv@dividend+1,w,c
  1355  0017E8  A0D8               	btfss	status,0,c
  1356  0017EA  D005               	goto	l1451
  1357  0017EC  5003               	movf	___lwdiv@divisor,w,c
  1358  0017EE  5E01               	subwf	___lwdiv@dividend,f,c
  1359  0017F0  5004               	movf	___lwdiv@divisor+1,w,c
  1360  0017F2  5A02               	subwfb	___lwdiv@dividend+1,f,c
  1361  0017F4  8005               	bsf	___lwdiv@quotient,0,c
  1362  0017F6                     l1451:
  1363  0017F6  90D8               	bcf	status,0,c
  1364  0017F8  3204               	rrcf	___lwdiv@divisor+1,f,c
  1365  0017FA  3203               	rrcf	___lwdiv@divisor,f,c
  1366  0017FC  2E07               	decfsz	___lwdiv@counter,f,c
  1367  0017FE  D7ED               	goto	u590
  1368  001800                     l761:
  1369  001800  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  1370  001804  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1371  001808  0012               	return		;funcret
  1372  00180A                     __end_of___lwdiv:
  1373                           	opt callstack 0
  1374                           
  1375 ;; *************** function _REV_init *****************
  1376 ;; Defined at:
  1377 ;;		line 10 in file "rev-basic.c"
  1378 ;; Parameters:    Size  Location     Type
  1379 ;;		None
  1380 ;; Auto vars:     Size  Location     Type
  1381 ;;  dummy_int       2    0        int 
  1382 ;;  dummy_char      1    0        unsigned char 
  1383 ;; Return value:  Size  Location     Type
  1384 ;;                  1    wreg      void 
  1385 ;; Registers used:
  1386 ;;		wreg, status,2, status,0, cstack
  1387 ;; Tracked objects:
  1388 ;;		On entry : 0/0
  1389 ;;		On exit  : 0/0
  1390 ;;		Unchanged: 0/0
  1391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1393 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1395 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1396 ;;Total ram usage:        3 bytes
  1397 ;; Hardware stack levels used:    1
  1398 ;; Hardware stack levels required when called:    2
  1399 ;; This function calls:
  1400 ;;		_LCD_Init
  1401 ;;		_REV_btn
  1402 ;;		_REV_led
  1403 ;;		_REV_pot
  1404 ;;		_putch
  1405 ;; This function is called by:
  1406 ;;		_main
  1407 ;; This function uses a non-reentrant model
  1408 ;;
  1409                           
  1410                           	psect	text6
  1411  0015F2                     __ptext6:
  1412                           	opt callstack 0
  1413  0015F2                     _REV_init:
  1414                           	opt callstack 28
  1415                           
  1416                           ;rev-basic.c: 11: char dummy_char;;rev-basic.c: 12: int dummy_int;;rev-basic.c: 15: OSCC
      +                          ON = (unsigned char)((OSCCON & 0b10001111) | 0b01110000);
  1417                           
  1418                           ;incstack = 0
  1419  0015F2  50D3               	movf	4051,w,c	;volatile
  1420  0015F4  0B8F               	andlw	143
  1421  0015F6  0970               	iorlw	112
  1422  0015F8  6ED3               	movwf	4051,c	;volatile
  1423                           
  1424                           ;rev-basic.c: 64: TRISDbits.RD2 = 0;
  1425  0015FA  9495               	bcf	3989,2,c	;volatile
  1426                           
  1427                           ;rev-basic.c: 65: TRISDbits.RD3 = 0;
  1428  0015FC  9695               	bcf	3989,3,c	;volatile
  1429                           
  1430                           ;rev-basic.c: 66: TRISCbits.RC4 = 0;
  1431  0015FE  9894               	bcf	3988,4,c	;volatile
  1432                           
  1433                           ;rev-basic.c: 67: TRISDbits.RD4 = 0;
  1434  001600  9895               	bcf	3989,4,c	;volatile
  1435                           
  1436                           ;rev-basic.c: 68: TRISDbits.RD5 = 0;
  1437  001602  9A95               	bcf	3989,5,c	;volatile
  1438                           
  1439                           ;rev-basic.c: 69: TRISDbits.RD6 = 0;
  1440  001604  9C95               	bcf	3989,6,c	;volatile
  1441                           
  1442                           ;rev-basic.c: 71: ANSELDbits.ANSD2 = 0;
  1443  001606  010F               	movlb	15	; () banked
  1444  001608  953B               	bcf	59,2,b	;volatile
  1445                           
  1446                           ; BSR set to: 15
  1447                           ;rev-basic.c: 72: ANSELDbits.ANSD3 = 0;
  1448  00160A  973B               	bcf	59,3,b	;volatile
  1449                           
  1450                           ; BSR set to: 15
  1451                           ;rev-basic.c: 73: ANSELCbits.ANSC4 = 0;
  1452  00160C  993A               	bcf	58,4,b	;volatile
  1453                           
  1454                           ; BSR set to: 15
  1455                           ;rev-basic.c: 74: ANSELDbits.ANSD4 = 0;
  1456  00160E  993B               	bcf	59,4,b	;volatile
  1457                           
  1458                           ; BSR set to: 15
  1459                           ;rev-basic.c: 75: ANSELDbits.ANSD5 = 0;
  1460  001610  9B3B               	bcf	59,5,b	;volatile
  1461                           
  1462                           ; BSR set to: 15
  1463                           ;rev-basic.c: 76: ANSELDbits.ANSD6 = 0;
  1464  001612  9D3B               	bcf	59,6,b	;volatile
  1465                           
  1466                           ; BSR set to: 15
  1467                           ;rev-basic.c: 78: LATDbits.LATD2 = 1;
  1468  001614  848C               	bsf	3980,2,c	;volatile
  1469                           
  1470                           ; BSR set to: 15
  1471                           ;rev-basic.c: 79: LATDbits.LATD3 = 1;
  1472  001616  868C               	bsf	3980,3,c	;volatile
  1473                           
  1474                           ; BSR set to: 15
  1475                           ;rev-basic.c: 80: LATCbits.LATC4 = 1;
  1476  001618  888B               	bsf	3979,4,c	;volatile
  1477                           
  1478                           ; BSR set to: 15
  1479                           ;rev-basic.c: 81: LATDbits.LATD4 = 1;
  1480  00161A  888C               	bsf	3980,4,c	;volatile
  1481                           
  1482                           ; BSR set to: 15
  1483                           ;rev-basic.c: 82: LATDbits.LATD6 = 1;
  1484  00161C  8C8C               	bsf	3980,6,c	;volatile
  1485                           
  1486                           ; BSR set to: 15
  1487                           ;rev-basic.c: 83: LATDbits.LATD5 = 1;
  1488  00161E  8A8C               	bsf	3980,5,c	;volatile
  1489                           
  1490                           ; BSR set to: 15
  1491                           ;rev-basic.c: 86: TRISCbits.RC0 = 1;
  1492  001620  8094               	bsf	3988,0,c	;volatile
  1493                           
  1494                           ; BSR set to: 15
  1495                           ;rev-basic.c: 87: TRISAbits.RA4 = 1;
  1496  001622  8892               	bsf	3986,4,c	;volatile
  1497                           
  1498                           ; BSR set to: 15
  1499                           ;rev-basic.c: 88: TRISAbits.RA3 = 1;
  1500  001624  8692               	bsf	3986,3,c	;volatile
  1501                           
  1502                           ; BSR set to: 15
  1503                           ;rev-basic.c: 89: TRISAbits.RA2 = 1;
  1504  001626  8492               	bsf	3986,2,c	;volatile
  1505                           
  1506                           ; BSR set to: 15
  1507                           ;rev-basic.c: 92: ANSELAbits.ANSA3 = 0;
  1508  001628  9738               	bcf	56,3,b	;volatile
  1509                           
  1510                           ; BSR set to: 15
  1511                           ;rev-basic.c: 93: ANSELAbits.ANSA2 = 0;
  1512  00162A  9538               	bcf	56,2,b	;volatile
  1513                           
  1514                           ; BSR set to: 15
  1515                           ;rev-basic.c: 96: TRISAbits.RA5 = 1;
  1516  00162C  8A92               	bsf	3986,5,c	;volatile
  1517                           
  1518                           ; BSR set to: 15
  1519                           ;rev-basic.c: 97: TRISEbits.RE0 = 1;
  1520  00162E  8096               	bsf	3990,0,c	;volatile
  1521                           
  1522                           ; BSR set to: 15
  1523                           ;rev-basic.c: 99: TRISAbits.RA5 = 1;
  1524  001630  8A92               	bsf	3986,5,c	;volatile
  1525                           
  1526                           ; BSR set to: 15
  1527                           ;rev-basic.c: 100: TRISEbits.RE0 = 1;
  1528  001632  8096               	bsf	3990,0,c	;volatile
  1529                           
  1530                           ; BSR set to: 15
  1531                           ;rev-basic.c: 102: ADON = 1;
  1532  001634  80C2               	bsf	4034,0,c	;volatile
  1533                           
  1534                           ; BSR set to: 15
  1535                           ;rev-basic.c: 103: ADCON1 = 0;
  1536  001636  0E00               	movlw	0
  1537  001638  6EC1               	movwf	4033,c	;volatile
  1538                           
  1539                           ; BSR set to: 15
  1540                           ;rev-basic.c: 104: ADCON2 = (unsigned char)(ADCON2 | 0b00110101);
  1541  00163A  50C0               	movf	4032,w,c	;volatile
  1542  00163C  0935               	iorlw	53
  1543  00163E  6EC0               	movwf	4032,c	;volatile
  1544                           
  1545                           ; BSR set to: 15
  1546                           ;rev-basic.c: 106: ADCON2bits.ADFM = 1;
  1547  001640  8EC0               	bsf	4032,7,c	;volatile
  1548                           
  1549                           ;rev-basic.c: 107: ADCON2bits.ADCS = 0b101;
  1550  001642  50C0               	movf	4032,w,c	;volatile
  1551  001644  0BF8               	andlw	-8
  1552  001646  0905               	iorlw	5
  1553  001648  6EC0               	movwf	4032,c	;volatile
  1554                           
  1555                           ; BSR set to: 15
  1556                           ;rev-basic.c: 108: ADCON0bits.ADON = 1;
  1557  00164A  80C2               	bsf	4034,0,c	;volatile
  1558                           
  1559                           ; BSR set to: 15
  1560                           ;rev-basic.c: 111: TRISCbits.RC6 = 0;
  1561  00164C  9C94               	bcf	3988,6,c	;volatile
  1562                           
  1563                           ; BSR set to: 15
  1564                           ;rev-basic.c: 112: TRISCbits.RC7 = 1;
  1565  00164E  8E94               	bsf	3988,7,c	;volatile
  1566                           
  1567                           ;rev-basic.c: 115: TXSTA1 = 0b00100000;
  1568  001650  0E20               	movlw	32
  1569  001652  6EAC               	movwf	4012,c	;volatile
  1570                           
  1571                           ;rev-basic.c: 116: RCSTA1 = 0b10010000;
  1572  001654  0E90               	movlw	144
  1573  001656  6EAB               	movwf	4011,c	;volatile
  1574                           
  1575                           ; BSR set to: 15
  1576                           ;rev-basic.c: 117: BAUDCON1bits.BRG16 = 1;
  1577  001658  86B8               	bsf	4024,3,c	;volatile
  1578                           
  1579                           ; BSR set to: 15
  1580                           ;rev-basic.c: 118: TXSTA1bits.BRGH = 1;
  1581  00165A  84AC               	bsf	4012,2,c	;volatile
  1582                           
  1583                           ;rev-basic.c: 122: SPBRG = 34;
  1584  00165C  0E22               	movlw	34
  1585  00165E  6EAF               	movwf	4015,c	;volatile
  1586                           
  1587                           ; BSR set to: 15
  1588                           ;rev-basic.c: 126: LCD_Init();
  1589  001660  EC4A  F00A         	call	_LCD_Init
  1590  001664  0E01               	movlw	1
  1591  001666  ECAD  F00A         	call	_REV_btn
  1592                           
  1593                           ;rev-basic.c: 131: REV_led(1,1);
  1594  00166A  0E01               	movlw	1
  1595  00166C  6E04               	movwf	REV_led@state,c
  1596  00166E  0E01               	movlw	1
  1597  001670  EC41  F00B         	call	_REV_led
  1598                           
  1599                           ;rev-basic.c: 132: putch('a');
  1600  001674  0E61               	movlw	97
  1601  001676  EC72  F00C         	call	_putch
  1602  00167A  0E01               	movlw	1
  1603  00167C  ECB1  F00B         	call	_REV_pot
  1604  001680  0012               	return		;funcret
  1605  001682                     __end_of_REV_init:
  1606                           	opt callstack 0
  1607                           
  1608 ;; *************** function _putch *****************
  1609 ;; Defined at:
  1610 ;;		line 246 in file "rev-basic.c"
  1611 ;; Parameters:    Size  Location     Type
  1612 ;;  c               1    wreg     unsigned char 
  1613 ;; Auto vars:     Size  Location     Type
  1614 ;;  c               1    0[COMRAM] unsigned char 
  1615 ;; Return value:  Size  Location     Type
  1616 ;;                  1    wreg      void 
  1617 ;; Registers used:
  1618 ;;		wreg
  1619 ;; Tracked objects:
  1620 ;;		On entry : 0/0
  1621 ;;		On exit  : 0/0
  1622 ;;		Unchanged: 0/0
  1623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1625 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1627 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1628 ;;Total ram usage:        1 bytes
  1629 ;; Hardware stack levels used:    1
  1630 ;; This function calls:
  1631 ;;		Nothing
  1632 ;; This function is called by:
  1633 ;;		_REV_init
  1634 ;;		_printf
  1635 ;;		__doprnt
  1636 ;; This function uses a non-reentrant model
  1637 ;;
  1638                           
  1639                           	psect	text7
  1640  0018E4                     __ptext7:
  1641                           	opt callstack 0
  1642  0018E4                     _putch:
  1643                           	opt callstack 28
  1644                           
  1645                           ;incstack = 0
  1646                           ;putch@c stored from wreg
  1647  0018E4  6E01               	movwf	putch@c,c
  1648  0018E6                     
  1649                           ;rev-basic.c: 248: while(!TRMT1);
  1650  0018E6  A2AC               	btfss	4012,1,c	;volatile
  1651  0018E8  D7FE               	goto	l1043
  1652                           
  1653                           ;rev-basic.c: 250: TXREG1 = c;
  1654  0018EA  C001  FFAD         	movff	putch@c,4013	;volatile
  1655  0018EE  0012               	return		;funcret
  1656  0018F0                     __end_of_putch:
  1657                           	opt callstack 0
  1658                           
  1659 ;; *************** function _REV_pot *****************
  1660 ;; Defined at:
  1661 ;;		line 138 in file "rev-basic.c"
  1662 ;; Parameters:    Size  Location     Type
  1663 ;;  adc_id          1    wreg     unsigned char 
  1664 ;; Auto vars:     Size  Location     Type
  1665 ;;  adc_id          1    6[COMRAM] unsigned char 
  1666 ;;  result          2    4[COMRAM] int 
  1667 ;; Return value:  Size  Location     Type
  1668 ;;                  2    0[COMRAM] int 
  1669 ;; Registers used:
  1670 ;;		wreg, status,2, status,0
  1671 ;; Tracked objects:
  1672 ;;		On entry : 0/0
  1673 ;;		On exit  : 0/0
  1674 ;;		Unchanged: 0/0
  1675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1676 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1677 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1678 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1679 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1680 ;;Total ram usage:        7 bytes
  1681 ;; Hardware stack levels used:    1
  1682 ;; This function calls:
  1683 ;;		Nothing
  1684 ;; This function is called by:
  1685 ;;		_REV_init
  1686 ;;		_main
  1687 ;; This function uses a non-reentrant model
  1688 ;;
  1689                           
  1690                           	psect	text8
  1691  001762                     __ptext8:
  1692                           	opt callstack 0
  1693  001762                     _REV_pot:
  1694                           	opt callstack 30
  1695                           
  1696                           ;incstack = 0
  1697                           ;REV_pot@adc_id stored from wreg
  1698  001762  6E07               	movwf	REV_pot@adc_id,c
  1699                           
  1700                           ;rev-basic.c: 139: int result;;rev-basic.c: 145: switch(adc_id){
  1701  001764  D00E               	goto	l1489
  1702  001766                     l1479:
  1703                           
  1704                           ;rev-basic.c: 147: ADCON0bits.CHS = 0b00100;
  1705  001766  50C2               	movf	4034,w,c	;volatile
  1706  001768  0B83               	andlw	-125
  1707  00176A  0910               	iorlw	16
  1708  00176C  D003               	goto	L2
  1709  00176E                     l1481:
  1710                           
  1711                           ;rev-basic.c: 150: ADCON0bits.CHS = 0b00101;
  1712  00176E  50C2               	movf	4034,w,c	;volatile
  1713  001770  0B83               	andlw	-125
  1714  001772  0914               	iorlw	20
  1715  001774                     L2:
  1716  001774  6EC2               	movwf	4034,c	;volatile
  1717                           
  1718                           ;rev-basic.c: 151: break;
  1719  001776  D00D               	goto	l90
  1720  001778                     l1483:
  1721                           
  1722                           ;rev-basic.c: 153: return 0;
  1723  001778  0E00               	movlw	0
  1724  00177A  6E02               	movwf	?_REV_pot+1,c
  1725  00177C  0E00               	movlw	0
  1726  00177E  6E01               	movwf	?_REV_pot,c
  1727  001780  0012               	return	
  1728  001782                     l1489:
  1729  001782  5007               	movf	REV_pot@adc_id,w,c
  1730                           
  1731                           ; Switch size 1, requested type "simple"
  1732                           ; Number of cases is 2, Range of values is 1 to 2
  1733                           ; switch strategies available:
  1734                           ; Name         Instructions Cycles
  1735                           ; simple_byte            7     4 (average)
  1736                           ;	Chosen strategy is simple_byte
  1737  001784  0A01               	xorlw	1	; case 1
  1738  001786  B4D8               	btfsc	status,2,c
  1739  001788  D7EE               	goto	l1479
  1740  00178A  0A03               	xorlw	3	; case 2
  1741  00178C  B4D8               	btfsc	status,2,c
  1742  00178E  D7EF               	goto	l1481
  1743  001790  D7F3               	goto	l1483
  1744  001792                     l90:
  1745                           
  1746                           ;rev-basic.c: 156: GODONE = 1;
  1747  001792  82C2               	bsf	4034,1,c	;volatile
  1748  001794                     l94:
  1749  001794  B2C2               	btfsc	4034,1,c	;volatile
  1750  001796  D7FE               	goto	l94
  1751                           
  1752                           ;rev-basic.c: 159: result = (ADRESH << 8) | ADRESL;
  1753  001798  50C3               	movf	4035,w,c	;volatile
  1754  00179A  CFC4 F003          	movff	4036,??_REV_pot	;volatile
  1755  00179E  6A04               	clrf	(??_REV_pot+1)& (0+255),c
  1756  0017A0  C003  F004         	movff	??_REV_pot,??_REV_pot+1
  1757  0017A4  6A03               	clrf	??_REV_pot,c
  1758  0017A6  1003               	iorwf	??_REV_pot,w,c
  1759  0017A8  6E05               	movwf	REV_pot@result,c
  1760  0017AA  5004               	movf	??_REV_pot+1,w,c
  1761  0017AC  6E06               	movwf	REV_pot@result+1,c
  1762                           
  1763                           ;rev-basic.c: 161: return result;
  1764  0017AE  C005  F001         	movff	REV_pot@result,?_REV_pot
  1765  0017B2  C006  F002         	movff	REV_pot@result+1,?_REV_pot+1
  1766  0017B6  0012               	return		;funcret
  1767  0017B8                     __end_of_REV_pot:
  1768                           	opt callstack 0
  1769                           
  1770 ;; *************** function _REV_led *****************
  1771 ;; Defined at:
  1772 ;;		line 211 in file "rev-basic.c"
  1773 ;; Parameters:    Size  Location     Type
  1774 ;;  id              1    wreg     unsigned char 
  1775 ;;  state           1    3[COMRAM] unsigned char 
  1776 ;; Auto vars:     Size  Location     Type
  1777 ;;  id              1    4[COMRAM] unsigned char 
  1778 ;; Return value:  Size  Location     Type
  1779 ;;                  1    wreg      void 
  1780 ;; Registers used:
  1781 ;;		wreg, status,2, status,0
  1782 ;; Tracked objects:
  1783 ;;		On entry : 0/0
  1784 ;;		On exit  : 0/0
  1785 ;;		Unchanged: 0/0
  1786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1787 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1788 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1790 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1791 ;;Total ram usage:        2 bytes
  1792 ;; Hardware stack levels used:    1
  1793 ;; This function calls:
  1794 ;;		Nothing
  1795 ;; This function is called by:
  1796 ;;		_REV_init
  1797 ;;		_main
  1798 ;; This function uses a non-reentrant model
  1799 ;;
  1800                           
  1801                           	psect	text9
  1802  001682                     __ptext9:
  1803                           	opt callstack 0
  1804  001682                     _REV_led:
  1805                           	opt callstack 30
  1806                           
  1807                           ;incstack = 0
  1808                           ;REV_led@id stored from wreg
  1809  001682  6E05               	movwf	REV_led@id,c
  1810                           
  1811                           ;rev-basic.c: 220: state = (unsigned char)(state == 0 ? 1 : 0);
  1812  001684  5004               	movf	REV_led@state,w,c
  1813  001686  A4D8               	btfss	status,2,c
  1814  001688  D002               	goto	u640
  1815  00168A  0E01               	movlw	1
  1816  00168C  D001               	goto	u650
  1817  00168E                     u640:
  1818  00168E  0E00               	movlw	0
  1819  001690                     u650:
  1820  001690  6E04               	movwf	REV_led@state,c
  1821                           
  1822                           ;rev-basic.c: 221: switch(id){
  1823  001692  D024               	goto	l1475
  1824  001694                     l117:
  1825                           
  1826                           ;rev-basic.c: 223: LATD2 = state;
  1827  001694  A004               	btfss	REV_led@state,0,c
  1828  001696  D002               	goto	u660
  1829  001698  848C               	bsf	3980,2,c	;volatile
  1830  00169A  0012               	return	
  1831  00169C                     u660:
  1832  00169C  948C               	bcf	3980,2,c	;volatile
  1833                           
  1834                           ;rev-basic.c: 224: break;
  1835  00169E  0012               	return	
  1836  0016A0                     l119:
  1837                           
  1838                           ;rev-basic.c: 226: LATD3 = state;
  1839  0016A0  A004               	btfss	REV_led@state,0,c
  1840  0016A2  D002               	goto	u680
  1841  0016A4  868C               	bsf	3980,3,c	;volatile
  1842  0016A6  0012               	return	
  1843  0016A8                     u680:
  1844  0016A8  968C               	bcf	3980,3,c	;volatile
  1845                           
  1846                           ;rev-basic.c: 227: break;
  1847  0016AA  0012               	return	
  1848  0016AC                     l120:
  1849                           
  1850                           ;rev-basic.c: 229: LATC4 = state;
  1851  0016AC  A004               	btfss	REV_led@state,0,c
  1852  0016AE  D002               	goto	u700
  1853  0016B0  888B               	bsf	3979,4,c	;volatile
  1854  0016B2  0012               	return	
  1855  0016B4                     u700:
  1856  0016B4  988B               	bcf	3979,4,c	;volatile
  1857                           
  1858                           ;rev-basic.c: 230: break;
  1859  0016B6  0012               	return	
  1860  0016B8                     l121:
  1861                           
  1862                           ;rev-basic.c: 232: LATD4 = state;
  1863  0016B8  A004               	btfss	REV_led@state,0,c
  1864  0016BA  D002               	goto	u720
  1865  0016BC  888C               	bsf	3980,4,c	;volatile
  1866  0016BE  0012               	return	
  1867  0016C0                     u720:
  1868  0016C0  988C               	bcf	3980,4,c	;volatile
  1869                           
  1870                           ;rev-basic.c: 233: break;
  1871  0016C2  0012               	return	
  1872  0016C4                     l122:
  1873                           
  1874                           ;rev-basic.c: 235: LATD5 = state;
  1875  0016C4  A004               	btfss	REV_led@state,0,c
  1876  0016C6  D002               	goto	u740
  1877  0016C8  8A8C               	bsf	3980,5,c	;volatile
  1878  0016CA  0012               	return	
  1879  0016CC                     u740:
  1880  0016CC  9A8C               	bcf	3980,5,c	;volatile
  1881                           
  1882                           ;rev-basic.c: 236: break;
  1883  0016CE  0012               	return	
  1884  0016D0                     l123:
  1885                           
  1886                           ;rev-basic.c: 238: LATD6 = state;
  1887  0016D0  A004               	btfss	REV_led@state,0,c
  1888  0016D2  D002               	goto	u760
  1889  0016D4  8C8C               	bsf	3980,6,c	;volatile
  1890  0016D6  0012               	return	
  1891  0016D8                     u760:
  1892  0016D8  9C8C               	bcf	3980,6,c	;volatile
  1893                           
  1894                           ;rev-basic.c: 239: break;
  1895  0016DA  0012               	return	
  1896  0016DC                     l1475:
  1897  0016DC  5005               	movf	REV_led@id,w,c
  1898                           
  1899                           ; Switch size 1, requested type "simple"
  1900                           ; Number of cases is 6, Range of values is 1 to 6
  1901                           ; switch strategies available:
  1902                           ; Name         Instructions Cycles
  1903                           ; simple_byte           19    10 (average)
  1904                           ;	Chosen strategy is simple_byte
  1905  0016DE  0A01               	xorlw	1	; case 1
  1906  0016E0  B4D8               	btfsc	status,2,c
  1907  0016E2  D7D8               	goto	l117
  1908  0016E4  0A03               	xorlw	3	; case 2
  1909  0016E6  B4D8               	btfsc	status,2,c
  1910  0016E8  D7DB               	goto	l119
  1911  0016EA  0A01               	xorlw	1	; case 3
  1912  0016EC  B4D8               	btfsc	status,2,c
  1913  0016EE  D7DE               	goto	l120
  1914  0016F0  0A07               	xorlw	7	; case 4
  1915  0016F2  B4D8               	btfsc	status,2,c
  1916  0016F4  D7E1               	goto	l121
  1917  0016F6  0A01               	xorlw	1	; case 5
  1918  0016F8  B4D8               	btfsc	status,2,c
  1919  0016FA  D7E4               	goto	l122
  1920  0016FC  0A03               	xorlw	3	; case 6
  1921  0016FE  A4D8               	btfss	status,2,c
  1922  001700  0012               	return	
  1923  001702  D7E6               	goto	l123
  1924  001704                     __end_of_REV_led:
  1925                           	opt callstack 0
  1926                           
  1927 ;; *************** function _REV_btn *****************
  1928 ;; Defined at:
  1929 ;;		line 164 in file "rev-basic.c"
  1930 ;; Parameters:    Size  Location     Type
  1931 ;;  id              1    wreg     unsigned char 
  1932 ;; Auto vars:     Size  Location     Type
  1933 ;;  id              1    1[COMRAM] unsigned char 
  1934 ;;  btn_state       1    2[COMRAM] unsigned char 
  1935 ;; Return value:  Size  Location     Type
  1936 ;;                  1    wreg      unsigned char 
  1937 ;; Registers used:
  1938 ;;		wreg, status,2, status,0
  1939 ;; Tracked objects:
  1940 ;;		On entry : 0/0
  1941 ;;		On exit  : 0/0
  1942 ;;		Unchanged: 0/0
  1943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1944 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1945 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1946 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1947 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1948 ;;Total ram usage:        3 bytes
  1949 ;; Hardware stack levels used:    1
  1950 ;; This function calls:
  1951 ;;		Nothing
  1952 ;; This function is called by:
  1953 ;;		_REV_init
  1954 ;;		_main
  1955 ;; This function uses a non-reentrant model
  1956 ;;
  1957                           
  1958                           	psect	text10
  1959  00155A                     __ptext10:
  1960                           	opt callstack 0
  1961  00155A                     _REV_btn:
  1962                           	opt callstack 29
  1963                           
  1964                           ;incstack = 0
  1965                           ;REV_btn@id stored from wreg
  1966  00155A  6E02               	movwf	REV_btn@id,c
  1967                           
  1968                           ;rev-basic.c: 167: char btn_state;;rev-basic.c: 169: switch(id){
  1969  00155C  D014               	goto	l1107
  1970  00155E                     l100:
  1971                           
  1972                           ;rev-basic.c: 171: btn_state = PORTCbits.RC0;
  1973  00155E  0E00               	movlw	0
  1974  001560  B082               	btfsc	3970,0,c	;volatile
  1975  001562  0E01               	movlw	1
  1976  001564  6E03               	movwf	REV_btn@btn_state,c
  1977                           
  1978                           ;rev-basic.c: 172: break;
  1979  001566  D01C               	goto	l1109
  1980  001568                     l102:
  1981                           
  1982                           ;rev-basic.c: 174: btn_state = PORTAbits.RA4;
  1983  001568  0E00               	movlw	0
  1984  00156A  B880               	btfsc	3968,4,c	;volatile
  1985  00156C  0E01               	movlw	1
  1986  00156E  6E03               	movwf	REV_btn@btn_state,c
  1987                           
  1988                           ;rev-basic.c: 175: break;
  1989  001570  D017               	goto	l1109
  1990  001572                     l103:
  1991                           
  1992                           ;rev-basic.c: 177: btn_state = PORTAbits.RA3;
  1993  001572  0E00               	movlw	0
  1994  001574  B680               	btfsc	3968,3,c	;volatile
  1995  001576  0E01               	movlw	1
  1996  001578  6E03               	movwf	REV_btn@btn_state,c
  1997                           
  1998                           ;rev-basic.c: 178: break;
  1999  00157A  D012               	goto	l1109
  2000  00157C                     l104:
  2001                           
  2002                           ;rev-basic.c: 180: btn_state = PORTAbits.RA2;
  2003  00157C  0E00               	movlw	0
  2004  00157E  B480               	btfsc	3968,2,c	;volatile
  2005  001580  0E01               	movlw	1
  2006  001582  6E03               	movwf	REV_btn@btn_state,c
  2007                           
  2008                           ;rev-basic.c: 181: break;
  2009  001584  D00D               	goto	l1109
  2010  001586                     l1107:
  2011  001586  5002               	movf	REV_btn@id,w,c
  2012                           
  2013                           ; Switch size 1, requested type "simple"
  2014                           ; Number of cases is 4, Range of values is 1 to 4
  2015                           ; switch strategies available:
  2016                           ; Name         Instructions Cycles
  2017                           ; simple_byte           13     7 (average)
  2018                           ;	Chosen strategy is simple_byte
  2019  001588  0A01               	xorlw	1	; case 1
  2020  00158A  B4D8               	btfsc	status,2,c
  2021  00158C  D7E8               	goto	l100
  2022  00158E  0A03               	xorlw	3	; case 2
  2023  001590  B4D8               	btfsc	status,2,c
  2024  001592  D7EA               	goto	l102
  2025  001594  0A01               	xorlw	1	; case 3
  2026  001596  B4D8               	btfsc	status,2,c
  2027  001598  D7EC               	goto	l103
  2028  00159A  0A07               	xorlw	7	; case 4
  2029  00159C  B4D8               	btfsc	status,2,c
  2030  00159E  D7EE               	goto	l104
  2031  0015A0                     l1109:
  2032                           
  2033                           ;rev-basic.c: 186: _delay((unsigned long)((2)*(16000000/4000.0)));
  2034  0015A0  0E0B               	movlw	11
  2035  0015A2  6E01               	movwf	??_REV_btn& (0+255),c
  2036  0015A4  0E62               	movlw	98
  2037  0015A6                     u1067:
  2038  0015A6  2EE8               	decfsz	wreg,f,c
  2039  0015A8  D7FE               	bra	u1067
  2040  0015AA  2E01               	decfsz	??_REV_btn& (0+255),f,c
  2041  0015AC  D7FC               	bra	u1067
  2042  0015AE  D000               	nop2	
  2043                           
  2044                           ;rev-basic.c: 189: switch(id){
  2045  0015B0  D011               	goto	l1121
  2046  0015B2                     l1111:
  2047                           
  2048                           ;rev-basic.c: 191: btn_state &= PORTCbits.RC0;
  2049  0015B2  A082               	btfss	3970,0,c	;volatile
  2050  0015B4  D00D               	goto	u150
  2051  0015B6  D00A               	goto	u151
  2052  0015B8                     u126:
  2053  0015B8  1603               	andwf	REV_btn@btn_state,f,c
  2054                           
  2055                           ;rev-basic.c: 192: break;
  2056  0015BA  D019               	goto	l1123
  2057  0015BC                     l1113:
  2058                           
  2059                           ;rev-basic.c: 194: btn_state &= PORTAbits.RA4;
  2060  0015BC  A880               	btfss	3968,4,c	;volatile
  2061  0015BE  D008               	goto	u150
  2062  0015C0  D005               	goto	u151
  2063  0015C2                     l1115:
  2064                           
  2065                           ;rev-basic.c: 197: btn_state &= PORTAbits.RA3;
  2066  0015C2  A680               	btfss	3968,3,c	;volatile
  2067  0015C4  D005               	goto	u150
  2068  0015C6  D002               	goto	u151
  2069  0015C8                     l1117:
  2070                           
  2071                           ;rev-basic.c: 200: btn_state &= PORTAbits.RA2;
  2072  0015C8  A480               	btfss	3968,2,c	;volatile
  2073  0015CA  D002               	goto	u150
  2074  0015CC                     u151:
  2075  0015CC  0E01               	movlw	1
  2076  0015CE  D7F4               	goto	u126
  2077  0015D0                     u150:
  2078  0015D0  0E00               	movlw	0
  2079  0015D2  D7F2               	goto	u126
  2080  0015D4                     l1121:
  2081  0015D4  5002               	movf	REV_btn@id,w,c
  2082                           
  2083                           ; Switch size 1, requested type "simple"
  2084                           ; Number of cases is 4, Range of values is 1 to 4
  2085                           ; switch strategies available:
  2086                           ; Name         Instructions Cycles
  2087                           ; simple_byte           13     7 (average)
  2088                           ;	Chosen strategy is simple_byte
  2089  0015D6  0A01               	xorlw	1	; case 1
  2090  0015D8  B4D8               	btfsc	status,2,c
  2091  0015DA  D7EB               	goto	l1111
  2092  0015DC  0A03               	xorlw	3	; case 2
  2093  0015DE  B4D8               	btfsc	status,2,c
  2094  0015E0  D7ED               	goto	l1113
  2095  0015E2  0A01               	xorlw	1	; case 3
  2096  0015E4  B4D8               	btfsc	status,2,c
  2097  0015E6  D7ED               	goto	l1115
  2098  0015E8  0A07               	xorlw	7	; case 4
  2099  0015EA  B4D8               	btfsc	status,2,c
  2100  0015EC  D7ED               	goto	l1117
  2101  0015EE                     l1123:
  2102                           
  2103                           ;rev-basic.c: 206: return btn_state;
  2104  0015EE  5003               	movf	REV_btn@btn_state,w,c
  2105  0015F0  0012               	return		;funcret
  2106  0015F2                     __end_of_REV_btn:
  2107                           	opt callstack 0
  2108                           
  2109 ;; *************** function _LCD_Init *****************
  2110 ;; Defined at:
  2111 ;;		line 6 in file "lcd.c"
  2112 ;; Parameters:    Size  Location     Type
  2113 ;;		None
  2114 ;; Auto vars:     Size  Location     Type
  2115 ;;		None
  2116 ;; Return value:  Size  Location     Type
  2117 ;;                  1    wreg      void 
  2118 ;; Registers used:
  2119 ;;		wreg, status,2, cstack
  2120 ;; Tracked objects:
  2121 ;;		On entry : 0/0
  2122 ;;		On exit  : 0/0
  2123 ;;		Unchanged: 0/0
  2124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2126 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2127 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2128 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2129 ;;Total ram usage:        1 bytes
  2130 ;; Hardware stack levels used:    1
  2131 ;; Hardware stack levels required when called:    1
  2132 ;; This function calls:
  2133 ;;		_LCD_Send
  2134 ;; This function is called by:
  2135 ;;		_REV_init
  2136 ;; This function uses a non-reentrant model
  2137 ;;
  2138                           
  2139                           	psect	text11
  2140  001494                     __ptext11:
  2141                           	opt callstack 0
  2142  001494                     _LCD_Init:
  2143                           	opt callstack 28
  2144                           
  2145                           ;lcd.c: 8: ANSELDbits.ANSD0 = 0;
  2146                           
  2147                           ;incstack = 0
  2148  001494  010F               	movlb	15	; () banked
  2149  001496  913B               	bcf	59,0,b	;volatile
  2150                           
  2151                           ;lcd.c: 9: ANSELDbits.ANSD1 = 0;
  2152  001498  933B               	bcf	59,1,b	;volatile
  2153                           
  2154                           ;lcd.c: 11: TRISDbits.TRISD0 = 1;
  2155  00149A  8095               	bsf	3989,0,c	;volatile
  2156                           
  2157                           ;lcd.c: 12: TRISDbits.TRISD1 = 1;
  2158  00149C  8295               	bsf	3989,1,c	;volatile
  2159                           
  2160                           ;lcd.c: 13: TRISAbits.TRISA0 = 0;
  2161  00149E  9092               	bcf	3986,0,c	;volatile
  2162                           
  2163                           ;lcd.c: 14: LATAbits.LATA0 = 1;
  2164  0014A0  8089               	bsf	3977,0,c	;volatile
  2165                           
  2166                           ; BSR set to: 15
  2167                           ;lcd.c: 17: SSP2CON1bits.SSPM = 0b1000;
  2168  0014A2  506C               	movf	3948,w,c	;volatile
  2169  0014A4  0BF0               	andlw	-16
  2170  0014A6  0908               	iorlw	8
  2171  0014A8  6E6C               	movwf	3948,c	;volatile
  2172                           
  2173                           ;lcd.c: 18: SSP2ADD = 19;
  2174  0014AA  0E13               	movlw	19
  2175  0014AC  6E6E               	movwf	3950,c	;volatile
  2176                           
  2177                           ; BSR set to: 15
  2178                           ;lcd.c: 19: SSP2CON1bits.SSPEN = 1;
  2179  0014AE  8A6C               	bsf	3948,5,c	;volatile
  2180                           
  2181                           ; BSR set to: 15
  2182                           ;lcd.c: 21: _delay((unsigned long)((5)*(32E6/4000.0)));
  2183  0014B0  0E34               	movlw	52
  2184  0014B2  6E02               	movwf	??_LCD_Init& (0+255),c
  2185  0014B4  0EF2               	movlw	242
  2186  0014B6                     u1077:
  2187  0014B6  2EE8               	decfsz	wreg,f,c
  2188  0014B8  D7FE               	bra	u1077
  2189  0014BA  2E02               	decfsz	??_LCD_Init& (0+255),f,c
  2190  0014BC  D7FC               	bra	u1077
  2191                           
  2192                           ;lcd.c: 23: SSP2CON2bits.SEN = 1;
  2193  0014BE  806B               	bsf	3947,0,c	;volatile
  2194  0014C0                     l167:
  2195  0014C0  B06B               	btfsc	3947,0,c	;volatile
  2196  0014C2  D7FE               	goto	l167
  2197                           
  2198                           ;lcd.c: 25: SSP2IF = 0;
  2199  0014C4  9EA4               	bcf	4004,7,c	;volatile
  2200                           
  2201                           ;lcd.c: 27: LCD_Send(0x7C);
  2202  0014C6  0E7C               	movlw	124
  2203  0014C8  EC62  F00C         	call	_LCD_Send
  2204                           
  2205                           ;lcd.c: 28: LCD_Send(0x80);
  2206  0014CC  0E80               	movlw	128
  2207  0014CE  EC62  F00C         	call	_LCD_Send
  2208                           
  2209                           ;lcd.c: 29: LCD_Send(0x38);
  2210  0014D2  0E38               	movlw	56
  2211  0014D4  EC62  F00C         	call	_LCD_Send
  2212                           
  2213                           ;lcd.c: 30: LCD_Send(0x80);
  2214  0014D8  0E80               	movlw	128
  2215  0014DA  EC62  F00C         	call	_LCD_Send
  2216                           
  2217                           ;lcd.c: 31: LCD_Send(0x39);
  2218  0014DE  0E39               	movlw	57
  2219  0014E0  EC62  F00C         	call	_LCD_Send
  2220                           
  2221                           ;lcd.c: 32: LCD_Send(0x80);
  2222  0014E4  0E80               	movlw	128
  2223  0014E6  EC62  F00C         	call	_LCD_Send
  2224                           
  2225                           ;lcd.c: 33: LCD_Send(0x17);
  2226  0014EA  0E17               	movlw	23
  2227  0014EC  EC62  F00C         	call	_LCD_Send
  2228                           
  2229                           ;lcd.c: 34: LCD_Send(0x80);
  2230  0014F0  0E80               	movlw	128
  2231  0014F2  EC62  F00C         	call	_LCD_Send
  2232                           
  2233                           ;lcd.c: 35: LCD_Send(0x7A);
  2234  0014F6  0E7A               	movlw	122
  2235  0014F8  EC62  F00C         	call	_LCD_Send
  2236                           
  2237                           ;lcd.c: 36: LCD_Send(0x80);
  2238  0014FC  0E80               	movlw	128
  2239  0014FE  EC62  F00C         	call	_LCD_Send
  2240                           
  2241                           ;lcd.c: 37: LCD_Send(0x5E);
  2242  001502  0E5E               	movlw	94
  2243  001504  EC62  F00C         	call	_LCD_Send
  2244                           
  2245                           ;lcd.c: 38: LCD_Send(0x80);
  2246  001508  0E80               	movlw	128
  2247  00150A  EC62  F00C         	call	_LCD_Send
  2248                           
  2249                           ;lcd.c: 39: LCD_Send(0x6B);
  2250  00150E  0E6B               	movlw	107
  2251  001510  EC62  F00C         	call	_LCD_Send
  2252                           
  2253                           ;lcd.c: 40: LCD_Send(0x80);
  2254  001514  0E80               	movlw	128
  2255  001516  EC62  F00C         	call	_LCD_Send
  2256                           
  2257                           ;lcd.c: 41: LCD_Send(0x0C);
  2258  00151A  0E0C               	movlw	12
  2259  00151C  EC62  F00C         	call	_LCD_Send
  2260                           
  2261                           ;lcd.c: 42: LCD_Send(0x80);
  2262  001520  0E80               	movlw	128
  2263  001522  EC62  F00C         	call	_LCD_Send
  2264                           
  2265                           ;lcd.c: 43: LCD_Send(0x01);
  2266  001526  0E01               	movlw	1
  2267  001528  EC62  F00C         	call	_LCD_Send
  2268                           
  2269                           ;lcd.c: 44: LCD_Send(0x80);
  2270  00152C  0E80               	movlw	128
  2271  00152E  EC62  F00C         	call	_LCD_Send
  2272                           
  2273                           ;lcd.c: 45: LCD_Send(0x06);
  2274  001532  0E06               	movlw	6
  2275  001534  EC62  F00C         	call	_LCD_Send
  2276                           
  2277                           ;lcd.c: 46: LCD_Send(0x80);
  2278  001538  0E80               	movlw	128
  2279  00153A  EC62  F00C         	call	_LCD_Send
  2280                           
  2281                           ;lcd.c: 47: LCD_Send(0x02);
  2282  00153E  0E02               	movlw	2
  2283  001540  EC62  F00C         	call	_LCD_Send
  2284                           
  2285                           ;lcd.c: 49: SSP2CON2bits.PEN = 1;
  2286  001544  846B               	bsf	3947,2,c	;volatile
  2287  001546                     l170:
  2288  001546  B46B               	btfsc	3947,2,c	;volatile
  2289  001548  D7FE               	goto	l170
  2290                           
  2291                           ;lcd.c: 52: _delay((unsigned long)((5)*(32E6/4000.0)));
  2292  00154A  0E34               	movlw	52
  2293  00154C  6E02               	movwf	??_LCD_Init& (0+255),c
  2294  00154E  0EF2               	movlw	242
  2295  001550                     u1087:
  2296  001550  2EE8               	decfsz	wreg,f,c
  2297  001552  D7FE               	bra	u1087
  2298  001554  2E02               	decfsz	??_LCD_Init& (0+255),f,c
  2299  001556  D7FC               	bra	u1087
  2300  001558  0012               	return		;funcret
  2301  00155A                     __end_of_LCD_Init:
  2302                           	opt callstack 0
  2303                           
  2304 ;; *************** function _LCD_ShowString *****************
  2305 ;; Defined at:
  2306 ;;		line 57 in file "lcd.c"
  2307 ;; Parameters:    Size  Location     Type
  2308 ;;  lineNum         1    wreg     unsigned char 
  2309 ;;  textData        2    1[COMRAM] PTR unsigned char 
  2310 ;;		 -> main@text(17), 
  2311 ;; Auto vars:     Size  Location     Type
  2312 ;;  lineNum         1    3[COMRAM] unsigned char 
  2313 ;;  i               1    4[COMRAM] unsigned char 
  2314 ;; Return value:  Size  Location     Type
  2315 ;;                  1    wreg      void 
  2316 ;; Registers used:
  2317 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2318 ;; Tracked objects:
  2319 ;;		On entry : 0/0
  2320 ;;		On exit  : 0/0
  2321 ;;		Unchanged: 0/0
  2322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2323 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2324 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2325 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2326 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2327 ;;Total ram usage:        4 bytes
  2328 ;; Hardware stack levels used:    1
  2329 ;; Hardware stack levels required when called:    1
  2330 ;; This function calls:
  2331 ;;		_LCD_Send
  2332 ;; This function is called by:
  2333 ;;		_main
  2334 ;; This function uses a non-reentrant model
  2335 ;;
  2336                           
  2337                           	psect	text12
  2338  001704                     __ptext12:
  2339                           	opt callstack 0
  2340  001704                     _LCD_ShowString:
  2341                           	opt callstack 29
  2342                           
  2343                           ;incstack = 0
  2344                           ;LCD_ShowString@lineNum stored from wreg
  2345  001704  6E04               	movwf	LCD_ShowString@lineNum,c
  2346                           
  2347                           ;lcd.c: 62: SSP2CON2bits.SEN = 1;
  2348  001706  806B               	bsf	3947,0,c	;volatile
  2349  001708                     l176:
  2350  001708  B06B               	btfsc	3947,0,c	;volatile
  2351  00170A  D7FE               	goto	l176
  2352                           
  2353                           ;lcd.c: 64: SSP2IF = 0;
  2354  00170C  9EA4               	bcf	4004,7,c	;volatile
  2355                           
  2356                           ;lcd.c: 66: LCD_Send(0x7c);
  2357  00170E  0E7C               	movlw	124
  2358  001710  EC62  F00C         	call	_LCD_Send
  2359                           
  2360                           ;lcd.c: 68: LCD_Send(0x80);
  2361  001714  0E80               	movlw	128
  2362  001716  EC62  F00C         	call	_LCD_Send
  2363                           
  2364                           ;lcd.c: 70: if(lineNum == 1){
  2365  00171A  0404               	decf	LCD_ShowString@lineNum,w,c
  2366  00171C  A4D8               	btfss	status,2,c
  2367  00171E  D004               	goto	l1671
  2368                           
  2369                           ;lcd.c: 71: LCD_Send(0x80);
  2370  001720  0E80               	movlw	128
  2371  001722  EC62  F00C         	call	_LCD_Send
  2372                           
  2373                           ;lcd.c: 72: }
  2374  001726  D007               	goto	l180
  2375  001728                     l1671:
  2376                           
  2377                           ;lcd.c: 73: else if (lineNum == 2){
  2378  001728  0E02               	movlw	2
  2379  00172A  1804               	xorwf	LCD_ShowString@lineNum,w,c
  2380  00172C  A4D8               	btfss	status,2,c
  2381  00172E  D003               	goto	l180
  2382                           
  2383                           ;lcd.c: 74: LCD_Send(0xC0);
  2384  001730  0EC0               	movlw	192
  2385  001732  EC62  F00C         	call	_LCD_Send
  2386  001736                     l180:
  2387                           
  2388                           ;lcd.c: 75: };lcd.c: 77: LCD_Send(0x40);
  2389  001736  0E40               	movlw	64
  2390  001738  EC62  F00C         	call	_LCD_Send
  2391                           
  2392                           ;lcd.c: 79: for (i = 0; i<16; i++){
  2393  00173C  0E00               	movlw	0
  2394  00173E  6E05               	movwf	LCD_ShowString@i,c
  2395  001740                     l1681:
  2396                           
  2397                           ;lcd.c: 80: LCD_Send(textData[i]);
  2398  001740  5005               	movf	LCD_ShowString@i,w,c
  2399  001742  2402               	addwf	LCD_ShowString@textData,w,c
  2400  001744  6ED9               	movwf	fsr2l,c
  2401  001746  0E00               	movlw	0
  2402  001748  2003               	addwfc	LCD_ShowString@textData+1,w,c
  2403  00174A  6EDA               	movwf	fsr2h,c
  2404  00174C  50DF               	movf	indf2,w,c
  2405  00174E  EC62  F00C         	call	_LCD_Send
  2406  001752  2A05               	incf	LCD_ShowString@i,f,c
  2407  001754  0E0F               	movlw	15
  2408  001756  6405               	cpfsgt	LCD_ShowString@i,c
  2409  001758  D7F3               	goto	l1681
  2410                           
  2411                           ;lcd.c: 81: };lcd.c: 83: SSP2CON2bits.PEN = 1;
  2412  00175A  846B               	bsf	3947,2,c	;volatile
  2413  00175C                     l184:
  2414  00175C  A46B               	btfss	3947,2,c	;volatile
  2415  00175E  0012               	return	
  2416  001760  D7FD               	goto	l184
  2417  001762                     __end_of_LCD_ShowString:
  2418                           	opt callstack 0
  2419                           
  2420 ;; *************** function _LCD_Send *****************
  2421 ;; Defined at:
  2422 ;;		line 88 in file "lcd.c"
  2423 ;; Parameters:    Size  Location     Type
  2424 ;;  data            1    wreg     unsigned char 
  2425 ;; Auto vars:     Size  Location     Type
  2426 ;;  data            1    0[COMRAM] unsigned char 
  2427 ;; Return value:  Size  Location     Type
  2428 ;;                  1    wreg      void 
  2429 ;; Registers used:
  2430 ;;		wreg
  2431 ;; Tracked objects:
  2432 ;;		On entry : 0/0
  2433 ;;		On exit  : 0/0
  2434 ;;		Unchanged: 0/0
  2435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2437 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2439 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2440 ;;Total ram usage:        1 bytes
  2441 ;; Hardware stack levels used:    1
  2442 ;; This function calls:
  2443 ;;		Nothing
  2444 ;; This function is called by:
  2445 ;;		_LCD_Init
  2446 ;;		_LCD_ShowString
  2447 ;; This function uses a non-reentrant model
  2448 ;;
  2449                           
  2450                           	psect	text13
  2451  0018C4                     __ptext13:
  2452                           	opt callstack 0
  2453  0018C4                     _LCD_Send:
  2454                           	opt callstack 28
  2455                           
  2456                           ;incstack = 0
  2457                           ;LCD_Send@data stored from wreg
  2458  0018C4  6E01               	movwf	LCD_Send@data,c
  2459                           
  2460                           ;lcd.c: 90: SSP2BUF = data;
  2461  0018C6  C001  FF6F         	movff	LCD_Send@data,3951	;volatile
  2462  0018CA                     l190:
  2463  0018CA  B06D               	btfsc	3949,0,c	;volatile
  2464  0018CC  D7FE               	goto	l190
  2465  0018CE                     u20:
  2466  0018CE  AEA4               	btfss	4004,7,c	;volatile
  2467  0018D0  D7FE               	goto	u20
  2468                           
  2469                           ;lcd.c: 93: SSP2IF = 0;
  2470  0018D2  9EA4               	bcf	4004,7,c	;volatile
  2471  0018D4  0012               	return		;funcret
  2472  0018D6                     __end_of_LCD_Send:
  2473                           	opt callstack 0
  2474                           
  2475 ;; *************** function _LCD_Clear *****************
  2476 ;; Defined at:
  2477 ;;		line 97 in file "lcd.c"
  2478 ;; Parameters:    Size  Location     Type
  2479 ;;		None
  2480 ;; Auto vars:     Size  Location     Type
  2481 ;;		None
  2482 ;; Return value:  Size  Location     Type
  2483 ;;                  1    wreg      void 
  2484 ;; Registers used:
  2485 ;;		wreg
  2486 ;; Tracked objects:
  2487 ;;		On entry : 0/0
  2488 ;;		On exit  : 0/0
  2489 ;;		Unchanged: 0/0
  2490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2492 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2493 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2494 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2495 ;;Total ram usage:        0 bytes
  2496 ;; Hardware stack levels used:    1
  2497 ;; This function calls:
  2498 ;;		Nothing
  2499 ;; This function is called by:
  2500 ;;		_main
  2501 ;; This function uses a non-reentrant model
  2502 ;;
  2503                           
  2504                           	psect	text14
  2505  0018D6                     __ptext14:
  2506                           	opt callstack 0
  2507  0018D6                     _LCD_Clear:
  2508                           	opt callstack 30
  2509                           
  2510                           ;lcd.c: 98: LATAbits.LATA0 = 0;
  2511                           
  2512                           ;incstack = 0
  2513  0018D6  9089               	bcf	3977,0,c	;volatile
  2514                           
  2515                           ;lcd.c: 99: _delay((unsigned long)((100)*(32E6/4000000.0)));
  2516  0018D8  0EA0               	movlw	160
  2517  0018DA                     u1097:
  2518  0018DA  D000               	nop2	
  2519  0018DC  2EE8               	decfsz	wreg,f,c
  2520  0018DE  D7FD               	bra	u1097
  2521                           
  2522                           ;lcd.c: 100: LATAbits.LATA0 = 1;
  2523  0018E0  8089               	bsf	3977,0,c	;volatile
  2524  0018E2  0012               	return		;funcret
  2525  0018E4                     __end_of_LCD_Clear:
  2526                           	opt callstack 0
  2527                           
  2528                           	psect	text15
  2529  000000                     __ptext15:
  2530                           	opt callstack 0
  2531                           
  2532                           	psect	rparam
  2533  0000                     tosu	equ	0xFFF
  2534                           tosh	equ	0xFFE
  2535                           tosl	equ	0xFFD
  2536                           stkptr	equ	0xFFC
  2537                           pclatu	equ	0xFFB
  2538                           pclath	equ	0xFFA
  2539                           pcl	equ	0xFF9
  2540                           tblptru	equ	0xFF8
  2541                           tblptrh	equ	0xFF7
  2542                           tblptrl	equ	0xFF6
  2543                           tablat	equ	0xFF5
  2544                           prodh	equ	0xFF4
  2545                           prodl	equ	0xFF3
  2546                           indf0	equ	0xFEF
  2547                           postinc0	equ	0xFEE
  2548                           postdec0	equ	0xFED
  2549                           preinc0	equ	0xFEC
  2550                           plusw0	equ	0xFEB
  2551                           fsr0h	equ	0xFEA
  2552                           fsr0l	equ	0xFE9
  2553                           wreg	equ	0xFE8
  2554                           indf1	equ	0xFE7
  2555                           postinc1	equ	0xFE6
  2556                           postdec1	equ	0xFE5
  2557                           preinc1	equ	0xFE4
  2558                           plusw1	equ	0xFE3
  2559                           fsr1h	equ	0xFE2
  2560                           fsr1l	equ	0xFE1
  2561                           bsr	equ	0xFE0
  2562                           indf2	equ	0xFDF
  2563                           postinc2	equ	0xFDE
  2564                           postdec2	equ	0xFDD
  2565                           preinc2	equ	0xFDC
  2566                           plusw2	equ	0xFDB
  2567                           fsr2h	equ	0xFDA
  2568                           fsr2l	equ	0xFD9
  2569                           status	equ	0xFD8


Data Sizes:
    Strings     64
    Constant    10
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     65      65
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_6(CODE[17]), STR_5(CODE[17]), STR_4(CODE[12]), STR_2(CODE[17]), 
		 -> STR_1(CODE[17]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), ?_printf(COMRAM[2]), 

    sprintf@wh	PTR unsigned char  size(2) Largest target is 17
		 -> main@text(COMRAM[17]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 17
		 -> NULL(NULL[0]), main@text(COMRAM[17]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_3(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), ?_printf(COMRAM[2]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 17
		 -> NULL(NULL[0]), main@text(COMRAM[17]), 

    _doprnt@f	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_6(CODE[17]), STR_5(CODE[17]), STR_4(CODE[12]), STR_3(CODE[18]), 
		 -> STR_2(CODE[17]), STR_1(CODE[17]), 

    _doprnt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), printf@ap(COMRAM[2]), 

    S1557__prbuf$func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    _doprnt@pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    S1557__prbuf$ptr	PTR unsigned char  size(2) Largest target is 17
		 -> NULL(NULL[0]), main@text(COMRAM[17]), 

    _doprnt@pb.ptr	PTR unsigned char  size(2) Largest target is 17
		 -> NULL(NULL[0]), main@text(COMRAM[17]), 

    _doprnt@pb	PTR struct __prbuf size(2) Largest target is 5
		 -> sprintf@pb(COMRAM[4]), printf@pb(COMRAM[4]), 

    LCD_ShowString@textData	PTR unsigned char  size(2) Largest target is 17
		 -> main@text(COMRAM[17]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _main->_sprintf
    _sprintf->__doprnt
    _printf->__doprnt
    __doprnt->___lwmod
    ___lwmod->___lwdiv
    _REV_init->_REV_pot
    _REV_led->_REV_btn
    _LCD_Init->_LCD_Send
    _LCD_ShowString->_LCD_Send

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                26    26      0    7105
                                             39 COMRAM    26    26      0
                          _LCD_Clear
                     _LCD_ShowString
                            _REV_btn
                           _REV_init
                            _REV_led
                            _REV_pot
                             _printf
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             14     6      8    2875
                                             25 COMRAM    14     6      8
                            __doprnt
 ---------------------------------------------------------------------------------
 (1) _printf                                              14     6      8    2135
                                             25 COMRAM    14     6      8
                            __doprnt
 ---------------------------------------------------------------------------------
 (2) __doprnt                                             22    16      6    1943
                                             12 COMRAM    13     7      6
                   Absolute function *
                            ___lwdiv
                            ___lwmod
                              _putch *
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     311
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _REV_init                                             3     3      0     679
                                              7 COMRAM     3     3      0
                           _LCD_Init
                            _REV_btn
                            _REV_led
                            _REV_pot
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _REV_pot                                              7     5      2      45
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (1) _REV_led                                              2     1      1     557
                                              3 COMRAM     2     1      1
                            _REV_btn (ARG)
 ---------------------------------------------------------------------------------
 (2) _REV_btn                                              3     3      0      45
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _LCD_Init                                             1     1      0      15
                                              1 COMRAM     1     1      0
                           _LCD_Send
 ---------------------------------------------------------------------------------
 (1) _LCD_ShowString                                       4     2      2     378
                                              1 COMRAM     4     2      2
                           _LCD_Send
 ---------------------------------------------------------------------------------
 (3) _LCD_Send                                             1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _LCD_Clear                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_Clear
   _LCD_ShowString
     _LCD_Send
   _REV_btn
   _REV_init
     _LCD_Init
       _LCD_Send
     _REV_btn
     _REV_led
       _REV_btn (ARG)
     _REV_pot
     _putch
   _REV_led
     _REV_btn (ARG)
   _REV_pot
   _printf
     __doprnt
       Absolute function(Fake) *
       ___lwdiv *
       ___lwmod *
         ___lwdiv (ARG)
       _putch *
   _sprintf
     __doprnt
       Absolute function(Fake) *
       ___lwdiv *
       ___lwmod *
         ___lwdiv (ARG)
       _putch *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             400      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     41      41       1       68.4%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
ABS                  0      0       0      12        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BIGRAM             F37      0       0      37        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Mon Mar 25 09:29:06 2019

                     l90 1792                       l94 1794                       u20 18CE  
           REV_led@state 0004                      l100 155E                      l102 1568  
                    l103 1572                      l104 157C                      l120 16AC  
                    l121 16B8                      l122 16C4                      l123 16D0  
                    l117 1694                      l119 16A0                      l170 1546  
                    l180 1736                      l228 13CC                      l190 18CA  
                    l167 14C0                      l184 175C                      l176 1708  
                    l258 10B2                      l761 1800                      l771 1884  
                    u150 15D0                      u126 15B8                      u151 15CC  
                    u700 16B4                      u620 1866                      u720 16C0  
                    u640 168E                      u650 1690                      u740 16CC  
                    u660 169C                      u590 17DA                      u760 16D8  
                    u680 16A8                      u920 12EE                      u930 1308  
                    u818 1082                      u860 11B8                      u918 12A8  
                    u838 10DE                      u898 11F0                      tosl 000FFD  
                    wreg 000FE8               _TXSTA1bits 000FAC                     l1111 15B2  
                   l1113 15BC                     l1121 15D4                     l1115 15C2  
                   l1123 15EE                     l1107 1586                     l1043 18E6  
                   l1117 15C8                     l1109 15A0                     l1511 108E  
                   l1441 17D6                     l1521 111E                     l1451 17F6  
                   l1531 1184                     l1523 114C                     l1515 10F2  
                   l1461 1862                     l1509 1088                     l1439 17CE  
                   l1551 1204                     l1481 176E                     l1537 1188  
                   l1721 1396                     l1713 1358                     l1475 16DC  
                   l1483 1778                     l1467 187A                     l1459 185A  
                   l1563 12BC                     l1555 122E                     l1557 1234  
                   l1725 13AC                     l1671 1728                     l1479 1766  
                   l1567 12E6                     l1681 1740                     l1489 1782  
                   l1729 13BA                     l1499 104E                     l1757 1486  
                   _ADON 007E10                     STR_1 102E                     STR_2 101D  
                   STR_3 100B                     STR_4 103F                     STR_5 102E  
                   STR_6 101D                     u1057 1488                     u1067 15A6  
                   u1077 14B6                     u1087 1550                     u1097 18DA  
          __CFG_FCMEN$ON 000000                     _main 1312          __end_of_REV_btn 15F2  
        __end_of_REV_led 1704       __size_of_LCD_Clear 000E          __end_of_REV_pot 17B8  
                   fsr2h 000FDA                     indf2 000FDF                     fsr2l 000FD9  
                   prodh 000FF4                     prodl 000FF3                     start 0000  
           ___param_bank 000000           _LCD_ShowString 1704         __end_of_LCD_Init 155A  
       __end_of_LCD_Send 18D6             _BAUDCON1bits 000FB8                    ?_main 0001  
                  _LATD2 007C62                    _LATC4 007C5C                    _LATD3 007C63  
                  _LATD4 007C64                    _RC1IF 007CF5                    _LATD5 007C65  
                  _LATD6 007C66          __end_of___lwdiv 180A          __end_of___lwmod 188E  
                  _SPBRG 000FAF          __end_of__doprnt 1312                    _TRMT1 007D61  
        __end_of_dpowers 100B         __end_of_REV_init 1682       __CFG_MCLRE$EXTMCLR 000000  
                  _putch 18E4                    main@a 003D                    pclath 000FFA  
                  tablat 000FF5                    status 000FD8          __end_of_sprintf 184C  
          REV_pot@adc_id 0007          __initialization 18F0   __end_of_LCD_ShowString 1762  
           __end_of_main 1494            REV_pot@result 0005             LCD_Send@data 0001  
                 ??_main 0028        __end_of_LCD_Clear 18E4            __activetblptr 000003  
                 _ADCON1 000FC1                   _ADCON2 000FC0                ??_REV_led 0005  
              ??_REV_btn 0001                   _ADRESH 000FC4                   _ADRESL 000FC3  
              ??_REV_pot 0003                   ?_putch 0001                   _GODONE 007E11  
         __CFG_WDTEN$OFF 000000                   _RCREG1 000FAE                   _RCSTA1 000FAB  
                 _OSCCON 000FD3                   _SSP2IF 007D27                   _TXREG1 000FAD  
                 _TXSTA1 000FAC          ?_LCD_ShowString 0002                ??___lwdiv 0005  
              ??___lwmod 000C                ??__doprnt 0013             __doprnt@flag 0015  
                 _printf 188E             __doprnt@prec 0016         REV_btn@btn_state 0003  
           __mediumconst 0000                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8                   putch@c 0001                ??_sprintf 0022  
             __accesstop 0060  __end_of__initialization 18F0                ?_LCD_Init 0001  
              ?_LCD_Send 0001            ___rparam_used 000001           __pcstackCOMRAM 0001  
          __end_of_putch 18F0                ?_REV_init 0001               __doprnt@ap 0011  
             __doprnt@pb 000D                  ??_putch 0001               ??_LCD_Init 0002  
             ??_LCD_Send 0001               ??_REV_init 0008                  ?_printf 001A  
                _SSP2ADD 000F6E                  _SSP2BUF 000F6F                  _REV_led 1682  
                _REV_btn 155A                  _REV_pot 1762                REV_led@id 0005  
              REV_btn@id 0002          LCD_ShowString@i 0005                  __Hparam 0000  
                __Lparam 0000                  ___lwdiv 17B8                  ___lwmod 184C  
           __psmallconst 1000                  __doprnt 104C                  __pcinit 18F0  
                __ramtop 1000                  __ptext0 1312                  __ptext1 180A  
                __ptext2 188E                  __ptext3 104C                  __ptext4 184C  
                __ptext5 17B8                  __ptext6 15F2                  __ptext7 18E4  
                __ptext8 1762                  __ptext9 1682          __size_of_printf 0036  
                _dpowers 1001                _LCD_Clear 18D6                  _sprintf 180A  
   end_of_initialization 18F0         ??_LCD_ShowString 0004    LCD_ShowString@lineNum 0004  
                printf@f 001A                  postdec2 000FDD                  postinc2 000FDE  
              _PORTAbits 000F80                _PORTCbits 000F82         __CFG_FOSC$INTIO7 000000  
              _TRISAbits 000F92                _TRISCbits 000F94                _TRISDbits 000F95  
              _TRISEbits 000F96               ?_LCD_Clear 0001        __size_of_LCD_Init 00C6  
      __size_of_LCD_Send 0012        __size_of_REV_init 0090           __end_of_printf 18C4  
    start_initialization 18F0              __doprnt@val 0017                 ??_printf 0022  
            ??_LCD_Clear 0001                 ?_REV_led 0004                 ?_REV_btn 0001  
               ?_REV_pot 0001                __doprnt@c 0019                __doprnt@f 000F  
       ___lwdiv@dividend 0001                 ?___lwdiv 0001                 ?___lwmod 0008  
               ?__doprnt 000D              __smallconst 1000         ___lwdiv@quotient 0005  
               ?_sprintf 001A           __size_of_putch 000C                 _LCD_Init 1494  
               _LCD_Send 18C4                 _LATAbits 000F89                 _LATBbits 000F8A  
               _LATCbits 000F8B                 _LATDbits 000F8C                 _REV_init 15F2  
             _ADCON0bits 000FC2               _ADCON2bits 000FC0                main@count 0040  
       __size_of_REV_btn 0098         __size_of_REV_led 0082         __size_of_REV_pot 0056  
               __Hrparam 0000                 __Lrparam 0000         __size_of___lwdiv 0052  
       __size_of___lwmod 0042         __size_of__doprnt 02C6               _ANSELAbits 000F38  
             _ANSELCbits 000F3A               _ANSELDbits 000F3B          ___lwdiv@divisor 0003  
        ___lwdiv@counter 0007                 __ptext10 155A                 __ptext11 1494  
               __ptext12 1704                 __ptext13 18C4                 __ptext14 18D6  
               __ptext15 0000             _SSP2CON1bits 000F6C             _SSP2CON2bits 000F6B  
       __size_of_sprintf 0042            __size_of_main 0182  __size_of_LCD_ShowString 005E  
               main@pot1 003E                 main@pot2 003B                 main@text 002A  
           _SSP2STATbits 000F6D                sprintf@ap 0022                sprintf@pb 0024  
              sprintf@wh 001A         ___lwmod@dividend 0008                 printf@ap 0022  
               printf@pb 0024   LCD_ShowString@textData 0002                 sprintf@f 001C  
        ___lwmod@divisor 000A          ___lwmod@counter 000C  
